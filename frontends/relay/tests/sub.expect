import "primitives/std.lib";

component subtract0(go: 1, clk: 1, x0_read_data: 32, x0_done: 1, y0_read_data: 32, y0_done: 1, z0_read_data: 32, z0_done: 1) -> (done: 1, x0_addr0: 1, x0_write_data: 32, x0_write_en: 1, x0_clk: 1, y0_addr0: 1, y0_write_data: 32, y0_write_en: 1, y0_clk: 1, z0_addr0: 1, z0_write_data: 32, z0_write_en: 1, z0_clk: 1) {
  cells {
    add0 = prim std_add(1);
    const0 = prim std_const(1, 0);
    const1 = prim std_const(1, 0);
    const2 = prim std_const(1, 1);
    i0 = prim std_reg(1);
    le0 = prim std_le(1);
    sub0 = prim std_ssub(32);
    x_read0_0 = prim std_reg(32);
    y_read0_0 = prim std_reg(32);
  }
  wires {
    group cond0<"static"=0> {
      cond0[done] = 1'd1;
      le0.left = i0.out;
      le0.right = const1.out;
    }
    group let0<"static"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group upd0<"static"=1> {
      x_read0_0.write_en = 1'd1;
      x0_addr0 = i0.out;
      x_read0_0.in = 1'd1 ? x0_read_data;
      upd0[done] = x_read0_0.done ? 1'd1;
    }
    group upd1<"static"=1> {
      y_read0_0.write_en = 1'd1;
      y0_addr0 = i0.out;
      y_read0_0.in = 1'd1 ? y0_read_data;
      upd1[done] = y_read0_0.done ? 1'd1;
    }
    group upd2<"static"=1> {
      z0_addr0 = i0.out;
      z0_write_en = 1'd1;
      sub0.left = x_read0_0.out;
      sub0.right = y_read0_0.out;
      z0_write_data = 1'd1 ? sub0.out;
      upd2[done] = z0_done ? 1'd1;
    }
    group upd3<"static"=1> {
      i0.write_en = 1'd1;
      add0.left = i0.out;
      add0.right = const2.out;
      i0.in = 1'd1 ? add0.out;
      upd3[done] = i0.done ? 1'd1;
    }
  }

  control {
    seq {
      let0;
      while le0.out with cond0 {
        seq {
          par {
            upd0;
            upd1;
          }
          upd2;
          upd3;
        }
      }
    }
  }
}


component main () -> () {
  cells {
    z = prim std_mem_d1(32, 1, 1);
    x = prim std_mem_d1(32, 1, 1);
    y = prim std_mem_d1(32, 1, 1);
    comp_subtract0 = subtract0;
  }
  wires {
    group run_subtract0 {
      x.addr0 = comp_subtract0.x0_addr0;
      comp_subtract0.x0_read_data = x.read_data;
      y.addr0 = comp_subtract0.y0_addr0;
      comp_subtract0.y0_read_data = y.read_data;
      z.addr0 = comp_subtract0.z0_addr0;
      z.write_data = comp_subtract0.z0_write_data;
      z.write_en = comp_subtract0.z0_write_en;
      comp_subtract0.z0_done = z.done;
      comp_subtract0.go = 1'd1;
      run_subtract0[done] = comp_subtract0.done ? 1'd1;
    }
  }
  control {
    seq {
      run_subtract0;
    }
  }
}
