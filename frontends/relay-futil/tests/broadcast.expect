import "primitives/std.lib";

component add0(go: 1, clk: 1, x10_0_read_data: 32, x10_0_done: 1, x20_0_0_read_data: 32, x20_0_0_done: 1, x30_0_0_read_data: 32, x30_0_0_done: 1) -> (done: 1, x10_0_addr0: 2, x10_0_addr1: 2, x10_0_write_data: 32, x10_0_write_en: 1, x10_0_clk: 1, x20_0_0_addr0: 2, x20_0_0_addr1: 1, x20_0_0_addr2: 1, x20_0_0_write_data: 32, x20_0_0_write_en: 1, x20_0_0_clk: 1, x30_0_0_addr0: 2, x30_0_0_addr1: 2, x30_0_0_addr2: 2, x30_0_0_write_data: 32, x30_0_0_write_en: 1, x30_0_0_clk: 1) {
  cells {
    add0 = prim std_add(32);
    add1 = prim std_add(2);
    add2 = prim std_add(2);
    add3 = prim std_add(2);
    const0 = prim std_const(2, 0);
    const1 = prim std_const(2, 1);
    const10 = prim std_const(2, 1);
    const2 = prim std_const(2, 0);
    const3 = prim std_const(2, 1);
    const4 = prim std_const(2, 0);
    const5 = prim std_const(2, 1);
    const6 = prim std_const(1, 0);
    const7 = prim std_const(1, 0);
    const8 = prim std_const(2, 1);
    const9 = prim std_const(2, 1);
    i0 = prim std_reg(2);
    j0 = prim std_reg(2);
    k0 = prim std_reg(2);
    le0 = prim std_le(2);
    le1 = prim std_le(2);
    le2 = prim std_le(2);
    x1_read0_0 = prim std_reg(32);
    x2_read0_0 = prim std_reg(32);
  }
  wires {
    group cond0<"static"=0> {
      cond0[done] = 1'd1;
      le0.left = i0.out;
      le0.right = const1.out;
    }
    group cond1<"static"=0> {
      cond1[done] = 1'd1;
      le1.left = j0.out;
      le1.right = const3.out;
    }
    group cond2<"static"=0> {
      cond2[done] = 1'd1;
      le2.left = k0.out;
      le2.right = const5.out;
    }
    group let0<"static"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"static"=1> {
      j0.in = const2.out;
      j0.write_en = 1'd1;
      let1[done] = j0.done;
    }
    group let2<"static"=1> {
      k0.in = const4.out;
      k0.write_en = 1'd1;
      let2[done] = k0.done;
    }
    group upd0<"static"=1> {
      x1_read0_0.write_en = 1'd1;
      x10_0_addr1 = k0.out;
      x10_0_addr0 = j0.out;
      x1_read0_0.in = 1'd1 ? x10_0_read_data;
      upd0[done] = x1_read0_0.done ? 1'd1;
    }
    group upd1<"static"=1> {
      x2_read0_0.write_en = 1'd1;
      x20_0_0_addr2 = const7.out;
      x20_0_0_addr1 = const6.out;
      x20_0_0_addr0 = i0.out;
      x2_read0_0.in = 1'd1 ? x20_0_0_read_data;
      upd1[done] = x2_read0_0.done ? 1'd1;
    }
    group upd2<"static"=1> {
      x30_0_0_addr2 = k0.out;
      x30_0_0_addr1 = j0.out;
      x30_0_0_addr0 = i0.out;
      x30_0_0_write_en = 1'd1;
      add0.left = x1_read0_0.out;
      add0.right = x2_read0_0.out;
      x30_0_0_write_data = 1'd1 ? add0.out;
      upd2[done] = x30_0_0_done ? 1'd1;
    }
    group upd3<"static"=1> {
      k0.write_en = 1'd1;
      add1.left = k0.out;
      add1.right = const8.out;
      k0.in = 1'd1 ? add1.out;
      upd3[done] = k0.done ? 1'd1;
    }
    group upd4<"static"=1> {
      j0.write_en = 1'd1;
      add2.left = j0.out;
      add2.right = const9.out;
      j0.in = 1'd1 ? add2.out;
      upd4[done] = j0.done ? 1'd1;
    }
    group upd5<"static"=1> {
      i0.write_en = 1'd1;
      add3.left = i0.out;
      add3.right = const10.out;
      i0.in = 1'd1 ? add3.out;
      upd5[done] = i0.done ? 1'd1;
    }
  }

  control {
    seq {
      let0;
      while le0.out with cond0 {
        seq {
          let1;
          while le1.out with cond1 {
            seq {
              let2;
              while le2.out with cond2 {
                seq {
                  par {
                    upd0;
                    upd1;
                  }
                  upd2;
                  upd3;
                }
              }
              upd4;
            }
          }
          upd5;
        }
      }
    }
  }
}

component main () -> () {
  cells {
    x3 = prim std_mem_d3(32, 2, 2, 2, 2, 2, 2);
    x1 = prim std_mem_d2(32, 2, 2, 2, 2);
    x2 = prim std_mem_d3(32, 2, 1, 1, 2, 1, 1);
    comp_add0 = add0;
  }
  wires {
    group run_add0 {
      x1.addr0 = comp_add0.x10_0_addr0;
      comp_add0.x10_0_read_data = x1.read_data;
      x1.addr1 = comp_add0.x10_0_addr1;
      x2.addr0 = comp_add0.x20_0_0_addr0;
      comp_add0.x20_0_0_read_data = x2.read_data;
      x2.addr1 = comp_add0.x20_0_0_addr1;
      x2.addr2 = comp_add0.x20_0_0_addr2;
      x3.addr0 = comp_add0.x30_0_0_addr0;
      x3.addr1 = comp_add0.x30_0_0_addr1;
      x3.addr2 = comp_add0.x30_0_0_addr2;
      x3.write_data = comp_add0.x30_0_0_write_data;
      x3.write_en = comp_add0.x30_0_0_write_en;
      comp_add0.x30_0_0_done = x3.done;
      comp_add0.go = 1'd1;
      run_add0[done] = comp_add0.done ? 1'd1;
    }
  }
  control {
    seq {
      run_add0;
    }
  }
}
