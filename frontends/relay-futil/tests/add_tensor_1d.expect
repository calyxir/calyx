import "primitives/std.lib";
component main() -> () {
  cells {
    x = prim std_mem_d1(32, 4, 2);
    y = prim std_mem_d1(32, 4, 2);
    add0 = prim std_add(32);
    add1 = prim std_add(2);
    le0 = prim std_le(2);
    const0 = prim std_const(2, 0);
    const1 = prim std_const(2, 3);
    incr0 = prim std_const(2, 1);
    index0 = prim std_reg(2);
    tensor1D_0 = prim std_mem_d1(32, 4, 2);
  }
  wires {

    group cond0 {
      le0.left = index0.out;
      le0.right = const1.out;
      cond0[done] = 1'd1;
    }
    group let0 {
      index0.in = const0.out;
      index0.write_en = 1'd1;
      let0[done] = index0.done;
    }
    group body0 {
      tensor1D_0.addr0 = index0.out;
      tensor1D_0.write_en = 1'd1;
      x.addr0 = index0.out;
      y.addr0 = index0.out;
      add0.left = 1'd1 ? x.read_data;
      add0.right = 1'd1 ? y.read_data;
      tensor1D_0.write_data = add0.out;
      body0[done] = tensor1D_0.done ? 1'd1;
    }
    group update1 {
      index0.write_en = 1'd1;
      add1.left = index0.out;
      add1.right = incr0.out;
      index0.in = 1'd1 ? add1.out;
      update1[done] = index0.done ? 1'd1;
    }
  }
  control {
    seq {
      let0;
      while le0.out with cond0 {
        seq {
          body0;
          update1;
        }
      }
    }
  }
}
