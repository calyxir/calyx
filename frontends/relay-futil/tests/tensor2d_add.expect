import "primitives/std.lib";

component add(go: 1, clk: 1, x0_0_read_data: 32, x0_0_done: 1, x10_0_read_data: 32, x10_0_done: 1, y0_0_read_data: 32, y0_0_done: 1) -> (done: 1, x0_0_addr0: 2, x0_0_addr1: 3, x0_0_write_data: 32, x0_0_write_en: 1, x0_0_clk: 1, x10_0_addr0: 2, x10_0_addr1: 3, x10_0_write_data: 32, x10_0_write_en: 1, x10_0_clk: 1, y0_0_addr0: 2, y0_0_addr1: 3, y0_0_write_data: 32, y0_0_write_en: 1, y0_0_clk: 1) {
  cells {
    add0 = prim std_add(32);
    add1 = prim std_add(3);
    add2 = prim std_add(2);
    const0 = prim std_const(2, 0);
    const1 = prim std_const(2, 1);
    const2 = prim std_const(3, 0);
    const3 = prim std_const(3, 3);
    const4 = prim std_const(3, 1);
    const5 = prim std_const(2, 1);
    i0 = prim std_reg(2);
    j0 = prim std_reg(3);
    le0 = prim std_le(2);
    le1 = prim std_le(3);
    x_read0_0 = prim std_reg(32);
    y_read0_0 = prim std_reg(32);
  }
  wires {
    group cond0<"static"=0> {
      cond0[done] = 1'd1;
      le0.left = i0.out;
      le0.right = const1.out;
    }
    group cond1<"static"=0> {
      cond1[done] = 1'd1;
      le1.left = j0.out;
      le1.right = const3.out;
    }
    group let0<"static"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"static"=1> {
      j0.in = const2.out;
      j0.write_en = 1'd1;
      let1[done] = j0.done;
    }
    group upd0<"static"=1> {
      x_read0_0.write_en = 1'd1;
      x0_0_addr1 = j0.out;
      x0_0_addr0 = i0.out;
      x_read0_0.in = 1'd1 ? x0_0_read_data;
      upd0[done] = x_read0_0.done ? 1'd1;
    }
    group upd1<"static"=1> {
      y_read0_0.write_en = 1'd1;
      y0_0_addr1 = j0.out;
      y0_0_addr0 = i0.out;
      y_read0_0.in = 1'd1 ? y0_0_read_data;
      upd1[done] = y_read0_0.done ? 1'd1;
    }
    group upd2<"static"=1> {
      x10_0_addr1 = j0.out;
      x10_0_addr0 = i0.out;
      x10_0_write_en = 1'd1;
      add0.left = x_read0_0.out;
      add0.right = y_read0_0.out;
      x10_0_write_data = 1'd1 ? add0.out;
      upd2[done] = x10_0_done ? 1'd1;
    }
    group upd3<"static"=1> {
      j0.write_en = 1'd1;
      add1.left = j0.out;
      add1.right = const4.out;
      j0.in = 1'd1 ? add1.out;
      upd3[done] = j0.done ? 1'd1;
    }
    group upd4<"static"=1> {
      i0.write_en = 1'd1;
      add2.left = i0.out;
      add2.right = const5.out;
      i0.in = 1'd1 ? add2.out;
      upd4[done] = i0.done ? 1'd1;
    }
  }

  control {
    seq {
      let0;
      while le0.out with cond0 {
        seq {
          let1;
          while le1.out with cond1 {
            seq {
              par {
                upd0;
                upd1;
              }
              upd2;
              upd3;
            }
          }
          upd4;
        }
      }
    }
  }
}

component main () -> () {
  cells {
    x1 = prim std_mem_d2(32, 2, 4, 2, 3);
    x = prim std_mem_d2(32, 2, 4, 2, 3);
    y = prim std_mem_d2(32, 2, 4, 2, 3);
    add0 = add;
  }
  wires {
    group run_add {
      x.addr0 = add0.x0_0_addr0;
      add0.x0_0_read_data = x.read_data;
      x.addr1 = add0.x0_0_addr1;
      y.addr0 = add0.y0_0_addr0;
      add0.y0_0_read_data = y.read_data;
      y.addr1 = add0.y0_0_addr1;
      x1.addr0 = add0.x10_0_addr0;
      x1.addr1 = add0.x10_0_addr1;
      x1.write_data = add0.x10_0_write_data;
      x1.write_en = add0.x10_0_write_en;
      add0.x10_0_done = x1.done;
      add0.go = 1'd1;
      run_add[done] = add0.done ? 1'd1;
    }
  }
  control {
    seq {
      run_add;
    }
  }
}
