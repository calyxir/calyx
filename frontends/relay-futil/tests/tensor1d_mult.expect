import "primitives/std.lib";

component tensor1d_multiply(go: 1, clk: 1, x0_read_data: 32, x0_done: 1, x10_read_data: 32, x10_done: 1, y0_read_data: 32, y0_done: 1) -> (done: 1, x0_addr0: 3, x0_write_data: 32, x0_write_en: 1, x0_clk: 1, x10_addr0: 3, x10_write_data: 32, x10_write_en: 1, x10_clk: 1, y0_addr0: 3, y0_write_data: 32, y0_write_en: 1, y0_clk: 1) {
  cells {
    add0 = prim std_add(3);
    bin_read0_0 = prim std_reg(32);
    const0 = prim std_const(3, 0);
    const1 = prim std_const(3, 3);
    const2 = prim std_const(3, 1);
    i0 = prim std_reg(3);
    le0 = prim std_le(3);
    mult_pipe0 = prim std_mult_pipe(32);
    x_read0_0 = prim std_reg(32);
    y_read0_0 = prim std_reg(32);
  }
  wires {
    group cond0<"static"=0> {
      cond0[done] = 1'd1;
      le0.left = i0.out;
      le0.right = const1.out;
    }
    group let0<"static"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"static"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let1[done] = bin_read0_0.done;
      mult_pipe0.left = x_read0_0.out;
      mult_pipe0.right = y_read0_0.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group upd0<"static"=1> {
      x_read0_0.write_en = 1'd1;
      x0_addr0 = i0.out;
      x_read0_0.in = 1'd1 ? x0_read_data;
      upd0[done] = x_read0_0.done ? 1'd1;
    }
    group upd1<"static"=1> {
      y_read0_0.write_en = 1'd1;
      y0_addr0 = i0.out;
      y_read0_0.in = 1'd1 ? y0_read_data;
      upd1[done] = y_read0_0.done ? 1'd1;
    }
    group upd2<"static"=1> {
      x10_addr0 = i0.out;
      x10_write_en = 1'd1;
      x10_write_data = 1'd1 ? bin_read0_0.out;
      upd2[done] = x10_done ? 1'd1;
    }
    group upd3<"static"=1> {
      i0.write_en = 1'd1;
      add0.left = i0.out;
      add0.right = const2.out;
      i0.in = 1'd1 ? add0.out;
      upd3[done] = i0.done ? 1'd1;
    }
  }

  control {
    seq {
      let0;
      while le0.out with cond0 {
        seq {
          par {
            upd0;
            upd1;
          }
          let1;
          upd2;
          upd3;
        }
      }
    }
  }
}

component main () -> () {
  cells {
    x1 = prim std_mem_d1(32, 4, 3);
    x = prim std_mem_d1(32, 4, 3);
    y = prim std_mem_d1(32, 4, 3);
    tensor1d_multiply0 = tensor1d_multiply;
  }
  wires {
    group run_tensor1d_multiply {
      x.addr0 = tensor1d_multiply0.x0_addr0;
      tensor1d_multiply0.x0_read_data = x.read_data;
      y.addr0 = tensor1d_multiply0.y0_addr0;
      tensor1d_multiply0.y0_read_data = y.read_data;
      x1.addr0 = tensor1d_multiply0.x10_addr0;
      x1.write_data = tensor1d_multiply0.x10_write_data;
      x1.write_en = tensor1d_multiply0.x10_write_en;
      tensor1d_multiply0.x10_done = x1.done;
      tensor1d_multiply0.go = 1'd1;
      run_tensor1d_multiply[done] = tensor1d_multiply0.done ? 1'd1;
    }
  }
  control {
    seq {
      run_tensor1d_multiply;
    }
  }
}
