import "primitives/std.lib";

component add (x_out: 32, y_out: 32, in_done: 1) -> (in_write_data: 32, in_write_en: 1, in_addr0: 1) {
  cells {
    add = prim std_add(32);
    c0 = prim std_const(1, 0);
  }
  wires {
    group process_add {
      in_addr0 = c0.out;
      add.left = x_out;
      add.right = y_out;
      in_write_en = 1'd1;
      in_write_data = add.out;
      process_add[done] = in_done ? 1'd1;
    }
  }
  control {
    seq {
      process_add;
    }
  }
}
component function0 (x_out: 32, y_out: 32, in_done: 1) -> (in_write_data: 32, in_write_en: 1, in_addr0: 1) {
  cells {
    add_fn = add;
    z = prim std_mem_d1(32, 1, 1);
    c0 = prim std_const(1, 0);
  }
  wires {
    group run_add_fn {
      add_fn.x_out = x_out;
      add_fn.y_out = y_out;
      z.write_data = add_fn.in_write_data;
      z.write_en = add_fn.in_write_en;
      z.addr0 = add_fn.in_addr0;
      add_fn.in_done = z.done;
      add_fn.go = 1'd1;
      run_add_fn[done] = add_fn.done ? 1'd1;
    }
    group save_return_value {
      z.addr0 = c0.out;
      in_addr0 = c0.out;
      in_write_en = 1'd1;
      in_write_data = z.read_data;
      save_return_value[done] = in_done ? 1'd1;
    }
  }
  control {
    seq {
      run_add_fn;
      save_return_value;
    }
  }
}

component main () -> () {
  cells {
    fn0 = function0;
    c0 = prim std_const(1, 0);
    main_ret = prim std_mem_d1(32, 1, 1);
    x = prim std_mem_d1(32, 1, 1);
    y = prim std_mem_d1(32, 1, 1);
  }
  wires {
    group run_fn0 {
      fn0.x_out = x.read_data;
      x.addr0 = fn0.in_addr0;
      fn0.y_out = y.read_data;
      y.addr0 = fn0.in_addr0;
      main_ret.addr0 = fn0.in_addr0;
      main_ret.write_data = fn0.in_write_data;
      main_ret.write_en = fn0.in_write_en;
      fn0.in_done = main_ret.done;
      fn0.go = 1'd1;
      run_fn0[done] = fn0.done ? 1'd1;
    }
  }
  control {
    seq {
      run_fn0;
    }
  }
}
