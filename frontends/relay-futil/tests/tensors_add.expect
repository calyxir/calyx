import "primitives/std.lib";
component main() -> () {
  cells {
    x = prim std_mem_d1(32, 4, 2);
    y = prim std_mem_d1(32, 4, 2);
    constant0 = prim std_const(32, 0);
    constant1 = prim std_const(32, 1);
    ret  = prim std_mem_d1(32, 4, 2);
    add4 = prim std_add(32);
    const5 = prim std_const(32, 4);
    i6 = prim std_reg(32);
    le8 = prim std_le(32);
    const1 = prim std_const(32, 1);
    const2 = prim std_const(32, 1);
    add3 = prim std_add(32);
    v = prim std_reg(32);
  }
  wires {
    group group13 {
      ret.in = ret;
      ret.write_en = group13[go];
      group13[done] = ret.done;
    }
    group cond9 {
      cond9[done] = 1'd1;
      le8.left = i6.out;
      le8.left = const5.out;
    }
    group initalize10 {
      i6.in = constant0.out;
      i6.write_en = 1'd1;
      initalize10[done] = i6.done;
    }
    group body11 {
      ret.addr0 = i6.out;
      ret.write_en = 1'd1;
      add4.left = x.read_data;
      add4.right = y.read_data;
      x.addr0 = i6.out;
      y.addr0 = i6.out;
      ret.write_data = 1'd1 ? add4.out;
      body11[done] = ret.done ? 1'd1;
    }
    group update12 {
      i6.write_en = 1'd1;
      add7.left = i6.out;
      add7.right = constant1.out;
      i6.in = 1'd1 ? add7.out;
      update12[done] = i6.done ? 1'd1;
    }
    group group0 {
      v.in = add3.out;
      v.write_en = 1'd1;
      group0[done] = v.done;
      add3.left = const1.out;
      add3.right = const2.out;
    }
  }
  control {
    seq {
      while le0.out with cond0 {
        initalize10;
        seq {
          body11;
          update12;
        }
      }
      group0;
      group13;
    }
  }
}
