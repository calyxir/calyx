import "primitives/std.lib";
component main() -> () {
  cells {
    x = prim std_mem_d1(32, 4, 2);
    y = prim std_mem_d1(32, 4, 2);
    constant0 = prim std_const(32, 0);
    constant1 = prim std_const(32, 1);
    ret  = prim std_mem_d1(32, 4, 2);
    add0 = prim std_add(32);
    const1 = prim std_const(32, 4);
    i2 = prim std_reg(32);
    le4 = prim std_le(32);
  }
  wires {
    group group9 {
      ret.in = ret;
      ret.write_en = 1'd1;
      group9[done] = ret.done;
    }
    group cond5 {
      cond5[done] = 1'd1;
      le4.left = i2.out;
      le4.left = const1.out;
    }
    group initalize6 {
      i2.in = constant0.out;
      i2.write_en = 1'd1;
      initalize6[done] = i2.done;
    }
    group body7 {
      ret.addr0 = i2.out;
      ret.write_en = 1'd1;
      add0.left = x.read_data;
      add0.right = y.read_data;
      x.addr0 = i2.out;
      y.addr0 = i2.out;
      ret.write_data = 1'd1 ? add0.out;
      body7[done] = ret.done ? 1'd1;
    }
    group update8 {
      i2.write_en = 1'd1;
      add3.left = i2.out;
      add3.right = constant1.out;
      i2.in = 1'd1 ? add3.out;
      update8[done] = i2.done ? 1'd1;
    }
  }
  control {
    seq {
      while le0.out with cond0 {
        initalize6;
        seq {
          body7;
          update8;
        }
      }
      group9;
    }
  }
}
