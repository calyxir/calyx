
import "primitives/std.lib";
component main() -> () {
  cells {
    foo = prim std_mem_d1(32, 4, 32);
 baz = prim std_mem_d1(32, 4, 32);
 le0 = prim std_lt(32);
 idx0 = prim std_reg(32);
 adder_idx0 = prim std_add(32);
 adder_op0 = prim std_add(32);
  }

  wires {
    
group cond0 {
  le0.left = idx0.out;
  le0.right = 32'd4;

  cond0.done = 1'b1;
}
    
 
group incr_idx0 {
  adder_idx0.left = idx0.out;
  adder_idx0.right = 32'b1;

  idx0.write_en = 1'b1;
  idx0.in = adder_idx0.out;

  incr_idx0[done] = idx0.done;
}
    
 
group eval_body0 {
  baz.write_en = 1'b1;

  foo.addr0 = idx0.out;
baz.addr0 = idx0.out;

  adder_op0.left = foo.read_data;
  adder_op0.right = 32'd5;

  baz.write_data = adder_op0.out;

  eval_body0[done] = baz.done;
}
    
  }

  control {
    seq {
      
    while le0.out with cond0 {
      seq { eval_body0; incr_idx0; }
    }
    
    }
  }
}

