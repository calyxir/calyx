
import "primitives/std.lib";
component main() -> () {
  cells {
    foo0 = prim std_mem_d1(32, 2, 32);
    foo1 = prim std_mem_d1(32, 2, 32);
 baz0 = prim std_mem_d1(32, 2, 32);
 baz1 = prim std_mem_d1(32, 2, 32);
 le0 = prim std_lt(32);
 le1 = prim std_lt(32);
 idx0 = prim std_reg(32);
 idx1 = prim std_reg(32);
 adder_idx0 = prim std_add(32);
 adder_idx1 = prim std_add(32);
 adder_op0 = prim std_add(32);
 adder_op1 = prim std_add(32);
  }

  wires {
    
group cond0 {
  le0.left = idx0.out;
  le0.right = 32'd2;

  cond0.done = 1'b1;
}
     
group cond1 {
  le1.left = idx1.out;
  le1.right = 32'd2;

  cond1.done = 1'b1;
}
    
 
group incr_idx0 {
  adder_idx0.left = idx0.out;
  adder_idx0.right = 32'b1;

  idx0.write_en = 1'b1;
  idx0.in = adder_idx0.out;

  incr_idx0[done] = idx0.done;
} 

group incr_idx1 {
  adder_idx1.left = idx1.out;
  adder_idx1.right = 32'b1;

  idx1.write_en = 1'b1;
  idx1.in = adder_idx1.out;

  incr_idx1[done] = idx1.done;
}
 
    
 
group eval_body0 {
  baz0.write_en = 1'b1;
  baz0.addr0 = idx0.out;

  foo0.addr0 = idx0.out;

  adder_op0.left = foo0.read_data;
  adder_op0.right = 32'd5;

  baz0.write_data = adder_op0.out;

  eval_body0[done] = baz0.done;
}
  
group eval_body1 {
  baz1.write_en = 1'b1;
  baz1.addr0 = idx1.out;

  foo1.addr0 = idx1.out;

  adder_op1.left = foo1.read_data;
  adder_op1.right = 32'd5;

  baz1.write_data = adder_op1.out;

  eval_body1[done] = baz1.done;
}
   
  }

  control {
    par {
      while le0.out with cond0 {
        seq { eval_body0; incr_idx0; }
      };

      while le1.out with cond1 {
        seq { eval_body1; incr_idx1; }
      }
    }
  }
}

