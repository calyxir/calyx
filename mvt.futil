// git.status = clean, build.date = Mon Jul 24 11:37:33 EDT 2023, git.hash = 806c53c
import "primitives/core.futil";
import "primitives/memories.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    A0_0 = seq_mem_d2(32,8,8,4,4);
    @external(1) A_int = seq_mem_d2(32,8,8,4,4);
    A_int_read0_0 = std_reg(32);
    A_read0_0 = std_reg(32);
    A_read1_0 = std_reg(32);
    add0 = std_add(4);
    add1 = std_add(4);
    add2 = std_add(4);
    add3 = std_add(32);
    add4 = std_add(4);
    add5 = std_add(4);
    add6 = std_add(32);
    add7 = std_add(4);
    add8 = std_add(4);
    add9 = std_add(4);
    bin_read0_0 = std_reg(32);
    bin_read1_0 = std_reg(32);
    const0 = std_const(4,0);
    const1 = std_const(4,7);
    const10 = std_const(4,7);
    const11 = std_const(4,0);
    const12 = std_const(4,7);
    const13 = std_const(4,1);
    const14 = std_const(4,1);
    const15 = std_const(4,0);
    const16 = std_const(4,7);
    const17 = std_const(4,0);
    const18 = std_const(4,7);
    const19 = std_const(4,1);
    const2 = std_const(4,1);
    const20 = std_const(4,1);
    const21 = std_const(4,0);
    const22 = std_const(4,7);
    const23 = std_const(4,1);
    const3 = std_const(4,0);
    const4 = std_const(4,7);
    const5 = std_const(4,0);
    const6 = std_const(4,7);
    const7 = std_const(4,1);
    const8 = std_const(4,1);
    const9 = std_const(4,0);
    i0 = std_reg(4);
    i1 = std_reg(4);
    i2 = std_reg(4);
    i3 = std_reg(4);
    i4 = std_reg(4);
    j0 = std_reg(4);
    j1 = std_reg(4);
    j2 = std_reg(4);
    le0 = std_le(4);
    le1 = std_le(4);
    le2 = std_le(4);
    le3 = std_le(4);
    le4 = std_le(4);
    le5 = std_le(4);
    le6 = std_le(4);
    le7 = std_le(4);
    mult_pipe0 = std_mult_pipe(32);
    mult_pipe1 = std_mult_pipe(32);
    red_read00 = std_reg(32);
    red_read10 = std_reg(32);
    tmp2_0 = std_reg(32);
    tmp_0 = std_reg(32);
    x10 = seq_mem_d1(32,8,4);
    @external(1) x1_int = seq_mem_d1(32,8,4);
    x1_int_read0_0 = std_reg(32);
    x1_sh_read0_0 = std_reg(32);
    x20 = seq_mem_d1(32,8,4);
    @external(1) x2_int = seq_mem_d1(32,8,4);
    x2_int_read0_0 = std_reg(32);
    x2_sh_read0_0 = std_reg(32);
    y10 = seq_mem_d1(32,8,4);
    @external(1) y1_int = seq_mem_d1(32,8,4);
    y1_int_read0_0 = std_reg(32);
    y1_read0_0 = std_reg(32);
    y20 = seq_mem_d1(32,8,4);
    @external(1) y2_int = seq_mem_d1(32,8,4);
    y2_int_read0_0 = std_reg(32);
    y2_read0_0 = std_reg(32);
  }
  wires {
    comb group cond0 {
      le0.left = i0.out;
      le0.right = const1.out;
    }
    comb group cond1 {
      le1.left = i1.out;
      le1.right = const4.out;
    }
    comb group cond2 {
      le2.left = j0.out;
      le2.right = const6.out;
    }
    comb group cond3 {
      le3.left = i2.out;
      le3.right = const10.out;
    }
    comb group cond4 {
      le4.left = j1.out;
      le4.right = const12.out;
    }
    comb group cond5 {
      le5.left = i3.out;
      le5.right = const16.out;
    }
    comb group cond6 {
      le6.left = j2.out;
      le6.right = const18.out;
    }
    comb group cond7 {
      le7.left = i4.out;
      le7.right = const22.out;
    }
    group let0<"static"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"static"=2> {
      y1_int_read0_0.in = y1_int.read_data;
      y1_int_read0_0.write_en = y1_int.read_done;
      let1[done] = y1_int_read0_0.done;
      y1_int.addr0 = i0.out;
      y1_int.read_en = 1'd1;
    }
    group let10<"static"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let10[done] = bin_read0_0.done;
      mult_pipe0.left = A_read0_0.out;
      mult_pipe0.right = y1_read0_0.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group let11<"static"=1> {
      tmp_0.in = bin_read0_0.out;
      tmp_0.write_en = 1'd1;
      let11[done] = tmp_0.done;
    }
    group let12<"static"=2> {
      red_read00.in = x10.read_data;
      red_read00.write_en = x10.read_done;
      let12[done] = red_read00.done;
      x10.addr0 = i2.out;
      x10.read_en = 1'd1;
    }
    group let13<"static"=1> {
      i3.in = const15.out;
      i3.write_en = 1'd1;
      let13[done] = i3.done;
    }
    group let14<"static"=1> {
      j2.in = const17.out;
      j2.write_en = 1'd1;
      let14[done] = j2.done;
    }
    group let15<"static"=4> {
      bin_read1_0.in = mult_pipe1.out;
      bin_read1_0.write_en = mult_pipe1.done;
      let15[done] = bin_read1_0.done;
      mult_pipe1.left = A_read1_0.out;
      mult_pipe1.right = y2_read0_0.out;
      mult_pipe1.go = !mult_pipe1.done ? 1'd1;
    }
    group let16<"static"=1> {
      tmp2_0.in = bin_read1_0.out;
      tmp2_0.write_en = 1'd1;
      let16[done] = tmp2_0.done;
    }
    group let17<"static"=2> {
      red_read10.in = x20.read_data;
      red_read10.write_en = x20.read_done;
      let17[done] = red_read10.done;
      x20.addr0 = i3.out;
      x20.read_en = 1'd1;
    }
    group let18<"static"=1> {
      i4.in = const21.out;
      i4.write_en = 1'd1;
      let18[done] = i4.done;
    }
    group let2<"static"=2> {
      y2_int_read0_0.in = y2_int.read_data;
      y2_int_read0_0.write_en = y2_int.read_done;
      let2[done] = y2_int_read0_0.done;
      y2_int.addr0 = i0.out;
      y2_int.read_en = 1'd1;
    }
    group let3<"static"=2> {
      x1_int_read0_0.in = x1_int.read_data;
      x1_int_read0_0.write_en = x1_int.read_done;
      let3[done] = x1_int_read0_0.done;
      x1_int.addr0 = i0.out;
      x1_int.read_en = 1'd1;
    }
    group let4<"static"=2> {
      x2_int_read0_0.in = x2_int.read_data;
      x2_int_read0_0.write_en = x2_int.read_done;
      let4[done] = x2_int_read0_0.done;
      x2_int.addr0 = i0.out;
      x2_int.read_en = 1'd1;
    }
    group let5<"static"=1> {
      i1.in = const3.out;
      i1.write_en = 1'd1;
      let5[done] = i1.done;
    }
    group let6<"static"=1> {
      j0.in = const5.out;
      j0.write_en = 1'd1;
      let6[done] = j0.done;
    }
    group let7<"static"=2> {
      A_int_read0_0.in = A_int.read_data;
      A_int_read0_0.write_en = A_int.read_done;
      let7[done] = A_int_read0_0.done;
      A_int.addr1 = j0.out;
      A_int.addr0 = i1.out;
      A_int.read_en = 1'd1;
    }
    group let8<"static"=1> {
      i2.in = const9.out;
      i2.write_en = 1'd1;
      let8[done] = i2.done;
    }
    group let9<"static"=1> {
      j1.in = const11.out;
      j1.write_en = 1'd1;
      let9[done] = j1.done;
    }
    group upd0<"static"=1> {
      y10.addr0 = i0.out;
      y10.write_en = 1'd1;
      y10.write_data = y1_int_read0_0.out;
      upd0[done] = y10.write_done;
    }
    group upd1<"static"=1> {
      y20.addr0 = i0.out;
      y20.write_en = 1'd1;
      y20.write_data = y2_int_read0_0.out;
      upd1[done] = y20.write_done;
    }
    group upd10<"static"=1> {
      x10.addr0 = i2.out;
      x10.write_en = 1'd1;
      add3.left = red_read00.out;
      add3.right = tmp_0.out;
      x10.write_data = add3.out;
      upd10[done] = x10.write_done;
    }
    group upd11<"static"=1> {
      j1.write_en = 1'd1;
      add4.left = j1.out;
      add4.right = const13.out;
      j1.in = add4.out;
      upd11[done] = j1.done;
    }
    group upd12<"static"=1> {
      i2.write_en = 1'd1;
      add5.left = i2.out;
      add5.right = const14.out;
      i2.in = add5.out;
      upd12[done] = i2.done;
    }
    group upd13<"static"=2> {
      A_read1_0.write_en = A0_0.read_done;
      A0_0.addr1 = i3.out;
      A0_0.addr0 = j2.out;
      A0_0.read_en = 1'd1;
      A_read1_0.in = A0_0.read_data;
      upd13[done] = A_read1_0.done;
    }
    group upd14<"static"=2> {
      y2_read0_0.write_en = y20.read_done;
      y20.addr0 = j2.out;
      y20.read_en = 1'd1;
      y2_read0_0.in = y20.read_data;
      upd14[done] = y2_read0_0.done;
    }
    group upd15<"static"=1> {
      x20.addr0 = i3.out;
      x20.write_en = 1'd1;
      add6.left = red_read10.out;
      add6.right = tmp2_0.out;
      x20.write_data = add6.out;
      upd15[done] = x20.write_done;
    }
    group upd16<"static"=1> {
      j2.write_en = 1'd1;
      add7.left = j2.out;
      add7.right = const19.out;
      j2.in = add7.out;
      upd16[done] = j2.done;
    }
    group upd17<"static"=1> {
      i3.write_en = 1'd1;
      add8.left = i3.out;
      add8.right = const20.out;
      i3.in = add8.out;
      upd17[done] = i3.done;
    }
    group upd18<"static"=2> {
      x1_sh_read0_0.write_en = x10.read_done;
      x10.addr0 = i4.out;
      x10.read_en = 1'd1;
      x1_sh_read0_0.in = x10.read_data;
      upd18[done] = x1_sh_read0_0.done;
    }
    group upd19<"static"=1> {
      x1_int.addr0 = i4.out;
      x1_int.write_en = 1'd1;
      x1_int.write_data = x1_sh_read0_0.out;
      upd19[done] = x1_int.write_done;
    }
    group upd2<"static"=1> {
      x10.addr0 = i0.out;
      x10.write_en = 1'd1;
      x10.write_data = x1_int_read0_0.out;
      upd2[done] = x10.write_done;
    }
    group upd20<"static"=2> {
      x2_sh_read0_0.write_en = x20.read_done;
      x20.addr0 = i4.out;
      x20.read_en = 1'd1;
      x2_sh_read0_0.in = x20.read_data;
      upd20[done] = x2_sh_read0_0.done;
    }
    group upd21<"static"=1> {
      x2_int.addr0 = i4.out;
      x2_int.write_en = 1'd1;
      x2_int.write_data = x2_sh_read0_0.out;
      upd21[done] = x2_int.write_done;
    }
    group upd22<"static"=1> {
      i4.write_en = 1'd1;
      add9.left = i4.out;
      add9.right = const23.out;
      i4.in = add9.out;
      upd22[done] = i4.done;
    }
    group upd3<"static"=1> {
      x20.addr0 = i0.out;
      x20.write_en = 1'd1;
      x20.write_data = x2_int_read0_0.out;
      upd3[done] = x20.write_done;
    }
    group upd4<"static"=1> {
      i0.write_en = 1'd1;
      add0.left = i0.out;
      add0.right = const2.out;
      i0.in = add0.out;
      upd4[done] = i0.done;
    }
    group upd5<"static"=1> {
      A0_0.addr1 = j0.out;
      A0_0.addr0 = i1.out;
      A0_0.write_en = 1'd1;
      A0_0.write_data = A_int_read0_0.out;
      upd5[done] = A0_0.write_done;
    }
    group upd6<"static"=1> {
      j0.write_en = 1'd1;
      add1.left = j0.out;
      add1.right = const7.out;
      j0.in = add1.out;
      upd6[done] = j0.done;
    }
    group upd7<"static"=1> {
      i1.write_en = 1'd1;
      add2.left = i1.out;
      add2.right = const8.out;
      i1.in = add2.out;
      upd7[done] = i1.done;
    }
    group upd8<"static"=2> {
      A_read0_0.write_en = A0_0.read_done;
      A0_0.addr1 = j1.out;
      A0_0.addr0 = i2.out;
      A0_0.read_en = 1'd1;
      A_read0_0.in = A0_0.read_data;
      upd8[done] = A_read0_0.done;
    }
    group upd9<"static"=2> {
      y1_read0_0.write_en = y10.read_done;
      y10.addr0 = j1.out;
      y10.read_en = 1'd1;
      y1_read0_0.in = y10.read_data;
      upd9[done] = y1_read0_0.done;
    }
  }
  control {
    seq {
      par {
        seq {
          @pos(0) let0;
          @bound(8) while le0.out with cond0 {
            seq {
              @pos(1) let1;
              par {
                @pos(2) upd0;
                @pos(3) let2;
              }
              par {
                @pos(4) upd1;
                @pos(5) let3;
              }
              par {
                @pos(6) upd2;
                @pos(7) let4;
              }
              @pos(8) upd3;
              @pos(0) upd4;
            }
          }
        }
        seq {
          @pos(9) let5;
          @bound(8) while le1.out with cond1 {
            seq {
              @pos(10) let6;
              @bound(8) while le2.out with cond2 {
                seq {
                  @pos(11) let7;
                  @pos(12) upd5;
                  @pos(10) upd6;
                }
              }
              @pos(9) upd7;
            }
          }
        }
      }
      @pos(13) let8;
      @bound(8) while le3.out with cond3 {
        seq {
          @pos(14) let9;
          @bound(8) while le4.out with cond4 {
            seq {
              par {
                @pos(15) upd8;
                @pos(16) upd9;
              }
              let10;
              let11;
              let12;
              upd10;
              @pos(14) upd11;
            }
          }
          @pos(13) upd12;
        }
      }
      @pos(17) let13;
      @bound(8) while le5.out with cond5 {
        seq {
          @pos(18) let14;
          @bound(8) while le6.out with cond6 {
            seq {
              par {
                @pos(19) upd13;
                @pos(20) upd14;
              }
              let15;
              let16;
              let17;
              upd15;
              @pos(18) upd16;
            }
          }
          @pos(17) upd17;
        }
      }
      @pos(21) let18;
      @bound(8) while le7.out with cond7 {
        seq {
          @pos(22) upd18;
          par {
            @pos(23) upd19;
            @pos(24) upd20;
          }
          @pos(25) upd21;
          @pos(21) upd22;
        }
      }
    }
  }
}
metadata #{
  0: for (let i: ubit<4> = 0..8) {
  1:   y1_sh[i] := y1_int[i];
  2:   y1_sh[i] := y1_int[i];
  3:   y2_sh[i] := y2_int[i];
  4:   y2_sh[i] := y2_int[i];
  5:   x1_sh[i] := x1_int[i];  // XXX no need for this
  6:   x1_sh[i] := x1_int[i];  // XXX no need for this
  7:   x2_sh[i] := x2_int[i];  // XXX x1 & x2 are outputs
  8:   x2_sh[i] := x2_int[i];  // XXX x1 & x2 are outputs
  9: for (let i: ubit<4> = 0..8) {
  10:   for (let j: ubit<4> = 0..8) {
  11:     A_sh[i][j] := A_int[i][j];
  12:     A_sh[i][j] := A_int[i][j];
  13: for (let i: ubit<4> = 0..8) {
  14:   for (let j: ubit<4> = 0..8) {
  15:     let tmp = A[i][j] * y1[j];
  16:     let tmp = A[i][j] * y1[j];
  17: for (let i: ubit<4> = 0..8) {
  18:   for (let j: ubit<4> = 0..8) {
  19:     let tmp2 = A[j][i] * y2[j];
  20:     let tmp2 = A[j][i] * y2[j];
  21: for (let i: ubit<4> = 0..8) {
  22:   x1_int[i] := x1_sh[i];
  23:   x1_int[i] := x1_sh[i];
  24:   x2_int[i] := x2_sh[i];
  25:   x2_int[i] := x2_sh[i];
}#

