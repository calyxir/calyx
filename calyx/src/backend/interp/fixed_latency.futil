import "primitives/std.lib";
// adapted from https://www.csl.cornell.edu/courses/ece5745/handouts/ece5745-lab1-imul.pdf

component main() -> () {
  cells {
    const1 = prim std_const(32, 11);
    const2 = prim std_const(32, 5);

    lsh = prim std_lsh(32);
    rsh = prim std_rsh(32);

    reg1 = prim std_reg(32);
    reg2 = prim std_reg(32);

    

  }

  wires {

    group cond {
      add1.left = const1.out;
      add1.right = const2.out;
      cond[done] = 1'd1;
    }

    // should finish evaluation after 1 clock cycle
    group add_reg {
      reg1.write_en = 1'd1;
      add1.left = const1.out;
      add1.right = const2.out;
      reg1.in = add1.out;
      add_reg[done] = reg1.done;
    }

    // should finish evaluation after 2 clock cycles
    group two_add_reg {
      reg1.write_en = 1'd1;
      add1.left = const1.out;
      add1.right = const2.out;
      reg1.in = add1.out;

      reg2.write_en = 1'd1;
      add2.left = reg1.out;
      add2.right = const1.out;
      reg2.in = add2.out;

      two_add_reg[done] = reg2.done;
    }

  }

  control {
    seq {
      add_only;
      add_reg;
      two_add_reg;
    }
  }
}