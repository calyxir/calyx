import "primitives/core.futil";
import "primitives/binary_operators.futil";
component mac_pe(top: 32, left: 32) -> (out: 32) {
  cells {
    acc = std_reg(32);
    add = std_add(32);
    mul = std_mult_pipe(32);
  }
  wires {
    group do_add {
      add.left = acc.out;
      add.right = mul.out;
      acc.in = add.out;
      acc.write_en = 1'd1;
      do_add[done] = acc.done;
    }
    out = acc.out;
  }
  control {
    seq {
      invoke mul(left=top, right=left)();
      do_add;
    }
  }
}
component main() -> () {
  cells {
    pe_0_0 = mac_pe();
    top_0_0 = std_reg(32);
    left_0_0 = std_reg(32);
    pe_0_1 = mac_pe();
    top_0_1 = std_reg(32);
    left_0_1 = std_reg(32);
    pe_0_2 = mac_pe();
    top_0_2 = std_reg(32);
    left_0_2 = std_reg(32);
    pe_0_3 = mac_pe();
    top_0_3 = std_reg(32);
    left_0_3 = std_reg(32);
    pe_1_0 = mac_pe();
    top_1_0 = std_reg(32);
    left_1_0 = std_reg(32);
    pe_1_1 = mac_pe();
    top_1_1 = std_reg(32);
    left_1_1 = std_reg(32);
    pe_1_2 = mac_pe();
    top_1_2 = std_reg(32);
    left_1_2 = std_reg(32);
    pe_1_3 = mac_pe();
    top_1_3 = std_reg(32);
    left_1_3 = std_reg(32);
    @external t0 = std_mem_d1(32, 3, 2);
    t0_idx = std_reg(2);
    t0_add = std_add(2);
    @external t1 = std_mem_d1(32, 3, 2);
    t1_idx = std_reg(2);
    t1_add = std_add(2);
    @external t2 = std_mem_d1(32, 3, 2);
    t2_idx = std_reg(2);
    t2_add = std_add(2);
    @external t3 = std_mem_d1(32, 3, 2);
    t3_idx = std_reg(2);
    t3_add = std_add(2);
    @external l0 = std_mem_d1(32, 3, 2);
    l0_idx = std_reg(2);
    l0_add = std_add(2);
    @external l1 = std_mem_d1(32, 3, 2);
    l1_idx = std_reg(2);
    l1_add = std_add(2);
    @external out_mem = std_mem_d1(32, 8, 4);
    idx = std_reg(3);
    idx_add = std_add(3);
    idx_lt_cell = std_lt(3);
    idx_between_0_3_cell = std_lt(3);
    index_lt_4 = std_lt(3);
    index_ge_1 = std_ge(3);
    idx_between_1_4_cell = std_and(1);
    index_lt_5 = std_lt(3);
    index_ge_2 = std_ge(3);
    idx_between_2_5_cell = std_and(1);
    index_lt_6 = std_lt(3);
    index_ge_3 = std_ge(3);
    idx_between_3_6_cell = std_and(1);
    index_lt_7 = std_lt(3);
    index_ge_4 = std_ge(3);
    idx_between_4_7_cell = std_and(1);
  }
  wires {
    group t0_idx_init {
      t0_idx.in = 2'd0;
      t0_idx.write_en = 1'd1;
      t0_idx_init[done] = t0_idx.done;
    }
    group t0_idx_update {
      t0_add.left = 2'd1;
      t0_add.right = t0_idx.out;
      t0_idx.in = t0_add.out;
      t0_idx.write_en = 1'd1;
      t0_idx_update[done] = t0_idx.done;
    }
    group t0_move {
      t0.addr0 = t0_idx.out;
      top_0_0.in = t0.read_data;
      top_0_0.write_en = 1'd1;
      t0_move[done] = top_0_0.done;
    }
    group t1_idx_init {
      t1_idx.in = 2'd0;
      t1_idx.write_en = 1'd1;
      t1_idx_init[done] = t1_idx.done;
    }
    group t1_idx_update {
      t1_add.left = 2'd1;
      t1_add.right = t1_idx.out;
      t1_idx.in = t1_add.out;
      t1_idx.write_en = 1'd1;
      t1_idx_update[done] = t1_idx.done;
    }
    group t1_move {
      t1.addr0 = t1_idx.out;
      top_0_1.in = t1.read_data;
      top_0_1.write_en = 1'd1;
      t1_move[done] = top_0_1.done;
    }
    group t2_idx_init {
      t2_idx.in = 2'd0;
      t2_idx.write_en = 1'd1;
      t2_idx_init[done] = t2_idx.done;
    }
    group t2_idx_update {
      t2_add.left = 2'd1;
      t2_add.right = t2_idx.out;
      t2_idx.in = t2_add.out;
      t2_idx.write_en = 1'd1;
      t2_idx_update[done] = t2_idx.done;
    }
    group t2_move {
      t2.addr0 = t2_idx.out;
      top_0_2.in = t2.read_data;
      top_0_2.write_en = 1'd1;
      t2_move[done] = top_0_2.done;
    }
    group t3_idx_init {
      t3_idx.in = 2'd0;
      t3_idx.write_en = 1'd1;
      t3_idx_init[done] = t3_idx.done;
    }
    group t3_idx_update {
      t3_add.left = 2'd1;
      t3_add.right = t3_idx.out;
      t3_idx.in = t3_add.out;
      t3_idx.write_en = 1'd1;
      t3_idx_update[done] = t3_idx.done;
    }
    group t3_move {
      t3.addr0 = t3_idx.out;
      top_0_3.in = t3.read_data;
      top_0_3.write_en = 1'd1;
      t3_move[done] = top_0_3.done;
    }
    group l0_idx_init {
      l0_idx.in = 2'd0;
      l0_idx.write_en = 1'd1;
      l0_idx_init[done] = l0_idx.done;
    }
    group l0_idx_update {
      l0_add.left = 2'd1;
      l0_add.right = l0_idx.out;
      l0_idx.in = l0_add.out;
      l0_idx.write_en = 1'd1;
      l0_idx_update[done] = l0_idx.done;
    }
    group l0_move {
      l0.addr0 = l0_idx.out;
      left_0_0.in = l0.read_data;
      left_0_0.write_en = 1'd1;
      l0_move[done] = left_0_0.done;
    }
    group l1_idx_init {
      l1_idx.in = 2'd0;
      l1_idx.write_en = 1'd1;
      l1_idx_init[done] = l1_idx.done;
    }
    group l1_idx_update {
      l1_add.left = 2'd1;
      l1_add.right = l1_idx.out;
      l1_idx.in = l1_add.out;
      l1_idx.write_en = 1'd1;
      l1_idx_update[done] = l1_idx.done;
    }
    group l1_move {
      l1.addr0 = l1_idx.out;
      left_1_0.in = l1.read_data;
      left_1_0.write_en = 1'd1;
      l1_move[done] = left_1_0.done;
    }
    group pe_0_0_right_move {
      left_0_1.in = left_0_0.out;
      left_0_1.write_en = 1'd1;
      pe_0_0_right_move[done] = left_0_1.done;
    }
    group pe_0_0_down_move {
      top_1_0.in = top_0_0.out;
      top_1_0.write_en = 1'd1;
      pe_0_0_down_move[done] = top_1_0.done;
    }
    group pe_0_0_out_write {
      out_mem.addr0 = 4'd0;
      out_mem.write_data = pe_0_0.out;
      out_mem.write_en = 1'd1;
      pe_0_0_out_write[done] = out_mem.done;
    }
    group pe_0_1_right_move {
      left_0_2.in = left_0_1.out;
      left_0_2.write_en = 1'd1;
      pe_0_1_right_move[done] = left_0_2.done;
    }
    group pe_0_1_down_move {
      top_1_1.in = top_0_1.out;
      top_1_1.write_en = 1'd1;
      pe_0_1_down_move[done] = top_1_1.done;
    }
    group pe_0_1_out_write {
      out_mem.addr0 = 4'd1;
      out_mem.write_data = pe_0_1.out;
      out_mem.write_en = 1'd1;
      pe_0_1_out_write[done] = out_mem.done;
    }
    group pe_0_2_right_move {
      left_0_3.in = left_0_2.out;
      left_0_3.write_en = 1'd1;
      pe_0_2_right_move[done] = left_0_3.done;
    }
    group pe_0_2_down_move {
      top_1_2.in = top_0_2.out;
      top_1_2.write_en = 1'd1;
      pe_0_2_down_move[done] = top_1_2.done;
    }
    group pe_0_2_out_write {
      out_mem.addr0 = 4'd2;
      out_mem.write_data = pe_0_2.out;
      out_mem.write_en = 1'd1;
      pe_0_2_out_write[done] = out_mem.done;
    }
    group pe_0_3_down_move {
      top_1_3.in = top_0_3.out;
      top_1_3.write_en = 1'd1;
      pe_0_3_down_move[done] = top_1_3.done;
    }
    group pe_0_3_out_write {
      out_mem.addr0 = 4'd3;
      out_mem.write_data = pe_0_3.out;
      out_mem.write_en = 1'd1;
      pe_0_3_out_write[done] = out_mem.done;
    }
    group pe_1_0_right_move {
      left_1_1.in = left_1_0.out;
      left_1_1.write_en = 1'd1;
      pe_1_0_right_move[done] = left_1_1.done;
    }
    group pe_1_0_out_write {
      out_mem.addr0 = 4'd4;
      out_mem.write_data = pe_1_0.out;
      out_mem.write_en = 1'd1;
      pe_1_0_out_write[done] = out_mem.done;
    }
    group pe_1_1_right_move {
      left_1_2.in = left_1_1.out;
      left_1_2.write_en = 1'd1;
      pe_1_1_right_move[done] = left_1_2.done;
    }
    group pe_1_1_out_write {
      out_mem.addr0 = 4'd5;
      out_mem.write_data = pe_1_1.out;
      out_mem.write_en = 1'd1;
      pe_1_1_out_write[done] = out_mem.done;
    }
    group pe_1_2_right_move {
      left_1_3.in = left_1_2.out;
      left_1_3.write_en = 1'd1;
      pe_1_2_right_move[done] = left_1_3.done;
    }
    group pe_1_2_out_write {
      out_mem.addr0 = 4'd6;
      out_mem.write_data = pe_1_2.out;
      out_mem.write_en = 1'd1;
      pe_1_2_out_write[done] = out_mem.done;
    }
    group pe_1_3_out_write {
      out_mem.addr0 = 4'd7;
      out_mem.write_data = pe_1_3.out;
      out_mem.write_en = 1'd1;
      pe_1_3_out_write[done] = out_mem.done;
    }
    group incr_idx {
      idx_add.left = idx.out;
      idx_add.right = 3'd1;
      idx.in = idx_add.out;
      idx.write_en = 1'd1;
      incr_idx[done] = idx.done;
    }
    comb group idx_lt_group {
      idx_lt_cell.left = idx.out;
      idx_lt_cell.right = 3'd7;
    }
    comb group idx_between_0_3_group {
      idx_between_0_3_cell.left = idx.out;
      idx_between_0_3_cell.right = 3'd3;
    }
    comb group idx_between_1_4_group {
      index_ge_1.left = idx.out;
      index_ge_1.right = 3'd1;
      index_lt_4.left = idx.out;
      index_lt_4.right = 3'd4;
      idx_between_1_4_cell.left = index_ge_1.out;
      idx_between_1_4_cell.right = index_lt_4.out;
    }
    comb group idx_between_2_5_group {
      index_ge_2.left = idx.out;
      index_ge_2.right = 3'd2;
      index_lt_5.left = idx.out;
      index_lt_5.right = 3'd5;
      idx_between_2_5_cell.left = index_ge_2.out;
      idx_between_2_5_cell.right = index_lt_5.out;
    }
    comb group idx_between_3_6_group {
      index_ge_3.left = idx.out;
      index_ge_3.right = 3'd3;
      index_lt_6.left = idx.out;
      index_lt_6.right = 3'd6;
      idx_between_3_6_cell.left = index_ge_3.out;
      idx_between_3_6_cell.right = index_lt_6.out;
    }
    comb group idx_between_4_7_group {
      index_ge_4.left = idx.out;
      index_ge_4.right = 3'd4;
      index_lt_7.left = idx.out;
      index_lt_7.right = 3'd7;
      idx_between_4_7_cell.left = index_ge_4.out;
      idx_between_4_7_cell.right = index_lt_7.out;
    }
  }
  control {
    seq {
      par {
        t0_idx_init;
        t1_idx_init;
        t2_idx_init;
        t3_idx_init;
        l0_idx_init;
        l1_idx_init;
      }
      while idx_lt_cell.out with idx_lt_group {
        seq {
          par {
            if idx_between_0_3_cell.out with idx_between_0_3_group {
              par {
                l0_move;
                t0_move;
              }
            }
            if idx_between_1_4_cell.out with idx_between_1_4_group {
              par {
                l1_move;
                t1_move;
                pe_0_0_down_move;
                pe_0_0_right_move;
              }
            }
            if idx_between_2_5_cell.out with idx_between_2_5_group {
              par {
                t2_move;
                pe_0_1_down_move;
                pe_0_1_right_move;
                pe_1_0_right_move;
              }
            }
            if idx_between_3_6_cell.out with idx_between_3_6_group {
              par {
                t3_move;
                pe_0_2_down_move;
                pe_0_2_right_move;
                pe_1_1_right_move;
              }
            }
            if idx_between_4_7_cell.out with idx_between_4_7_group {
              par {
                pe_0_3_down_move;
                pe_1_2_right_move;
              }
            }
          }
          par {
            if idx_between_0_3_cell.out with idx_between_0_3_group {
              par {
                invoke pe_0_0(top=top_0_0.out, left=left_0_0.out)();
                l0_idx_update;
                t0_idx_update;
              }
            }
            if idx_between_1_4_cell.out with idx_between_1_4_group {
              par {
                invoke pe_0_1(top=top_0_1.out, left=left_0_1.out)();
                invoke pe_1_0(top=top_1_0.out, left=left_1_0.out)();
                l1_idx_update;
                t1_idx_update;
              }
            }
            if idx_between_2_5_cell.out with idx_between_2_5_group {
              par {
                invoke pe_0_2(top=top_0_2.out, left=left_0_2.out)();
                invoke pe_1_1(top=top_1_1.out, left=left_1_1.out)();
                t2_idx_update;
              }
            }
            if idx_between_3_6_cell.out with idx_between_3_6_group {
              par {
                invoke pe_0_3(top=top_0_3.out, left=left_0_3.out)();
                invoke pe_1_2(top=top_1_2.out, left=left_1_2.out)();
                t3_idx_update;
              }
            }
            if idx_between_4_7_cell.out with idx_between_4_7_group {
              par {
                invoke pe_1_3(top=top_1_3.out, left=left_1_3.out)();
              }
            }
          }
          incr_idx;
        }
      }
      seq {
        pe_0_0_out_write;
        pe_0_1_out_write;
        pe_0_2_out_write;
        pe_0_3_out_write;
        pe_1_0_out_write;
        pe_1_1_out_write;
        pe_1_2_out_write;
        pe_1_3_out_write;
      }
    }
  }
}
