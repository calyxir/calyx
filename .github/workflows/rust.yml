name: Rust

on: [push]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Versions
      id: versions
      run: |
        echo "::set-output name=runt::$(grep ver runt.toml | awk '{print $3}' | tr -d '"')"
        echo "::set-output name=vcdump::$(cargo search vcdump | awk '{print $3}' | tr -d '"')"
        echo "::set-output name=dahlia::$(git ls-remote https://github.com/cucapra/dahlia.git | awk '{print $1}')"
        echo "::set-output name=verilator::$(cat versions/verilator)"
      shell: bash

    # Install cargo based tools and use some caching magic.
    - name: Cache runt
      id: runt-cache
      uses: actions/cache@v2
      with:
        path: ~/.cargo/bin/runt
        key: runt-bin-${{ runner.os }}-${{ steps.versions.outputs.runt }}

    - name: Install runt
      if: steps.runt-cache.outputs.cache-hit != 'true'
      uses: actions-rs/cargo@v1
      with:
        command: install
        args: runt --version ${{ steps.versions.outputs.runt }}

    - name: Cache vcdump
      id: vcdump-cache
      uses: actions/cache@v2
      with:
        path: ~/.cargo/bin/vcdump
        key: vcdump-bin-${{ runner.os }}-${{ steps.versions.outputs.vcdump }}

    - name: Install vcdump
      if: steps.vcdump-cache.outputs.cache-hit != 'true'
      uses: actions-rs/cargo@v1
      with:
        command: install
        args: vcdump

    - name: Install jq, and SBT
      run: sudo apt-get install jq sbt

    - name: Cache Verilator
      id: verilator-cache
      uses: actions/cache@v2
      with:
        path: ./verilator
        key: verilator-bin-${{ runner.os }}-${{ steps.versions.outputs.verilator }}

    - name: Build Verilator
      if: steps.verilator-cache.outputs.cache-hit != 'true'
      run: |
        sudo apt-get install git make autoconf g++ flex bison libfl2 libfl-dev
        git clone https://github.com/verilator/verilator
        cd verilator
        git pull
        git checkout master
        autoconf
        ./configure
        make
        sudo make install

    - name: Install Verilator
      run: |
        cd verilator
        sudo make install

    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Install numpy and  flit
      run: pip3 install numpy flit prettytable

    - name: Cache SBT
      uses: actions/cache@v2
      with:
        path: |
          ~/.ivy2/cache
          ~/.sbt
        key: ${{ runner.os }}-sbt-${{ hashFiles('dahlia/build.sbt') }}

    # Don't rebuild Dahlia if HEAD hash hasn't changed.
    - name: Cache Dahlia
      id: dahlia-cache
      uses: actions/cache@v2
      with:
        path: ./dahlia
        key: dahlia-dir-${{ runner.os }}-${{ steps.versions.outputs.dahlia }}

    - name: Checkout Dahlia
      uses: actions/checkout@v2
      if: steps.dahlia-cache.outputs.cache-hit != 'true'
      with:
        repository: cucapra/dahlia
        path: dahlia

    - name: Build Dahlia
      if: steps.dahlia-cache.outputs.cache-hit != 'true'
      run: |
        cd ./dahlia && sbt assembly
      shell: bash

    - name: Cache Futil dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --all

    - name: Install MrXL
      run: |
        cd frontends/mrxl
        flit install

    - name: Install fud
      run: |
        cd fud
        flit install
        echo "============= Setting Fud configuration =============="
        fud config global.futil_directory '/home/runner/work/futil/futil'
        fud config stages.dahlia.exec '/home/runner/work/futil/futil/dahlia/fuse'
        fud config stages.futil.exec './target/debug/futil'
        fud config

    - name: Test
      run: |
        unset JAVA_TOOL_OPTIONS
        runt -d -o fail

  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Check formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check
    - name: Run clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --all -- --deny warnings

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: 'latest'
      - name: mdbook
        run: mdbook build
      - name: Build source documentation
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: -p calyx --no-deps
      - name: Move source documentation
        run: |
          mv ./target/doc ./book
      - name: rsync
        if: ${{github.event_name=='push' && github.ref=='refs/heads/master'}}
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_KNOWN_HOSTS: ${{ secrets.DEPLOY_KNOWN_HOSTS }}
          DEPLOY_SRC: ./book/
          DEPLOY_DEST: sync/calyx
          DEPLOY_2_HOST: courses.cit.cornell.edu
          DEPLOY_2_DEST: coursewww/capra.cs.cornell.edu/htdocs/calyx
        run: |
          echo "$DEPLOY_KEY" > pk
          echo "$DEPLOY_KNOWN_HOSTS" > kh
          chmod 600 pk
          rsync --compress --recursive --checksum --itemize-changes --delete \
            -e "ssh -p \"$DEPLOY_PORT\" -i pk -o 'UserKnownHostsFile kh'" \
            $DEPLOY_SRC $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_DEST
          ssh -p $DEPLOY_PORT -i pk -o 'UserKnownHostsFile kh' \
            $DEPLOY_USER@$DEPLOY_HOST \
            rsync --compress --recursive --checksum --itemize-changes \
            --delete -e ssh --perms --chmod=Du=rwx,Dgo=rx,Fu=rw,Fog=r \
            $DEPLOY_DEST/ $DEPLOY_2_HOST:$DEPLOY_2_DEST
