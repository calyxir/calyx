import "primitives/std.lib";

component main() -> () {
  cells {
    const1 = std_const(32, 1);
    const2 = std_const(32, 2);

    add1 = std_add(32);
    add2 = std_add(32);

    reg1 = std_reg(32);
    reg2 = std_reg(32);

  }

  wires {

    // should finish evaluation immediately
    group add_no_reg {
      add1.left = const1.out;
      add1.right = const2.out;
      add_no_reg[done] = 1'd1;
    }

    // should finish evaluation after 1 clock cycle
    group add_one_reg {
      reg1.write_en = 1'd1;
      add1.left = const1.out;
      add1.right = const2.out;
      reg1.in = add1.out;
      add_one_reg[done] = reg1.done;
    }

    // should finish evaluation after 2 clock cycles
    // also, at the end, should have reg1.out = 3, reg2.out = 4
    group add_two_reg {
      reg1.write_en = 1'd1;
      add1.left = const1.out;
      add1.right = const2.out;
      reg1.in = add1.out;

      reg2.write_en = reg1.done // might need to change this?
      add2.left = reg1.out;
      add2.right = const1.out;
      reg2.in = add2.out;

      add_two_reg[done] = reg2.done;
    }

  }

  control {
    seq {
      add_no_reg;
      add_one_reg;
      add_two_reg;
    }
  }
}