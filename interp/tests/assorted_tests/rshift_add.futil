import "primitives/core.futil";

//main point of this is to help 
//with iter_mult.futil 
//is shifting right and adding 8 the same as shifting a 1 into the # from the right?
//if # is 4 bits
component main() -> () {
  cells {
    adder = std_add(4); 
    adder1 = std_add(4);
    reg_15 = std_reg(4);  //shift 7 to the right and add 8 confirm that is 11
    reg_11 = std_reg(4);  //shift 15 to the right and add 8 confirm that is 15
    reg_rsh15 = std_reg(4);
    reg_rsh7 = std_reg(4);
    rsh = std_rsh(4);
    rsh1 = std_rsh(4);
  }

  wires {
    group init {
        reg_15.write_en = 1'b1;
        reg_11.write_en = 1'b1; 
        reg_15.in = 4'd15; 
        reg_11.in = 4'd7;
        init[done] = reg_15.done & reg_11.done ? 1'b1; 
    }
    
    group shift {
        reg_rsh15.write_en = 1'b1; 
        reg_rsh7.write_en = 1'b1; 

        rsh.left = reg_15.out;
        rsh.right = 4'd1; 

        rsh1.left = reg_11.out; // [0111]
        rsh1.right = 4'd1;  //[0011] which is 3

        reg_rsh15.in = rsh.out; 
        reg_rsh7.in = rsh1.out; //this gets 3

        shift[done] = reg_rsh15.done & reg_rsh7.done ? 1'b1; 
    }

    group add {
        reg_15.write_en = 1'b1; 
        reg_11.write_en = 1'b1; 

        adder.left = reg_rsh15.out; 
        adder.right = 4'd8;

        adder1.left = reg_rsh7.out;
        adder1.right = 4'd8; 

        reg_15.in = adder.out; 
        reg_11.in = adder1.out; //3 + 8 gets 11

        add[done] = reg_15.done & reg_11.done ? 1'b1; 
    }
  }

  control {
    seq {
        init;
        shift;
        add;
    }
  }
}
