import "primitives/core.futil";

component main() -> () {
    cells {
        const9 = std_const(32, 9);
        const8 = std_const(32, 8);
        reg0 = std_reg(32);
        reg1 = std_reg(32);
        reg2 = std_reg(32);
        reg3 = std_reg(32);

        //2 ors to check done signals 
        or2_3 = std_or(1);
        or2_3_1 = std_or(1);
    }
    
    wires {
        group wr{
            //set up or to decide write_en of reg0
            or2_3.left = reg2.done;
            or2_3.right = reg3.done;
            or2_3_1.left = or2_3.out;
            or2_3_1.right = reg1.done;
            
            //chain enables
            reg0.write_en = !or2_3_1.out ? 1'b1; //high if no other is high 
            reg1.write_en = reg0.done; 
            reg2.write_en = reg1.done; 
            reg3.write_en = reg2.done; 

            //write to each the same constant
            reg0.in = !or2_3_1.out ? const9.out;
            reg0.in = or2_3_1.out ? const8.out; 
            reg1.in = reg0.out; 
            reg2.in = reg1.out; 
            reg3.in = reg2.out;

            //done when reg3 is done 
            wr[done] = reg3.done; //guard so done only when 
        }
    }

    control {
        seq {
            wr;
        }
    }
}