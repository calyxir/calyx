import "primitives/core.futil";
component main(go: 1, clk: 1) -> (done: 1) {
  cells {
    m = std_reg(4);
    c = std_reg(1);
    a = std_reg(4);
    q = std_reg(4);
    pad_5bit = std_pad(4, 5);
    pad_5bit1 = std_pad(4, 5);
    add_5bits = std_add(5);
    ge_5bits = std_ge(5);
    add_3bits = std_add(3);
    rshift_4bits = std_rsh(4);
    add_4bits = std_add(4);
    slicer = std_slice(4, 1);
    lt = std_lt(3);
    i = std_reg(3);
    fsm = std_reg(3);
    incr = std_add(3);
    fsm0 = std_reg(2);
    incr0 = std_add(2);
    fsm1 = std_reg(3);
    cond_stored = std_reg(1);
    incr1 = std_add(3);
    fsm2 = std_reg(3);
    incr2 = std_add(3);
    fsm3 = std_reg(4);
    cond_stored0 = std_reg(1);
    incr3 = std_add(4);
    fsm4 = std_reg(2);
  }
  wires {
    done = fsm4.out == 2'd2 ? 1'd1;
    a.clk = clk;
    a.in = !(m.done & q.done & i.done & a.done & c.done) & fsm4.out == 2'd0 & go ? 4'd0;
    a.in = fsm.out == 3'd1 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm.out == 3'd3 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd1 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? add_4bits.out;
    a.write_en = !(m.done & q.done & i.done & a.done & c.done) & fsm4.out == 2'd0 & go | fsm.out == 3'd1 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm.out == 3'd3 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd1 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 1'd1;
    add_3bits.left = fsm2.out == 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? i.out;
    add_3bits.right = fsm2.out == 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 3'd1;
    add_4bits.left = fsm.out == 3'd1 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? a.out;
    add_4bits.left = fsm.out == 3'd2 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm.out == 3'd3 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd1 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? rshift_4bits.out;
    add_4bits.right = !slicer.out & (fsm.out == 3'd2 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go) | !c.out & (fsm.out == 3'd3 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd1 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go) ? 4'd0;
    add_4bits.right = slicer.out & (fsm.out == 3'd2 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go) | c.out & (fsm.out == 3'd3 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd1 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go) ? 4'd8;
    add_4bits.right = fsm.out == 3'd1 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? m.out;
    add_5bits.left = fsm.out == 3'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? pad_5bit.out;
    add_5bits.right = fsm.out == 3'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? pad_5bit1.out;
    c.clk = clk;
    c.in = !(m.done & q.done & i.done & a.done & c.done) & fsm4.out == 2'd0 & go | fsm.out == 3'd4 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd2 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 1'd0;
    c.in = fsm.out == 3'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? ge_5bits.out;
    c.write_en = !(m.done & q.done & i.done & a.done & c.done) & fsm4.out == 2'd0 & go | fsm.out == 3'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm.out == 3'd4 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd2 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 1'd1;
    cond_stored.clk = clk;
    cond_stored.in = fsm1.out == 3'd0 & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? slicer.out;
    cond_stored.write_en = fsm1.out == 3'd0 & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 1'd1;
    cond_stored0.clk = clk;
    cond_stored0.in = fsm3.out < 4'd1 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? lt.out;
    cond_stored0.write_en = fsm3.out < 4'd1 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 1'd1;
    fsm.clk = clk;
    fsm.in = fsm.out == 3'd5 ? 3'd0;
    fsm.in = fsm.out != 3'd5 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? incr.out;
    fsm.write_en = fsm.out != 3'd5 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm.out == 3'd5 ? 1'd1;
    fsm0.clk = clk;
    fsm0.in = fsm0.out == 2'd3 ? 2'd0;
    fsm0.in = fsm0.out != 2'd3 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? incr0.out;
    fsm0.write_en = fsm0.out != 2'd3 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd3 ? 1'd1;
    fsm1.clk = clk;
    fsm1.in = fsm1.out == 3'd6 ? 3'd0;
    fsm1.in = fsm1.out != 3'd6 & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? incr1.out;
    fsm1.write_en = fsm1.out != 3'd6 & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm1.out == 3'd6 ? 1'd1;
    fsm2.clk = clk;
    fsm2.in = fsm2.out == 3'd7 ? 3'd0;
    fsm2.in = fsm2.out != 3'd7 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? incr2.out;
    fsm2.write_en = fsm2.out != 3'd7 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm2.out == 3'd7 ? 1'd1;
    fsm3.clk = clk;
    fsm3.in = fsm3.out == 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm3.out == 4'd1 & !cond_stored0.out ? 4'd0;
    fsm3.in = fsm3.out != 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? incr3.out;
    fsm3.write_en = fsm3.out != 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm3.out == 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm3.out == 4'd1 & !cond_stored0.out ? 1'd1;
    fsm4.clk = clk;
    fsm4.in = fsm4.out == 2'd2 ? 2'd0;
    fsm4.in = fsm4.out == 2'd0 & m.done & q.done & i.done & a.done & c.done & go ? 2'd1;
    fsm4.in = fsm4.out == 2'd1 & fsm3.out == 4'd1 & !cond_stored0.out & go ? 2'd2;
    fsm4.write_en = fsm4.out == 2'd0 & m.done & q.done & i.done & a.done & c.done & go | fsm4.out == 2'd1 & fsm3.out == 4'd1 & !cond_stored0.out & go | fsm4.out == 2'd2 ? 1'd1;
    ge_5bits.left = fsm.out == 3'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? add_5bits.out;
    ge_5bits.right = fsm.out == 3'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 5'd16;
    i.clk = clk;
    i.in = !(m.done & q.done & i.done & a.done & c.done) & fsm4.out == 2'd0 & go ? 3'd0;
    i.in = fsm2.out == 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? add_3bits.out;
    i.write_en = !(m.done & q.done & i.done & a.done & c.done) & fsm4.out == 2'd0 & go | fsm2.out == 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 1'd1;
    incr.left = fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 3'd1;
    incr.right = fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? fsm.out;
    incr0.left = fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 2'd1;
    incr0.right = fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? fsm0.out;
    incr1.left = fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? fsm1.out;
    incr1.right = fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 3'd1;
    incr2.left = cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 3'd1;
    incr2.right = cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? fsm2.out;
    incr3.left = !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? fsm3.out;
    incr3.right = !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 4'd1;
    lt.left = fsm3.out < 4'd1 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? i.out;
    lt.right = fsm3.out < 4'd1 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 3'd4;
    m.clk = clk;
    m.in = !(m.done & q.done & i.done & a.done & c.done) & fsm4.out == 2'd0 & go ? 4'd11;
    m.write_en = !(m.done & q.done & i.done & a.done & c.done) & fsm4.out == 2'd0 & go ? 1'd1;
    pad_5bit.in = fsm.out == 3'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? m.out;
    pad_5bit1.in = fsm.out == 3'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? a.out;
    q.clk = clk;
    q.in = !(m.done & q.done & i.done & a.done & c.done) & fsm4.out == 2'd0 & go ? 4'd13;
    q.in = fsm.out == 3'd2 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? add_4bits.out;
    q.write_en = !(m.done & q.done & i.done & a.done & c.done) & fsm4.out == 2'd0 & go | fsm.out == 3'd2 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 1'd1;
    rshift_4bits.left = fsm.out == 3'd3 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd1 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? a.out;
    rshift_4bits.left = fsm.out == 3'd2 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? q.out;
    rshift_4bits.right = fsm.out == 3'd2 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm.out == 3'd3 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd1 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? 4'd1;
    slicer.in = fsm.out == 3'd2 & fsm1.out > 3'd0 & fsm1.out < 3'd6 & cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go | fsm0.out == 2'd0 & fsm1.out > 3'd0 & fsm1.out < 3'd4 & !cond_stored.out & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? a.out;
    slicer.in = fsm1.out == 3'd0 & fsm2.out < 3'd6 & cond_stored0.out & fsm3.out >= 4'd1 & fsm3.out < 4'd8 & !(fsm3.out == 4'd1 & !cond_stored0.out) & fsm4.out == 2'd1 & go ? q.out;
  }

  control {}
}

