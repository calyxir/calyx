import "primitives/core.futil";
component main(go: 1, clk: 1) -> (done: 1) {
  cells {
    i = std_mem_d1(32, 1, 1);
    lt = std_lt(32);
    add = std_add(32);
    fsm = std_reg(2);
    cond_stored = std_reg(1);
    incr0 = std_add(2);
  }
  wires {
    done = fsm.out == 2'd1 & !cond_stored.out ? 1'd1;
    add.left = cond_stored.out & fsm.out >= 2'd1 & fsm.out < 2'd2 & go ? 32'd1;
    add.right = cond_stored.out & fsm.out >= 2'd1 & fsm.out < 2'd2 & go ? i.read_data;
    cond_stored.clk = clk;
    cond_stored.in = fsm.out < 2'd1 & go ? lt.out;
    cond_stored.write_en = fsm.out < 2'd1 & go ? 1'd1;
    fsm.clk = clk;
    fsm.in = fsm.out == 2'd2 & go | fsm.out == 2'd1 & !cond_stored.out ? 2'd0;
    fsm.in = fsm.out != 2'd2 & go ? incr0.out;
    fsm.write_en = fsm.out != 2'd2 & go | fsm.out == 2'd2 & go | fsm.out == 2'd1 & !cond_stored.out ? 1'd1;
    i.addr0 = cond_stored.out & fsm.out >= 2'd1 & fsm.out < 2'd2 & go ? 1'd0;
    i.clk = clk;
    i.write_data = cond_stored.out & fsm.out >= 2'd1 & fsm.out < 2'd2 & go ? add.out;
    i.write_en = cond_stored.out & fsm.out >= 2'd1 & fsm.out < 2'd2 & go ? 1'd1;
    incr0.left = go ? fsm.out;
    incr0.right = go ? 2'd1;
    lt.left = fsm.out < 2'd1 & go ? i.read_data;
    lt.right = fsm.out < 2'd1 & go ? 32'd8;
  }

  control {}
}

