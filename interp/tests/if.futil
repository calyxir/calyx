import "primitives/core.futil";

component main() -> () {
  cells {
    mem = std_mem_d1(32, 1, 1);
    lt = std_lt(32);
  }

  wires {
    group cond<"static"=0> {
      //b/c lt is used in this distinctly not-last group,
      //by end of execution all its ports are 0/X/not asserted.
      lt.left = 32'd9;
      lt.right = 32'd16;
      cond[done] = 1'd1;
    }

    group true<"static"=1> {
      mem.write_en = 1'd1;
      mem.addr0 = 1'd0;
      mem.write_data = 32'd4;
      true[done] = mem.done;
    }

    group false<"static"=1> {
      //since this isn't a single group 
      //execution, mem also has a done of 0
      mem.write_en = 1'd1;
      mem.addr0 = 1'd0;
      mem.write_data = 32'd10;
      false[done] = mem.done;
    }
  }

  control {
    //you can't really check
    //contents of [mem] at end, 
    //cuz our serializiation doesn't
    //support that currently
    if lt.out with cond { //reg0 should have a done of 0 at the end of main execution
      true;
    } else {
      false;
    }
  }
}
