import "primitives/core.futil";
component main(go: 1, clk: 1) -> (done: 1) {
  cells {
    adder = std_add(4);
    adder1 = std_add(4);
    reg_15 = std_reg(4);
    reg_11 = std_reg(4);
    reg_rsh15 = std_reg(4);
    reg_rsh7 = std_reg(4);
    rsh = std_rsh(4);
    rsh1 = std_rsh(4);
    fsm = std_reg(2);
  }
  wires {
    done = fsm.out == 2'd3 ? 1'd1;
    adder.left = !(reg_15.done & reg_11.done) & fsm.out == 2'd2 & go ? reg_rsh15.out;
    adder.right = !(reg_15.done & reg_11.done) & fsm.out == 2'd2 & go ? 4'd8;
    adder1.left = !(reg_15.done & reg_11.done) & fsm.out == 2'd2 & go ? reg_rsh7.out;
    adder1.right = !(reg_15.done & reg_11.done) & fsm.out == 2'd2 & go ? 4'd8;
    fsm.clk = clk;
    fsm.in = fsm.out == 2'd3 ? 2'd0;
    fsm.in = fsm.out == 2'd0 & reg_15.done & reg_11.done & go ? 2'd1;
    fsm.in = fsm.out == 2'd1 & reg_rsh15.done & reg_rsh7.done & go ? 2'd2;
    fsm.in = fsm.out == 2'd2 & reg_15.done & reg_11.done & go ? 2'd3;
    fsm.write_en = fsm.out == 2'd0 & reg_15.done & reg_11.done & go | fsm.out == 2'd1 & reg_rsh15.done & reg_rsh7.done & go | fsm.out == 2'd2 & reg_15.done & reg_11.done & go | fsm.out == 2'd3 ? 1'd1;
    reg_11.clk = clk;
    reg_11.in = !(reg_15.done & reg_11.done) & fsm.out == 2'd0 & go ? 4'd7;
    reg_11.in = !(reg_15.done & reg_11.done) & fsm.out == 2'd2 & go ? adder1.out;
    reg_11.write_en = !(reg_15.done & reg_11.done) & fsm.out == 2'd0 & go | !(reg_15.done & reg_11.done) & fsm.out == 2'd2 & go ? 1'd1;
    reg_15.clk = clk;
    reg_15.in = !(reg_15.done & reg_11.done) & fsm.out == 2'd0 & go ? 4'd15;
    reg_15.in = !(reg_15.done & reg_11.done) & fsm.out == 2'd2 & go ? adder.out;
    reg_15.write_en = !(reg_15.done & reg_11.done) & fsm.out == 2'd0 & go | !(reg_15.done & reg_11.done) & fsm.out == 2'd2 & go ? 1'd1;
    reg_rsh15.clk = clk;
    reg_rsh15.in = !(reg_rsh15.done & reg_rsh7.done) & fsm.out == 2'd1 & go ? rsh.out;
    reg_rsh15.write_en = !(reg_rsh15.done & reg_rsh7.done) & fsm.out == 2'd1 & go ? 1'd1;
    reg_rsh7.clk = clk;
    reg_rsh7.in = !(reg_rsh15.done & reg_rsh7.done) & fsm.out == 2'd1 & go ? rsh1.out;
    reg_rsh7.write_en = !(reg_rsh15.done & reg_rsh7.done) & fsm.out == 2'd1 & go ? 1'd1;
    rsh.left = !(reg_rsh15.done & reg_rsh7.done) & fsm.out == 2'd1 & go ? reg_15.out;
    rsh.right = !(reg_rsh15.done & reg_rsh7.done) & fsm.out == 2'd1 & go ? 4'd1;
    rsh1.left = !(reg_rsh15.done & reg_rsh7.done) & fsm.out == 2'd1 & go ? reg_11.out;
    rsh1.right = !(reg_rsh15.done & reg_rsh7.done) & fsm.out == 2'd1 & go ? 4'd1;
  }

  control {}
}

