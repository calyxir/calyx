import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/binary_operators.futil";

component main() -> (out: 32) {
  cells {
    pow = std_reg(32);
    count = std_reg(4);
    mul = std_mult_pipe(32);
    lt = std_lt(4);
    incr = std_add(4);
    const0 = std_const(4, 3);
    base = std_reg(32);
    exp = std_reg(4);
    my_wire = std_wire(1);
    useless_wire = std_wire(1);
  }
  wires {
    group init<"static"=1> {
      pow.in = 32'd1;
      pow.write_en = 1'd1;
      count.in = 4'd0;
      count.write_en = 1'd1;

      base.in = 32'd10;
      base.write_en = 1'd1;

      exp.in = 4'd3;
      exp.write_en = 1'd1;


      init[done] = pow.done & count.done ? 1'd1;
    }
    group do_mul {
      mul.left = base.out;
      mul.right = pow.out;
      mul.go = !mul.done ? 1'd1;
      pow.in = mul.out;
      pow.write_en = mul.done;
      useless_wire.in = my_wire.out;
      do_mul[done] = pow.done;
    }
    group incr_count<"static"=1> {
      incr.left = 4'd1;
      incr.right = count.out;
      count.in = incr.out;
      count.write_en = 1'd1;
      incr_count[done] = count.done;
    }
    comb group cond {
      lt.right = exp.out;
      lt.left = count.out;
      my_wire.in = !lt.out & 1'd0 ? 1'd1;
    }

    out = pow.out;
  }
  control {
    seq {
      init;
      while lt.out with cond {
        par { do_mul; incr_count; }
      }
    }
  }
}
