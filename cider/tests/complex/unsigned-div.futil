import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/binary_operators.futil";

//a simple test for division

component main() -> () {
  cells {
    @external reg_q = std_reg(32);
    @external reg_r = std_reg(32);
    @external div = std_div_pipe(32);
  }
  wires {

    group div_group {
      div.go = 1'd1;
      div.left = 32'd56;
      div.right = 32'd5;
      reg_q.write_en = div.done ? 1'd1;
      reg_r.write_en = div.done ? 1'd1;
      reg_q.in = div.out_quotient;
      reg_r.in = div.out_remainder;
      div_group[done] = reg_q.done; //b/c this group ends a cycle after div ends, the next output of div will be 0
                                    //aka, div will not assert 11 and 1 in its outputs
    }
    //is it ok that mult and div only assert their output for 1 cycle?
  }
  control {
    seq {
        div_group;
    }
  }
}
