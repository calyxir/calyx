import "primitives/core.futil";
import "primitives/memories/comb.futil";

component main() -> () {
  cells {
    @external mem0 = comb_mem_d1(32, 8, 3);
    @external mem1 = comb_mem_d1(32, 8, 3);
    @external reg0 = std_reg(32);
  }

  wires {
    group write{
      mem0.write_en = 1'd1;
      mem0.addr0 = 3'd4;
      mem0.write_data = 32'd1;
      write[done] = mem0.done;
    }

    group write2{
        mem0.write_en = 1'd1;
        mem0.addr0 = 3'd3;
        mem0.write_data = 32'd2;
        write2[done] = mem0.done;
    }

    group dont_write{
      mem0.write_en = 1'd0;
      mem0.addr0 = 3'd3;
      mem0.write_data = 32'd4; //make sure there's a 1 at mem0[3], not a 4
      mem1.write_en = 1'd1;
      mem1.addr0 = 3'd4;
      mem1.write_data = 32'd1;
      dont_write[done] = mem1.done; //does this guarantee mem0 was ticked? no idts
    }

    group write_en_low_outputs{
        mem0.write_en = 1'd0;
        mem0.addr0 = 3'd4;
        mem0.write_data = 32'd8;
        reg0.write_en = 1'd1;
        reg0.in = mem0.read_data; //reg0 should get what's at mem0[4] (a 1), b/c read_data should be combinational w.r.t addr0
        write_en_low_outputs[done] = reg0.done;
    }
  }

  control {
    seq {
      write;
      write2;
      dont_write;
      write_en_low_outputs;
    }
  }
}
