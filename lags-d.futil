extern "/Users/calebkim/learning/calyx/primitives/math.sv" {
  primitive fp_sqrt[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together in: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive sqrt[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together in: WIDTH) -> (@stable out: WIDTH, @done done: 1);
}
extern "/Users/calebkim/learning/calyx/primitives/binary_operators.sv" {
  comb primitive std_fp_add<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_fp_sub<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  primitive std_fp_mult_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @static(3) @go go: 1, @write_together left: WIDTH, @write_together right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_fp_div_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together left: WIDTH, @write_together right: WIDTH) -> (@stable out_remainder: WIDTH, @stable out_quotient: WIDTH, @done done: 1);
  comb primitive std_fp_gt<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_fp_sadd<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_fp_ssub<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  primitive std_fp_smult_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @static(3) @go go: 1, @write_together left: WIDTH, @write_together right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_fp_sdiv_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together left: WIDTH, @write_together right: WIDTH) -> (@stable out_remainder: WIDTH, @stable out_quotient: WIDTH, @done done: 1);
  comb primitive std_fp_sgt<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_fp_slt<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  primitive std_mult_pipe<"state_share"=1>[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @static(3) @go go: 1, @write_together left: WIDTH, @write_together right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_div_pipe<"state_share"=1>[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together left: WIDTH, @write_together right: WIDTH) -> (@stable out_quotient: WIDTH, @stable out_remainder: WIDTH, @done done: 1);
  comb primitive std_sadd<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_ssub<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  primitive std_smult_pipe<"state_share"=1>[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @static(3) @go go: 1, @write_together left: WIDTH, @write_together right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_sdiv_pipe[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together left: WIDTH, @write_together right: WIDTH) -> (out_quotient: WIDTH, out_remainder: WIDTH, @done done: 1);
  comb primitive std_sgt<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_slt<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_seq<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_sneq<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_sge<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_sle<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_slsh<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_srsh<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
}
extern "/Users/calebkim/learning/calyx/primitives/core.sv" {
  comb primitive std_const<"share"=1>[WIDTH, VALUE]() -> (out: WIDTH);
  comb primitive std_wire<"share"=1>[WIDTH](in: WIDTH) -> (out: WIDTH);
  comb primitive std_slice<"share"=1>[IN_WIDTH, OUT_WIDTH](in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_pad<"share"=1>[IN_WIDTH, OUT_WIDTH](in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_cat<"share"=1>[LEFT_WIDTH, RIGHT_WIDTH, OUT_WIDTH](left: LEFT_WIDTH, right: RIGHT_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_not<"share"=1>[WIDTH](in: WIDTH) -> (out: WIDTH);
  comb primitive std_and<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_or<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_xor<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_add<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_sub<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_gt<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_lt<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_eq<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_neq<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_ge<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_le<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_lsh<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_rsh<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_mux<"share"=1>[WIDTH](cond: 1, tru: WIDTH, fal: WIDTH) -> (out: WIDTH);
  primitive std_reg<"state_share"=1>[WIDTH](@write_together in: WIDTH, @write_together @static @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@stable out: WIDTH, @done done: 1);
  primitive std_mem_d1[WIDTH, SIZE, IDX_SIZE](@read_together addr0: IDX_SIZE, @write_together write_data: WIDTH, @write_together @static @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@read_together read_data: WIDTH, @done done: 1);
  primitive std_mem_d2[WIDTH, D0_SIZE, D1_SIZE, D0_IDX_SIZE, D1_IDX_SIZE](@read_together @write_together(2) addr0: D0_IDX_SIZE, @read_together @write_together(2) addr1: D1_IDX_SIZE, @write_together write_data: WIDTH, @write_together @static @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@read_together read_data: WIDTH, @done done: 1);
  primitive std_mem_d3[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE](@read_together @write_together(2) addr0: D0_IDX_SIZE, @read_together @write_together(2) addr1: D1_IDX_SIZE, @read_together @write_together(2) addr2: D2_IDX_SIZE, @write_together write_data: WIDTH, @write_together @static @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@read_together read_data: WIDTH, @done done: 1);
  primitive std_mem_d4[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D3_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE, D3_IDX_SIZE](@read_together @write_together(2) addr0: D0_IDX_SIZE, @read_together @write_together(2) addr1: D1_IDX_SIZE, @read_together @write_together(2) addr2: D2_IDX_SIZE, @read_together @write_together(2) addr3: D3_IDX_SIZE, @write_together write_data: WIDTH, @write_together @static @go write_en: 1, @clk clk: 1) -> (@read_together read_data: WIDTH, @done done: 1);
}
extern "/Users/calebkim/learning/calyx/primitives/memories.sv" {
  primitive seq_mem_d1[WIDTH, SIZE, IDX_SIZE](@clk clk: 1, @reset reset: 1, addr0: IDX_SIZE, @write_together @static @go write_en: 1, @write_together write_data: WIDTH, @static @go(2) read_en: 1) -> (@stable read_data: WIDTH, @done write_done: 1, @done(2) read_done: 1);
  primitive seq_mem_d2[WIDTH, D0_SIZE, D1_SIZE, D0_IDX_SIZE, D1_IDX_SIZE](@clk clk: 1, @reset reset: 1, addr0: D0_IDX_SIZE, addr1: D1_IDX_SIZE, @write_together @static @go write_en: 1, @write_together write_data: WIDTH, @static @go(2) read_en: 1) -> (@stable read_data: WIDTH, @done write_done: 1, @done(2) read_done: 1);
  primitive seq_mem_d3[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE](@clk clk: 1, @reset reset: 1, addr0: D0_IDX_SIZE, addr1: D1_IDX_SIZE, addr2: D2_IDX_SIZE, @write_together @static @go write_en: 1, @write_together write_data: WIDTH, @static @go(2) read_en: 1) -> (@stable read_data: WIDTH, @done write_done: 1, @done(2) read_done: 1);
  primitive seq_mem_d4[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D3_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE, D3_IDX_SIZE](@clk clk: 1, @reset reset: 1, addr0: D0_IDX_SIZE, addr1: D1_IDX_SIZE, addr2: D2_IDX_SIZE, addr3: D3_IDX_SIZE, @write_together @static @go write_en: 1, @write_together write_data: WIDTH, @static @go(2) read_en: 1) -> (@stable read_data: WIDTH, @done write_done: 1, @done(2) read_done: 1);
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    A0_0 = seq_mem_d2(32, 2, 12, 2, 4);
    A1_0 = seq_mem_d2(32, 2, 12, 2, 4);
    A2_0 = seq_mem_d2(32, 2, 12, 2, 4);
    A3_0 = seq_mem_d2(32, 2, 12, 2, 4);
    A_i_j_00 = std_reg(32);
    A_i_j_10 = std_reg(32);
    A_i_j_20 = std_reg(32);
    A_i_j_30 = std_reg(32);
    A_i_k_00 = std_reg(32);
    A_i_k_10 = std_reg(32);
    A_i_k_20 = std_reg(32);
    A_i_k_30 = std_reg(32);
    @external A_int = seq_mem_d2(32, 8, 12, 4, 4);
    A_int_read0_0 = std_reg(32);
    A_read0_00 = std_reg(32);
    A_read0_10 = std_reg(32);
    A_read0_20 = std_reg(32);
    A_read0_30 = std_reg(32);
    A_read1_00 = std_reg(32);
    A_read1_10 = std_reg(32);
    A_read1_20 = std_reg(32);
    A_read1_30 = std_reg(32);
    A_sh_read0_0 = std_reg(32);
    Q0_0 = seq_mem_d2(32, 2, 12, 2, 4);
    Q1_0 = seq_mem_d2(32, 2, 12, 2, 4);
    Q2_0 = seq_mem_d2(32, 2, 12, 2, 4);
    Q3_0 = seq_mem_d2(32, 2, 12, 2, 4);
    @external Q_int = seq_mem_d2(32, 8, 12, 4, 4);
    Q_int_read0_0 = std_reg(32);
    Q_read0_00 = std_reg(32);
    Q_read0_10 = std_reg(32);
    Q_read0_20 = std_reg(32);
    Q_read0_30 = std_reg(32);
    Q_read1_00 = std_reg(32);
    Q_read1_10 = std_reg(32);
    Q_read1_20 = std_reg(32);
    Q_read1_30 = std_reg(32);
    Q_sh_read0_0 = std_reg(32);
    R0_0 = seq_mem_d2(32, 12, 12, 4, 4);
    @external R_int = seq_mem_d2(32, 12, 12, 4, 4);
    R_int_read0_0 = std_reg(32);
    R_read0_00 = std_reg(32);
    R_read0_10 = std_reg(32);
    R_read0_20 = std_reg(32);
    R_read0_30 = std_reg(32);
    R_read1_00 = std_reg(32);
    R_read1_10 = std_reg(32);
    R_read1_20 = std_reg(32);
    R_read1_30 = std_reg(32);
    R_sh_read0_0 = std_reg(32);
    add0 = std_add(4);
    add1 = std_add(4);
    add10 = std_add(4);
    add11 = std_add(32);
    add12 = std_add(32);
    add13 = std_add(32);
    add14 = std_add(32);
    add15 = std_add(4);
    add16 = std_add(4);
    add17 = std_add(4);
    add18 = std_add(4);
    add19 = std_add(4);
    add2 = std_add(4);
    add20 = std_add(4);
    add21 = std_add(4);
    add22 = std_add(4);
    add3 = std_add(4);
    add4 = std_add(32);
    add5 = std_add(32);
    add6 = std_add(32);
    add7 = std_add(32);
    add8 = std_add(4);
    add9 = std_add(4);
    and0 = std_and(4);
    and1 = std_and(4);
    and10 = std_and(4);
    and11 = std_and(1);
    and12 = std_and(4);
    and13 = std_and(4);
    and14 = std_and(1);
    and15 = std_and(4);
    and16 = std_and(4);
    and17 = std_and(1);
    and18 = std_and(4);
    and19 = std_and(4);
    and2 = std_and(1);
    and20 = std_and(1);
    and21 = std_and(4);
    and22 = std_and(4);
    and23 = std_and(1);
    and24 = std_and(4);
    and25 = std_and(4);
    and26 = std_and(1);
    and27 = std_and(4);
    and28 = std_and(4);
    and29 = std_and(1);
    and3 = std_and(4);
    and30 = std_and(4);
    and31 = std_and(4);
    and32 = std_and(1);
    and33 = std_and(4);
    and34 = std_and(4);
    and35 = std_and(1);
    and36 = std_and(4);
    and37 = std_and(4);
    and38 = std_and(1);
    and39 = std_and(4);
    and4 = std_and(4);
    and40 = std_and(4);
    and41 = std_and(1);
    and42 = std_and(4);
    and43 = std_and(4);
    and44 = std_and(1);
    and45 = std_and(4);
    and46 = std_and(4);
    and47 = std_and(1);
    and5 = std_and(1);
    and6 = std_and(4);
    and7 = std_and(4);
    and8 = std_and(1);
    and9 = std_and(4);
    bin_read0_0 = std_reg(32);
    bin_read10_0 = std_reg(32);
    bin_read11_0 = std_reg(32);
    bin_read12_0 = std_reg(32);
    bin_read13_0 = std_reg(32);
    bin_read14_0 = std_reg(32);
    bin_read15_0 = std_reg(32);
    bin_read1_0 = std_reg(32);
    bin_read2_0 = std_reg(32);
    bin_read3_0 = std_reg(32);
    bin_read4_0 = std_reg(32);
    bin_read5_0 = std_reg(32);
    bin_read6_0 = std_reg(32);
    bin_read7_0 = std_reg(32);
    bin_read8_0 = std_reg(32);
    bin_read9_0 = std_reg(32);
    const0 = std_const(4, 0);
    const1 = std_const(4, 11);
    const10 = std_const(4, 0);
    const100 = std_const(4, 3);
    const101 = std_const(4, 2);
    const102 = std_const(4, 0);
    const103 = std_const(4, 0);
    const104 = std_const(4, 3);
    const105 = std_const(4, 0);
    const106 = std_const(4, 2);
    const107 = std_const(4, 0);
    const108 = std_const(4, 0);
    const109 = std_const(4, 3);
    const11 = std_const(4, 0);
    const110 = std_const(4, 1);
    const111 = std_const(4, 2);
    const112 = std_const(4, 0);
    const113 = std_const(4, 0);
    const114 = std_const(4, 3);
    const115 = std_const(4, 2);
    const116 = std_const(4, 2);
    const117 = std_const(4, 0);
    const118 = std_const(4, 0);
    const119 = std_const(4, 3);
    const12 = std_const(4, 3);
    const120 = std_const(4, 3);
    const121 = std_const(4, 2);
    const122 = std_const(4, 1);
    const123 = std_const(4, 1);
    const13 = std_const(4, 0);
    const14 = std_const(4, 2);
    const15 = std_const(4, 0);
    const16 = std_const(4, 0);
    const17 = std_const(4, 3);
    const18 = std_const(4, 1);
    const19 = std_const(4, 2);
    const2 = std_const(4, 0);
    const20 = std_const(4, 0);
    const21 = std_const(4, 0);
    const22 = std_const(4, 3);
    const23 = std_const(4, 2);
    const24 = std_const(4, 2);
    const25 = std_const(4, 0);
    const26 = std_const(4, 0);
    const27 = std_const(4, 3);
    const28 = std_const(4, 3);
    const29 = std_const(4, 2);
    const3 = std_const(4, 11);
    const30 = std_const(4, 0);
    const31 = std_const(4, 0);
    const32 = std_const(4, 3);
    const33 = std_const(4, 0);
    const34 = std_const(4, 2);
    const35 = std_const(4, 0);
    const36 = std_const(4, 0);
    const37 = std_const(4, 3);
    const38 = std_const(4, 1);
    const39 = std_const(4, 2);
    const4 = std_const(4, 1);
    const40 = std_const(4, 0);
    const41 = std_const(4, 0);
    const42 = std_const(4, 3);
    const43 = std_const(4, 2);
    const44 = std_const(4, 2);
    const45 = std_const(4, 0);
    const46 = std_const(4, 0);
    const47 = std_const(4, 3);
    const48 = std_const(4, 3);
    const49 = std_const(4, 2);
    const5 = std_const(4, 1);
    const50 = std_const(4, 1);
    const51 = std_const(4, 1);
    const52 = std_const(4, 0);
    const53 = std_const(4, 11);
    const54 = std_const(32, 0);
    const55 = std_const(4, 0);
    const56 = std_const(4, 1);
    const57 = std_const(4, 1);
    const58 = std_const(4, 0);
    const59 = std_const(4, 1);
    const6 = std_const(4, 0);
    const60 = std_const(4, 1);
    const61 = std_const(4, 1);
    const62 = std_const(4, 12);
    const63 = std_const(32, 0);
    const64 = std_const(4, 0);
    const65 = std_const(4, 1);
    const66 = std_const(4, 1);
    const67 = std_const(4, 0);
    const68 = std_const(4, 1);
    const69 = std_const(4, 1);
    const7 = std_const(4, 7);
    const70 = std_const(4, 1);
    const71 = std_const(4, 1);
    const72 = std_const(4, 0);
    const73 = std_const(4, 11);
    const74 = std_const(4, 0);
    const75 = std_const(4, 11);
    const76 = std_const(4, 1);
    const77 = std_const(4, 1);
    const78 = std_const(4, 0);
    const79 = std_const(4, 7);
    const8 = std_const(4, 0);
    const80 = std_const(4, 0);
    const81 = std_const(4, 11);
    const82 = std_const(4, 0);
    const83 = std_const(4, 0);
    const84 = std_const(4, 3);
    const85 = std_const(4, 0);
    const86 = std_const(4, 2);
    const87 = std_const(4, 0);
    const88 = std_const(4, 0);
    const89 = std_const(4, 3);
    const9 = std_const(4, 11);
    const90 = std_const(4, 1);
    const91 = std_const(4, 2);
    const92 = std_const(4, 0);
    const93 = std_const(4, 0);
    const94 = std_const(4, 3);
    const95 = std_const(4, 2);
    const96 = std_const(4, 2);
    const97 = std_const(4, 0);
    const98 = std_const(4, 0);
    const99 = std_const(4, 3);
    div_pipe0 = std_div_pipe(32);
    div_pipe1 = std_div_pipe(32);
    div_pipe2 = std_div_pipe(32);
    div_pipe3 = std_div_pipe(32);
    eq0 = std_eq(4);
    eq1 = std_eq(4);
    eq10 = std_eq(4);
    eq11 = std_eq(4);
    eq12 = std_eq(4);
    eq13 = std_eq(4);
    eq14 = std_eq(4);
    eq15 = std_eq(4);
    eq16 = std_eq(4);
    eq17 = std_eq(4);
    eq18 = std_eq(4);
    eq19 = std_eq(4);
    eq2 = std_eq(4);
    eq20 = std_eq(4);
    eq21 = std_eq(4);
    eq22 = std_eq(4);
    eq23 = std_eq(4);
    eq24 = std_eq(4);
    eq25 = std_eq(4);
    eq26 = std_eq(4);
    eq27 = std_eq(4);
    eq28 = std_eq(4);
    eq29 = std_eq(4);
    eq3 = std_eq(4);
    eq30 = std_eq(4);
    eq31 = std_eq(4);
    eq4 = std_eq(4);
    eq5 = std_eq(4);
    eq6 = std_eq(4);
    eq7 = std_eq(4);
    eq8 = std_eq(4);
    eq9 = std_eq(4);
    i0 = std_reg(4);
    i00 = std_reg(4);
    i01 = std_reg(4);
    i1 = std_reg(4);
    i2 = std_reg(4);
    i3 = std_reg(4);
    init00 = std_reg(4);
    init01 = std_reg(4);
    init10 = std_reg(4);
    init11 = std_reg(4);
    j00 = std_reg(4);
    j01 = std_reg(4);
    j_0 = std_reg(4);
    k0 = std_reg(4);
    le0 = std_le(4);
    le1 = std_le(4);
    le10 = std_le(4);
    le11 = std_le(4);
    le12 = std_le(4);
    le2 = std_le(4);
    le3 = std_le(4);
    le4 = std_le(4);
    le5 = std_le(4);
    le6 = std_le(4);
    le7 = std_le(4);
    le8 = std_le(4);
    le9 = std_le(4);
    lt0 = std_lt(4);
    mult_pipe0 = std_mult_pipe(32);
    mult_pipe1 = std_mult_pipe(32);
    mult_pipe10 = std_mult_pipe(32);
    mult_pipe11 = std_mult_pipe(32);
    mult_pipe2 = std_mult_pipe(32);
    mult_pipe3 = std_mult_pipe(32);
    mult_pipe4 = std_mult_pipe(32);
    mult_pipe5 = std_mult_pipe(32);
    mult_pipe6 = std_mult_pipe(32);
    mult_pipe7 = std_mult_pipe(32);
    mult_pipe8 = std_mult_pipe(32);
    mult_pipe9 = std_mult_pipe(32);
    nrm_0 = std_reg(32);
    red_read00 = std_reg(32);
    rsh0 = std_rsh(4);
    rsh1 = std_rsh(4);
    rsh10 = std_rsh(4);
    rsh11 = std_rsh(4);
    rsh12 = std_rsh(4);
    rsh13 = std_rsh(4);
    rsh14 = std_rsh(4);
    rsh15 = std_rsh(4);
    rsh2 = std_rsh(4);
    rsh3 = std_rsh(4);
    rsh4 = std_rsh(4);
    rsh5 = std_rsh(4);
    rsh6 = std_rsh(4);
    rsh7 = std_rsh(4);
    rsh8 = std_rsh(4);
    rsh9 = std_rsh(4);
    slice0 = std_slice(4, 2);
    slice1 = std_slice(4, 2);
    slice10 = std_slice(4, 2);
    slice11 = std_slice(4, 2);
    slice12 = std_slice(4, 2);
    slice13 = std_slice(4, 2);
    slice14 = std_slice(4, 2);
    slice15 = std_slice(4, 2);
    slice16 = std_slice(4, 2);
    slice17 = std_slice(4, 2);
    slice18 = std_slice(4, 2);
    slice19 = std_slice(4, 2);
    slice2 = std_slice(4, 2);
    slice20 = std_slice(4, 2);
    slice21 = std_slice(4, 2);
    slice22 = std_slice(4, 2);
    slice23 = std_slice(4, 2);
    slice24 = std_slice(4, 2);
    slice25 = std_slice(4, 2);
    slice26 = std_slice(4, 2);
    slice27 = std_slice(4, 2);
    slice28 = std_slice(4, 2);
    slice29 = std_slice(4, 2);
    slice3 = std_slice(4, 2);
    slice30 = std_slice(4, 2);
    slice31 = std_slice(4, 2);
    slice32 = std_slice(4, 2);
    slice33 = std_slice(4, 2);
    slice34 = std_slice(4, 2);
    slice35 = std_slice(4, 2);
    slice36 = std_slice(4, 2);
    slice37 = std_slice(4, 2);
    slice38 = std_slice(4, 2);
    slice39 = std_slice(4, 2);
    slice4 = std_slice(4, 2);
    slice40 = std_slice(4, 2);
    slice41 = std_slice(4, 2);
    slice42 = std_slice(4, 2);
    slice43 = std_slice(4, 2);
    slice44 = std_slice(4, 2);
    slice45 = std_slice(4, 2);
    slice46 = std_slice(4, 2);
    slice47 = std_slice(4, 2);
    slice5 = std_slice(4, 2);
    slice6 = std_slice(4, 2);
    slice7 = std_slice(4, 2);
    slice8 = std_slice(4, 2);
    slice9 = std_slice(4, 2);
    sq_0 = std_reg(32);
    sqrt0 = sqrt(32);
    sub0 = std_sub(32);
    sub1 = std_sub(32);
    sub2 = std_sub(32);
    sub3 = std_sub(32);
    v_00 = std_reg(32);
    v_10 = std_reg(32);
    v_20 = std_reg(32);
    v_30 = std_reg(32);
  }
  wires {
    group let0<"static"=1> {
      init00.in = const0.out;
      init00.write_en = 1'd1;
      let0[done] = init00.done;
    }
    group let1<"static"=1> {
      init10.in = const2.out;
      init10.write_en = 1'd1;
      let1[done] = init10.done;
    }
    group let10<"static"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let10[done] = bin_read0_0.done;
      mult_pipe0.left = A_i_k_00.out;
      mult_pipe0.right = A_i_k_00.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group let11<"static"=4> {
      bin_read1_0.in = mult_pipe1.out;
      bin_read1_0.write_en = mult_pipe1.done;
      let11[done] = bin_read1_0.done;
      mult_pipe1.left = A_i_k_10.out;
      mult_pipe1.right = A_i_k_10.out;
      mult_pipe1.go = !mult_pipe1.done ? 1'd1;
    }
    group let12<"static"=4> {
      bin_read2_0.in = mult_pipe2.out;
      bin_read2_0.write_en = mult_pipe2.done;
      let12[done] = bin_read2_0.done;
      mult_pipe2.left = A_i_k_20.out;
      mult_pipe2.right = A_i_k_20.out;
      mult_pipe2.go = !mult_pipe2.done ? 1'd1;
    }
    group let13<"static"=4> {
      bin_read3_0.in = mult_pipe3.out;
      bin_read3_0.write_en = mult_pipe3.done;
      let13[done] = bin_read3_0.done;
      mult_pipe3.left = A_i_k_30.out;
      mult_pipe3.right = A_i_k_30.out;
      mult_pipe3.go = !mult_pipe3.done ? 1'd1;
    }
    group let14 {
      sq_0.in = sqrt0.out;
      sq_0.write_en = 1'd1;
      let14[done] = sq_0.done;
    }
    group let15<"static"=1> {
      i1.in = const58.out;
      i1.write_en = 1'd1;
      let15[done] = i1.done;
    }
    group let16 {
      bin_read4_0.in = div_pipe0.out_quotient;
      bin_read4_0.write_en = div_pipe0.done;
      let16[done] = bin_read4_0.done;
      div_pipe0.left = A_read0_00.out;
      div_pipe0.right = R_read0_00.out;
      div_pipe0.go = !div_pipe0.done ? 1'd1;
    }
    group let17 {
      bin_read5_0.in = div_pipe1.out_quotient;
      bin_read5_0.write_en = div_pipe1.done;
      let17[done] = bin_read5_0.done;
      div_pipe1.left = A_read0_10.out;
      div_pipe1.right = R_read0_10.out;
      div_pipe1.go = !div_pipe1.done ? 1'd1;
    }
    group let18 {
      bin_read6_0.in = div_pipe2.out_quotient;
      bin_read6_0.write_en = div_pipe2.done;
      let18[done] = bin_read6_0.done;
      div_pipe2.left = A_read0_20.out;
      div_pipe2.right = R_read0_20.out;
      div_pipe2.go = !div_pipe2.done ? 1'd1;
    }
    group let19 {
      bin_read7_0.in = div_pipe3.out_quotient;
      bin_read7_0.write_en = div_pipe3.done;
      let19[done] = bin_read7_0.done;
      div_pipe3.left = A_read0_30.out;
      div_pipe3.right = R_read0_30.out;
      div_pipe3.go = !div_pipe3.done ? 1'd1;
    }
    group let2<"static"=2> {
      R_int_read0_0.in = R_int.read_data;
      R_int_read0_0.write_en = R_int.read_done;
      let2[done] = R_int_read0_0.done;
      R_int.addr1 = init10.out;
      R_int.addr0 = init00.out;
      R_int.read_en = 1'd1;
    }
    group let20<"static"=1> {
      j_0.in = add10.out;
      j_0.write_en = 1'd1;
      let20[done] = j_0.done;
      add10.left = k0.out;
      add10.right = const61.out;
    }
    group let21<"static"=1> {
      i2.in = const64.out;
      i2.write_en = 1'd1;
      let21[done] = i2.done;
    }
    group let22<"static"=4> {
      bin_read8_0.in = mult_pipe4.out;
      bin_read8_0.write_en = mult_pipe4.done;
      let22[done] = bin_read8_0.done;
      mult_pipe4.left = Q_read0_00.out;
      mult_pipe4.right = A_read1_00.out;
      mult_pipe4.go = !mult_pipe4.done ? 1'd1;
    }
    group let23<"static"=1> {
      v_00.in = bin_read8_0.out;
      v_00.write_en = 1'd1;
      let23[done] = v_00.done;
    }
    group let24<"static"=4> {
      bin_read9_0.in = mult_pipe5.out;
      bin_read9_0.write_en = mult_pipe5.done;
      let24[done] = bin_read9_0.done;
      mult_pipe5.left = Q_read0_10.out;
      mult_pipe5.right = A_read1_10.out;
      mult_pipe5.go = !mult_pipe5.done ? 1'd1;
    }
    group let25<"static"=1> {
      v_10.in = bin_read9_0.out;
      v_10.write_en = 1'd1;
      let25[done] = v_10.done;
    }
    group let26<"static"=4> {
      bin_read10_0.in = mult_pipe6.out;
      bin_read10_0.write_en = mult_pipe6.done;
      let26[done] = bin_read10_0.done;
      mult_pipe6.left = Q_read0_20.out;
      mult_pipe6.right = A_read1_20.out;
      mult_pipe6.go = !mult_pipe6.done ? 1'd1;
    }
    group let27<"static"=1> {
      v_20.in = bin_read10_0.out;
      v_20.write_en = 1'd1;
      let27[done] = v_20.done;
    }
    group let28<"static"=4> {
      bin_read11_0.in = mult_pipe7.out;
      bin_read11_0.write_en = mult_pipe7.done;
      let28[done] = bin_read11_0.done;
      mult_pipe7.left = Q_read0_30.out;
      mult_pipe7.right = A_read1_30.out;
      mult_pipe7.go = !mult_pipe7.done ? 1'd1;
    }
    group let29<"static"=1> {
      v_30.in = bin_read11_0.out;
      v_30.write_en = 1'd1;
      let29[done] = v_30.done;
    }
    group let3<"static"=1> {
      i00.in = const6.out;
      i00.write_en = 1'd1;
      let3[done] = i00.done;
    }
    group let30<"static"=2> {
      red_read00.in = R0_0.read_data;
      red_read00.write_en = R0_0.read_done;
      let30[done] = red_read00.done;
      R0_0.addr1 = j_0.out;
      R0_0.addr0 = k0.out;
      R0_0.read_en = 1'd1;
    }
    group let31<"static"=1> {
      i3.in = const67.out;
      i3.write_en = 1'd1;
      let31[done] = i3.done;
    }
    group let32<"static"=4> {
      bin_read12_0.in = mult_pipe8.out;
      bin_read12_0.write_en = mult_pipe8.done;
      let32[done] = bin_read12_0.done;
      mult_pipe8.left = Q_read1_00.out;
      mult_pipe8.right = R_read1_00.out;
      mult_pipe8.go = !mult_pipe8.done ? 1'd1;
    }
    group let33<"static"=4> {
      bin_read13_0.in = mult_pipe9.out;
      bin_read13_0.write_en = mult_pipe9.done;
      let33[done] = bin_read13_0.done;
      mult_pipe9.left = Q_read1_10.out;
      mult_pipe9.right = R_read1_10.out;
      mult_pipe9.go = !mult_pipe9.done ? 1'd1;
    }
    group let34<"static"=4> {
      bin_read14_0.in = mult_pipe10.out;
      bin_read14_0.write_en = mult_pipe10.done;
      let34[done] = bin_read14_0.done;
      mult_pipe10.left = Q_read1_20.out;
      mult_pipe10.right = R_read1_20.out;
      mult_pipe10.go = !mult_pipe10.done ? 1'd1;
    }
    group let35<"static"=4> {
      bin_read15_0.in = mult_pipe11.out;
      bin_read15_0.write_en = mult_pipe11.done;
      let35[done] = bin_read15_0.done;
      mult_pipe11.left = Q_read1_30.out;
      mult_pipe11.right = R_read1_30.out;
      mult_pipe11.go = !mult_pipe11.done ? 1'd1;
    }
    group let36<"static"=1> {
      init01.in = const72.out;
      init01.write_en = 1'd1;
      let36[done] = init01.done;
    }
    group let37<"static"=1> {
      init11.in = const74.out;
      init11.write_en = 1'd1;
      let37[done] = init11.done;
    }
    group let38<"static"=1> {
      i01.in = const78.out;
      i01.write_en = 1'd1;
      let38[done] = i01.done;
    }
    group let39<"static"=1> {
      j01.in = const80.out;
      j01.write_en = 1'd1;
      let39[done] = j01.done;
    }
    group let4<"static"=1> {
      j00.in = const8.out;
      j00.write_en = 1'd1;
      let4[done] = j00.done;
    }
    group let5<"static"=2> {
      A_int_read0_0.in = A_int.read_data;
      A_int_read0_0.write_en = A_int.read_done;
      let5[done] = A_int_read0_0.done;
      A_int.addr1 = j00.out;
      A_int.addr0 = i00.out;
      A_int.read_en = 1'd1;
    }
    group let6<"static"=2> {
      Q_int_read0_0.in = Q_int.read_data;
      Q_int_read0_0.write_en = Q_int.read_done;
      let6[done] = Q_int_read0_0.done;
      Q_int.addr1 = j00.out;
      Q_int.addr0 = i00.out;
      Q_int.read_en = 1'd1;
    }
    group let7<"static"=1> {
      k0.in = const52.out;
      k0.write_en = 1'd1;
      let7[done] = k0.done;
    }
    group let8<"static"=1> {
      nrm_0.in = const54.out;
      nrm_0.write_en = 1'd1;
      let8[done] = nrm_0.done;
    }
    group let9<"static"=1> {
      i0.in = const55.out;
      i0.write_en = 1'd1;
      let9[done] = i0.done;
    }
    group upd0<"static"=1> {
      R0_0.addr1 = init10.out;
      R0_0.addr0 = init00.out;
      R0_0.write_en = 1'd1;
      R0_0.write_data = R_int_read0_0.out;
      upd0[done] = R0_0.write_done;
    }
    group upd1<"static"=1> {
      init10.write_en = 1'd1;
      add0.left = init10.out;
      add0.right = const4.out;
      init10.in = add0.out;
      upd1[done] = init10.done;
    }
    group upd10<"static"=1> {
      Q3_0.addr1 = j00.out;
      Q3_0.addr0 = slice7.out;
      slice7.in = rsh7.out;
      rsh7.left = i00.out;
      rsh7.right = const49.out;
      Q3_0.write_en = 1'd1;
      Q3_0.write_data = Q_int_read0_0.out;
      upd10[done] = Q3_0.write_done;
    }
    group upd11<"static"=1> {
      j00.write_en = 1'd1;
      add2.left = j00.out;
      add2.right = const50.out;
      j00.in = add2.out;
      upd11[done] = j00.done;
    }
    group upd12<"static"=1> {
      i00.write_en = 1'd1;
      add3.left = i00.out;
      add3.right = const51.out;
      i00.in = add3.out;
      upd12[done] = i00.done;
    }
    group upd13<"static"=2> {
      A_i_k_00.write_en = A0_0.read_done;
      A0_0.addr1 = k0.out;
      A0_0.addr0 = slice8.out;
      slice8.in = i0.out;
      A0_0.read_en = 1'd1;
      A_i_k_00.in = A0_0.read_data;
      upd13[done] = A_i_k_00.done;
    }
    group upd14<"static"=2> {
      A_i_k_10.write_en = A1_0.read_done;
      A1_0.addr1 = k0.out;
      A1_0.addr0 = slice9.out;
      slice9.in = i0.out;
      A1_0.read_en = 1'd1;
      A_i_k_10.in = A1_0.read_data;
      upd14[done] = A_i_k_10.done;
    }
    group upd15<"static"=2> {
      A_i_k_20.write_en = A2_0.read_done;
      A2_0.addr1 = k0.out;
      A2_0.addr0 = slice10.out;
      slice10.in = i0.out;
      A2_0.read_en = 1'd1;
      A_i_k_20.in = A2_0.read_data;
      upd15[done] = A_i_k_20.done;
    }
    group upd16<"static"=2> {
      A_i_k_30.write_en = A3_0.read_done;
      A3_0.addr1 = k0.out;
      A3_0.addr0 = slice11.out;
      slice11.in = i0.out;
      A3_0.read_en = 1'd1;
      A_i_k_30.in = A3_0.read_data;
      upd16[done] = A_i_k_30.done;
    }
    group upd17<"static"=1> {
      nrm_0.write_en = 1'd1;
      add7.left = nrm_0.out;
      add7.right = add6.out;
      add6.left = add5.out;
      add6.right = bin_read3_0.out;
      nrm_0.in = add7.out;
      upd17[done] = nrm_0.done;
    }
    group upd18<"static"=1> {
      i0.write_en = 1'd1;
      add8.left = i0.out;
      add8.right = const57.out;
      i0.in = add8.out;
      upd18[done] = i0.done;
    }
    group upd19<"static"=1> {
      R0_0.addr1 = k0.out;
      R0_0.addr0 = k0.out;
      R0_0.write_en = 1'd1;
      R0_0.write_data = sq_0.out;
      upd19[done] = R0_0.write_done;
    }
    group upd2<"static"=1> {
      init00.write_en = 1'd1;
      add1.left = init00.out;
      add1.right = const5.out;
      init00.in = add1.out;
      upd2[done] = init00.done;
    }
    group upd20<"static"=2> {
      A_read0_00.write_en = A0_0.read_done;
      A0_0.addr1 = k0.out;
      A0_0.addr0 = slice12.out;
      slice12.in = i1.out;
      A0_0.read_en = 1'd1;
      A_read0_00.in = A0_0.read_data;
      upd20[done] = A_read0_00.done;
    }
    group upd21<"static"=2> {
      A_read0_10.write_en = A1_0.read_done;
      A1_0.addr1 = k0.out;
      A1_0.addr0 = slice13.out;
      slice13.in = i1.out;
      A1_0.read_en = 1'd1;
      A_read0_10.in = A1_0.read_data;
      upd21[done] = A_read0_10.done;
    }
    group upd22<"static"=2> {
      A_read0_20.write_en = A2_0.read_done;
      A2_0.addr1 = k0.out;
      A2_0.addr0 = slice14.out;
      slice14.in = i1.out;
      A2_0.read_en = 1'd1;
      A_read0_20.in = A2_0.read_data;
      upd22[done] = A_read0_20.done;
    }
    group upd23<"static"=2> {
      A_read0_30.write_en = A3_0.read_done;
      A3_0.addr1 = k0.out;
      A3_0.addr0 = slice15.out;
      slice15.in = i1.out;
      A3_0.read_en = 1'd1;
      A_read0_30.in = A3_0.read_data;
      upd23[done] = A_read0_30.done;
    }
    group upd24<"static"=2> {
      R_read0_00.write_en = R0_0.read_done;
      R0_0.addr1 = k0.out;
      R0_0.addr0 = k0.out;
      R0_0.read_en = 1'd1;
      R_read0_00.in = R0_0.read_data;
      upd24[done] = R_read0_00.done;
    }
    group upd25<"static"=2> {
      R_read0_10.write_en = R0_0.read_done;
      R0_0.addr1 = k0.out;
      R0_0.addr0 = k0.out;
      R0_0.read_en = 1'd1;
      R_read0_10.in = R0_0.read_data;
      upd25[done] = R_read0_10.done;
    }
    group upd26<"static"=2> {
      R_read0_20.write_en = R0_0.read_done;
      R0_0.addr1 = k0.out;
      R0_0.addr0 = k0.out;
      R0_0.read_en = 1'd1;
      R_read0_20.in = R0_0.read_data;
      upd26[done] = R_read0_20.done;
    }
    group upd27<"static"=2> {
      R_read0_30.write_en = R0_0.read_done;
      R0_0.addr1 = k0.out;
      R0_0.addr0 = k0.out;
      R0_0.read_en = 1'd1;
      R_read0_30.in = R0_0.read_data;
      upd27[done] = R_read0_30.done;
    }
    group upd28<"static"=1> {
      Q0_0.addr1 = k0.out;
      Q0_0.addr0 = slice16.out;
      slice16.in = i1.out;
      Q0_0.write_en = 1'd1;
      Q0_0.write_data = bin_read4_0.out;
      upd28[done] = Q0_0.write_done;
    }
    group upd29<"static"=1> {
      Q1_0.addr1 = k0.out;
      Q1_0.addr0 = slice17.out;
      slice17.in = i1.out;
      Q1_0.write_en = 1'd1;
      Q1_0.write_data = bin_read5_0.out;
      upd29[done] = Q1_0.write_done;
    }
    group upd3<"static"=1> {
      A0_0.addr1 = j00.out;
      A0_0.addr0 = slice0.out;
      slice0.in = rsh0.out;
      rsh0.left = i00.out;
      rsh0.right = const14.out;
      A0_0.write_en = 1'd1;
      A0_0.write_data = A_int_read0_0.out;
      upd3[done] = A0_0.write_done;
    }
    group upd30<"static"=1> {
      Q2_0.addr1 = k0.out;
      Q2_0.addr0 = slice18.out;
      slice18.in = i1.out;
      Q2_0.write_en = 1'd1;
      Q2_0.write_data = bin_read6_0.out;
      upd30[done] = Q2_0.write_done;
    }
    group upd31<"static"=1> {
      Q3_0.addr1 = k0.out;
      Q3_0.addr0 = slice19.out;
      slice19.in = i1.out;
      Q3_0.write_en = 1'd1;
      Q3_0.write_data = bin_read7_0.out;
      upd31[done] = Q3_0.write_done;
    }
    group upd32<"static"=1> {
      i1.write_en = 1'd1;
      add9.left = i1.out;
      add9.right = const60.out;
      i1.in = add9.out;
      upd32[done] = i1.done;
    }
    group upd33<"static"=1> {
      R0_0.addr1 = j_0.out;
      R0_0.addr0 = k0.out;
      R0_0.write_en = 1'd1;
      R0_0.write_data = const63.out;
      upd33[done] = R0_0.write_done;
    }
    group upd34<"static"=2> {
      Q_read0_00.write_en = Q0_0.read_done;
      Q0_0.addr1 = k0.out;
      Q0_0.addr0 = slice20.out;
      slice20.in = i2.out;
      Q0_0.read_en = 1'd1;
      Q_read0_00.in = Q0_0.read_data;
      upd34[done] = Q_read0_00.done;
    }
    group upd35<"static"=2> {
      Q_read0_10.write_en = Q1_0.read_done;
      Q1_0.addr1 = k0.out;
      Q1_0.addr0 = slice21.out;
      slice21.in = i2.out;
      Q1_0.read_en = 1'd1;
      Q_read0_10.in = Q1_0.read_data;
      upd35[done] = Q_read0_10.done;
    }
    group upd36<"static"=2> {
      Q_read0_20.write_en = Q2_0.read_done;
      Q2_0.addr1 = k0.out;
      Q2_0.addr0 = slice22.out;
      slice22.in = i2.out;
      Q2_0.read_en = 1'd1;
      Q_read0_20.in = Q2_0.read_data;
      upd36[done] = Q_read0_20.done;
    }
    group upd37<"static"=2> {
      Q_read0_30.write_en = Q3_0.read_done;
      Q3_0.addr1 = k0.out;
      Q3_0.addr0 = slice23.out;
      slice23.in = i2.out;
      Q3_0.read_en = 1'd1;
      Q_read0_30.in = Q3_0.read_data;
      upd37[done] = Q_read0_30.done;
    }
    group upd38<"static"=2> {
      A_read1_00.write_en = A0_0.read_done;
      A0_0.addr1 = j_0.out;
      A0_0.addr0 = slice24.out;
      slice24.in = i2.out;
      A0_0.read_en = 1'd1;
      A_read1_00.in = A0_0.read_data;
      upd38[done] = A_read1_00.done;
    }
    group upd39<"static"=2> {
      A_read1_10.write_en = A1_0.read_done;
      A1_0.addr1 = j_0.out;
      A1_0.addr0 = slice25.out;
      slice25.in = i2.out;
      A1_0.read_en = 1'd1;
      A_read1_10.in = A1_0.read_data;
      upd39[done] = A_read1_10.done;
    }
    group upd4<"static"=1> {
      A1_0.addr1 = j00.out;
      A1_0.addr0 = slice1.out;
      slice1.in = rsh1.out;
      rsh1.left = i00.out;
      rsh1.right = const19.out;
      A1_0.write_en = 1'd1;
      A1_0.write_data = A_int_read0_0.out;
      upd4[done] = A1_0.write_done;
    }
    group upd40<"static"=2> {
      A_read1_20.write_en = A2_0.read_done;
      A2_0.addr1 = j_0.out;
      A2_0.addr0 = slice26.out;
      slice26.in = i2.out;
      A2_0.read_en = 1'd1;
      A_read1_20.in = A2_0.read_data;
      upd40[done] = A_read1_20.done;
    }
    group upd41<"static"=2> {
      A_read1_30.write_en = A3_0.read_done;
      A3_0.addr1 = j_0.out;
      A3_0.addr0 = slice27.out;
      slice27.in = i2.out;
      A3_0.read_en = 1'd1;
      A_read1_30.in = A3_0.read_data;
      upd41[done] = A_read1_30.done;
    }
    group upd42<"static"=1> {
      R0_0.addr1 = j_0.out;
      R0_0.addr0 = k0.out;
      R0_0.write_en = 1'd1;
      add14.left = red_read00.out;
      add14.right = add13.out;
      add13.left = add12.out;
      add13.right = v_30.out;
      R0_0.write_data = add14.out;
      upd42[done] = R0_0.write_done;
    }
    group upd43<"static"=1> {
      i2.write_en = 1'd1;
      add15.left = i2.out;
      add15.right = const66.out;
      i2.in = add15.out;
      upd43[done] = i2.done;
    }
    group upd44<"static"=2> {
      A_i_j_00.write_en = A0_0.read_done;
      A0_0.addr1 = j_0.out;
      A0_0.addr0 = slice28.out;
      slice28.in = i3.out;
      A0_0.read_en = 1'd1;
      A_i_j_00.in = A0_0.read_data;
      upd44[done] = A_i_j_00.done;
    }
    group upd45<"static"=2> {
      A_i_j_10.write_en = A1_0.read_done;
      A1_0.addr1 = j_0.out;
      A1_0.addr0 = slice29.out;
      slice29.in = i3.out;
      A1_0.read_en = 1'd1;
      A_i_j_10.in = A1_0.read_data;
      upd45[done] = A_i_j_10.done;
    }
    group upd46<"static"=2> {
      A_i_j_20.write_en = A2_0.read_done;
      A2_0.addr1 = j_0.out;
      A2_0.addr0 = slice30.out;
      slice30.in = i3.out;
      A2_0.read_en = 1'd1;
      A_i_j_20.in = A2_0.read_data;
      upd46[done] = A_i_j_20.done;
    }
    group upd47<"static"=2> {
      A_i_j_30.write_en = A3_0.read_done;
      A3_0.addr1 = j_0.out;
      A3_0.addr0 = slice31.out;
      slice31.in = i3.out;
      A3_0.read_en = 1'd1;
      A_i_j_30.in = A3_0.read_data;
      upd47[done] = A_i_j_30.done;
    }
    group upd48<"static"=2> {
      Q_read1_00.write_en = Q0_0.read_done;
      Q0_0.addr1 = k0.out;
      Q0_0.addr0 = slice32.out;
      slice32.in = i3.out;
      Q0_0.read_en = 1'd1;
      Q_read1_00.in = Q0_0.read_data;
      upd48[done] = Q_read1_00.done;
    }
    group upd49<"static"=2> {
      Q_read1_10.write_en = Q1_0.read_done;
      Q1_0.addr1 = k0.out;
      Q1_0.addr0 = slice33.out;
      slice33.in = i3.out;
      Q1_0.read_en = 1'd1;
      Q_read1_10.in = Q1_0.read_data;
      upd49[done] = Q_read1_10.done;
    }
    group upd5<"static"=1> {
      A2_0.addr1 = j00.out;
      A2_0.addr0 = slice2.out;
      slice2.in = rsh2.out;
      rsh2.left = i00.out;
      rsh2.right = const24.out;
      A2_0.write_en = 1'd1;
      A2_0.write_data = A_int_read0_0.out;
      upd5[done] = A2_0.write_done;
    }
    group upd50<"static"=2> {
      Q_read1_20.write_en = Q2_0.read_done;
      Q2_0.addr1 = k0.out;
      Q2_0.addr0 = slice34.out;
      slice34.in = i3.out;
      Q2_0.read_en = 1'd1;
      Q_read1_20.in = Q2_0.read_data;
      upd50[done] = Q_read1_20.done;
    }
    group upd51<"static"=2> {
      Q_read1_30.write_en = Q3_0.read_done;
      Q3_0.addr1 = k0.out;
      Q3_0.addr0 = slice35.out;
      slice35.in = i3.out;
      Q3_0.read_en = 1'd1;
      Q_read1_30.in = Q3_0.read_data;
      upd51[done] = Q_read1_30.done;
    }
    group upd52<"static"=2> {
      R_read1_00.write_en = R0_0.read_done;
      R0_0.addr1 = j_0.out;
      R0_0.addr0 = k0.out;
      R0_0.read_en = 1'd1;
      R_read1_00.in = R0_0.read_data;
      upd52[done] = R_read1_00.done;
    }
    group upd53<"static"=2> {
      R_read1_10.write_en = R0_0.read_done;
      R0_0.addr1 = j_0.out;
      R0_0.addr0 = k0.out;
      R0_0.read_en = 1'd1;
      R_read1_10.in = R0_0.read_data;
      upd53[done] = R_read1_10.done;
    }
    group upd54<"static"=2> {
      R_read1_20.write_en = R0_0.read_done;
      R0_0.addr1 = j_0.out;
      R0_0.addr0 = k0.out;
      R0_0.read_en = 1'd1;
      R_read1_20.in = R0_0.read_data;
      upd54[done] = R_read1_20.done;
    }
    group upd55<"static"=2> {
      R_read1_30.write_en = R0_0.read_done;
      R0_0.addr1 = j_0.out;
      R0_0.addr0 = k0.out;
      R0_0.read_en = 1'd1;
      R_read1_30.in = R0_0.read_data;
      upd55[done] = R_read1_30.done;
    }
    group upd56<"static"=1> {
      A0_0.addr1 = j_0.out;
      A0_0.addr0 = slice36.out;
      slice36.in = i3.out;
      A0_0.write_en = 1'd1;
      sub0.left = A_i_j_00.out;
      sub0.right = bin_read12_0.out;
      A0_0.write_data = sub0.out;
      upd56[done] = A0_0.write_done;
    }
    group upd57<"static"=1> {
      A1_0.addr1 = j_0.out;
      A1_0.addr0 = slice37.out;
      slice37.in = i3.out;
      A1_0.write_en = 1'd1;
      sub1.left = A_i_j_10.out;
      sub1.right = bin_read13_0.out;
      A1_0.write_data = sub1.out;
      upd57[done] = A1_0.write_done;
    }
    group upd58<"static"=1> {
      A2_0.addr1 = j_0.out;
      A2_0.addr0 = slice38.out;
      slice38.in = i3.out;
      A2_0.write_en = 1'd1;
      sub2.left = A_i_j_20.out;
      sub2.right = bin_read14_0.out;
      A2_0.write_data = sub2.out;
      upd58[done] = A2_0.write_done;
    }
    group upd59<"static"=1> {
      A3_0.addr1 = j_0.out;
      A3_0.addr0 = slice39.out;
      slice39.in = i3.out;
      A3_0.write_en = 1'd1;
      sub3.left = A_i_j_30.out;
      sub3.right = bin_read15_0.out;
      A3_0.write_data = sub3.out;
      upd59[done] = A3_0.write_done;
    }
    group upd6<"static"=1> {
      A3_0.addr1 = j00.out;
      A3_0.addr0 = slice3.out;
      slice3.in = rsh3.out;
      rsh3.left = i00.out;
      rsh3.right = const29.out;
      A3_0.write_en = 1'd1;
      A3_0.write_data = A_int_read0_0.out;
      upd6[done] = A3_0.write_done;
    }
    group upd60<"static"=1> {
      i3.write_en = 1'd1;
      add16.left = i3.out;
      add16.right = const69.out;
      i3.in = add16.out;
      upd60[done] = i3.done;
    }
    group upd61<"static"=1> {
      j_0.write_en = 1'd1;
      add17.left = j_0.out;
      add17.right = const70.out;
      j_0.in = add17.out;
      upd61[done] = j_0.done;
    }
    group upd62<"static"=1> {
      k0.write_en = 1'd1;
      add18.left = k0.out;
      add18.right = const71.out;
      k0.in = add18.out;
      upd62[done] = k0.done;
    }
    group upd63<"static"=2> {
      R_sh_read0_0.write_en = R0_0.read_done;
      R0_0.addr1 = init11.out;
      R0_0.addr0 = init01.out;
      R0_0.read_en = 1'd1;
      R_sh_read0_0.in = R0_0.read_data;
      upd63[done] = R_sh_read0_0.done;
    }
    group upd64<"static"=1> {
      R_int.addr1 = init11.out;
      R_int.addr0 = init01.out;
      R_int.write_en = 1'd1;
      R_int.write_data = R_sh_read0_0.out;
      upd64[done] = R_int.write_done;
    }
    group upd65<"static"=1> {
      init11.write_en = 1'd1;
      add19.left = init11.out;
      add19.right = const76.out;
      init11.in = add19.out;
      upd65[done] = init11.done;
    }
    group upd66<"static"=1> {
      init01.write_en = 1'd1;
      add20.left = init01.out;
      add20.right = const77.out;
      init01.in = add20.out;
      upd66[done] = init01.done;
    }
    group upd67<"static"=2> {
      A_sh_read0_0.write_en = A0_0.read_done;
      A0_0.addr1 = j01.out;
      A0_0.addr0 = slice40.out;
      slice40.in = rsh8.out;
      rsh8.left = i01.out;
      rsh8.right = const86.out;
      A0_0.read_en = 1'd1;
      A_sh_read0_0.in = A0_0.read_data;
      upd67[done] = A_sh_read0_0.done;
    }
    group upd68<"static"=2> {
      A_sh_read0_0.write_en = A1_0.read_done;
      A1_0.addr1 = j01.out;
      A1_0.addr0 = slice41.out;
      slice41.in = rsh9.out;
      rsh9.left = i01.out;
      rsh9.right = const91.out;
      A1_0.read_en = 1'd1;
      A_sh_read0_0.in = A1_0.read_data;
      upd68[done] = A_sh_read0_0.done;
    }
    group upd69<"static"=2> {
      A_sh_read0_0.write_en = A2_0.read_done;
      A2_0.addr1 = j01.out;
      A2_0.addr0 = slice42.out;
      slice42.in = rsh10.out;
      rsh10.left = i01.out;
      rsh10.right = const96.out;
      A2_0.read_en = 1'd1;
      A_sh_read0_0.in = A2_0.read_data;
      upd69[done] = A_sh_read0_0.done;
    }
    group upd7<"static"=1> {
      Q0_0.addr1 = j00.out;
      Q0_0.addr0 = slice4.out;
      slice4.in = rsh4.out;
      rsh4.left = i00.out;
      rsh4.right = const34.out;
      Q0_0.write_en = 1'd1;
      Q0_0.write_data = Q_int_read0_0.out;
      upd7[done] = Q0_0.write_done;
    }
    group upd70<"static"=2> {
      A_sh_read0_0.write_en = A3_0.read_done;
      A3_0.addr1 = j01.out;
      A3_0.addr0 = slice43.out;
      slice43.in = rsh11.out;
      rsh11.left = i01.out;
      rsh11.right = const101.out;
      A3_0.read_en = 1'd1;
      A_sh_read0_0.in = A3_0.read_data;
      upd70[done] = A_sh_read0_0.done;
    }
    group upd71<"static"=1> {
      A_int.addr1 = j01.out;
      A_int.addr0 = i01.out;
      A_int.write_en = 1'd1;
      A_int.write_data = A_sh_read0_0.out;
      upd71[done] = A_int.write_done;
    }
    group upd72<"static"=2> {
      Q_sh_read0_0.write_en = Q0_0.read_done;
      Q0_0.addr1 = j01.out;
      Q0_0.addr0 = slice44.out;
      slice44.in = rsh12.out;
      rsh12.left = i01.out;
      rsh12.right = const106.out;
      Q0_0.read_en = 1'd1;
      Q_sh_read0_0.in = Q0_0.read_data;
      upd72[done] = Q_sh_read0_0.done;
    }
    group upd73<"static"=2> {
      Q_sh_read0_0.write_en = Q1_0.read_done;
      Q1_0.addr1 = j01.out;
      Q1_0.addr0 = slice45.out;
      slice45.in = rsh13.out;
      rsh13.left = i01.out;
      rsh13.right = const111.out;
      Q1_0.read_en = 1'd1;
      Q_sh_read0_0.in = Q1_0.read_data;
      upd73[done] = Q_sh_read0_0.done;
    }
    group upd74<"static"=2> {
      Q_sh_read0_0.write_en = Q2_0.read_done;
      Q2_0.addr1 = j01.out;
      Q2_0.addr0 = slice46.out;
      slice46.in = rsh14.out;
      rsh14.left = i01.out;
      rsh14.right = const116.out;
      Q2_0.read_en = 1'd1;
      Q_sh_read0_0.in = Q2_0.read_data;
      upd74[done] = Q_sh_read0_0.done;
    }
    group upd75<"static"=2> {
      Q_sh_read0_0.write_en = Q3_0.read_done;
      Q3_0.addr1 = j01.out;
      Q3_0.addr0 = slice47.out;
      slice47.in = rsh15.out;
      rsh15.left = i01.out;
      rsh15.right = const121.out;
      Q3_0.read_en = 1'd1;
      Q_sh_read0_0.in = Q3_0.read_data;
      upd75[done] = Q_sh_read0_0.done;
    }
    group upd76<"static"=1> {
      Q_int.addr1 = j01.out;
      Q_int.addr0 = i01.out;
      Q_int.write_en = 1'd1;
      Q_int.write_data = Q_sh_read0_0.out;
      upd76[done] = Q_int.write_done;
    }
    group upd77<"static"=1> {
      j01.write_en = 1'd1;
      add21.left = j01.out;
      add21.right = const122.out;
      j01.in = add21.out;
      upd77[done] = j01.done;
    }
    group upd78<"static"=1> {
      i01.write_en = 1'd1;
      add22.left = i01.out;
      add22.right = const123.out;
      i01.in = add22.out;
      upd78[done] = i01.done;
    }
    group upd8<"static"=1> {
      Q1_0.addr1 = j00.out;
      Q1_0.addr0 = slice5.out;
      slice5.in = rsh5.out;
      rsh5.left = i00.out;
      rsh5.right = const39.out;
      Q1_0.write_en = 1'd1;
      Q1_0.write_data = Q_int_read0_0.out;
      upd8[done] = Q1_0.write_done;
    }
    group upd9<"static"=1> {
      Q2_0.addr1 = j00.out;
      Q2_0.addr0 = slice6.out;
      slice6.in = rsh6.out;
      rsh6.left = i00.out;
      rsh6.right = const44.out;
      Q2_0.write_en = 1'd1;
      Q2_0.write_data = Q_int_read0_0.out;
      upd9[done] = Q2_0.write_done;
    }
    comb group cond0 {
      le0.left = init00.out;
      le0.right = const1.out;
    }
    comb group cond1 {
      le1.left = init10.out;
      le1.right = const3.out;
    }
    comb group cond10 {
      and20.left = eq12.out;
      and20.right = eq13.out;
      eq12.left = and18.out;
      eq12.right = const41.out;
      and18.left = j00.out;
      and18.right = const40.out;
      eq13.left = and19.out;
      eq13.right = const43.out;
      and19.left = i00.out;
      and19.right = const42.out;
    }
    comb group cond11 {
      and23.left = eq14.out;
      and23.right = eq15.out;
      eq14.left = and21.out;
      eq14.right = const46.out;
      and21.left = j00.out;
      and21.right = const45.out;
      eq15.left = and22.out;
      eq15.right = const48.out;
      and22.left = i00.out;
      and22.right = const47.out;
    }
    comb group cond12 {
      le4.left = k0.out;
      le4.right = const53.out;
    }
    comb group cond13 {
      le5.left = i0.out;
      le5.right = const56.out;
    }
    comb group cond14 {
      le6.left = i1.out;
      le6.right = const59.out;
    }
    comb group cond15 {
      lt0.left = j_0.out;
      lt0.right = const62.out;
    }
    comb group cond16 {
      le7.left = i2.out;
      le7.right = const65.out;
    }
    comb group cond17 {
      le8.left = i3.out;
      le8.right = const68.out;
    }
    comb group cond18 {
      le9.left = init01.out;
      le9.right = const73.out;
    }
    comb group cond19 {
      le10.left = init11.out;
      le10.right = const75.out;
    }
    comb group cond2 {
      le2.left = i00.out;
      le2.right = const7.out;
    }
    comb group cond20 {
      le11.left = i01.out;
      le11.right = const79.out;
    }
    comb group cond21 {
      le12.left = j01.out;
      le12.right = const81.out;
    }
    comb group cond22 {
      and26.left = eq16.out;
      and26.right = eq17.out;
      eq16.left = and24.out;
      eq16.right = const83.out;
      and24.left = j01.out;
      and24.right = const82.out;
      eq17.left = and25.out;
      eq17.right = const85.out;
      and25.left = i01.out;
      and25.right = const84.out;
    }
    comb group cond23 {
      and29.left = eq18.out;
      and29.right = eq19.out;
      eq18.left = and27.out;
      eq18.right = const88.out;
      and27.left = j01.out;
      and27.right = const87.out;
      eq19.left = and28.out;
      eq19.right = const90.out;
      and28.left = i01.out;
      and28.right = const89.out;
    }
    comb group cond24 {
      and32.left = eq20.out;
      and32.right = eq21.out;
      eq20.left = and30.out;
      eq20.right = const93.out;
      and30.left = j01.out;
      and30.right = const92.out;
      eq21.left = and31.out;
      eq21.right = const95.out;
      and31.left = i01.out;
      and31.right = const94.out;
    }
    comb group cond25 {
      and35.left = eq22.out;
      and35.right = eq23.out;
      eq22.left = and33.out;
      eq22.right = const98.out;
      and33.left = j01.out;
      and33.right = const97.out;
      eq23.left = and34.out;
      eq23.right = const100.out;
      and34.left = i01.out;
      and34.right = const99.out;
    }
    comb group cond26 {
      and38.left = eq24.out;
      and38.right = eq25.out;
      eq24.left = and36.out;
      eq24.right = const103.out;
      and36.left = j01.out;
      and36.right = const102.out;
      eq25.left = and37.out;
      eq25.right = const105.out;
      and37.left = i01.out;
      and37.right = const104.out;
    }
    comb group cond27 {
      and41.left = eq26.out;
      and41.right = eq27.out;
      eq26.left = and39.out;
      eq26.right = const108.out;
      and39.left = j01.out;
      and39.right = const107.out;
      eq27.left = and40.out;
      eq27.right = const110.out;
      and40.left = i01.out;
      and40.right = const109.out;
    }
    comb group cond28 {
      and44.left = eq28.out;
      and44.right = eq29.out;
      eq28.left = and42.out;
      eq28.right = const113.out;
      and42.left = j01.out;
      and42.right = const112.out;
      eq29.left = and43.out;
      eq29.right = const115.out;
      and43.left = i01.out;
      and43.right = const114.out;
    }
    comb group cond29 {
      and47.left = eq30.out;
      and47.right = eq31.out;
      eq30.left = and45.out;
      eq30.right = const118.out;
      and45.left = j01.out;
      and45.right = const117.out;
      eq31.left = and46.out;
      eq31.right = const120.out;
      and46.left = i01.out;
      and46.right = const119.out;
    }
    comb group cond3 {
      le3.left = j00.out;
      le3.right = const9.out;
    }
    comb group cond4 {
      and2.left = eq0.out;
      and2.right = eq1.out;
      eq0.left = and0.out;
      eq0.right = const11.out;
      and0.left = j00.out;
      and0.right = const10.out;
      eq1.left = and1.out;
      eq1.right = const13.out;
      and1.left = i00.out;
      and1.right = const12.out;
    }
    comb group cond5 {
      and5.left = eq2.out;
      and5.right = eq3.out;
      eq2.left = and3.out;
      eq2.right = const16.out;
      and3.left = j00.out;
      and3.right = const15.out;
      eq3.left = and4.out;
      eq3.right = const18.out;
      and4.left = i00.out;
      and4.right = const17.out;
    }
    comb group cond6 {
      and8.left = eq4.out;
      and8.right = eq5.out;
      eq4.left = and6.out;
      eq4.right = const21.out;
      and6.left = j00.out;
      and6.right = const20.out;
      eq5.left = and7.out;
      eq5.right = const23.out;
      and7.left = i00.out;
      and7.right = const22.out;
    }
    comb group cond7 {
      and11.left = eq6.out;
      and11.right = eq7.out;
      eq6.left = and9.out;
      eq6.right = const26.out;
      and9.left = j00.out;
      and9.right = const25.out;
      eq7.left = and10.out;
      eq7.right = const28.out;
      and10.left = i00.out;
      and10.right = const27.out;
    }
    comb group cond8 {
      and14.left = eq8.out;
      and14.right = eq9.out;
      eq8.left = and12.out;
      eq8.right = const31.out;
      and12.left = j00.out;
      and12.right = const30.out;
      eq9.left = and13.out;
      eq9.right = const33.out;
      and13.left = i00.out;
      and13.right = const32.out;
    }
    comb group cond9 {
      and17.left = eq10.out;
      and17.right = eq11.out;
      eq10.left = and15.out;
      eq10.right = const36.out;
      and15.left = j00.out;
      and15.right = const35.out;
      eq11.left = and16.out;
      eq11.right = const38.out;
      and16.left = i00.out;
      and16.right = const37.out;
    }
  }

  control {
    seq {
      par {
        seq {
          @pos(0) let0;
          @bound(12) while le0.out with cond0 {
            seq {
              @pos let1;
              @bound(12) while le1.out with cond1 {
                seq {
                  @pos(2) let2;
                  @pos(3) upd0;
                  @pos upd1;
                }
              }
              @pos(0) upd2;
            }
          }
        }
        seq {
          @pos(4) let3;
          @bound(8) while le2.out with cond2 {
            seq {
              @pos(5) let4;
              @bound(12) while le3.out with cond3 {
                seq {
                  @pos(6) let5;
                  par {
                    if and2.out with cond4 {
                      upd3;
                    }
                    if and5.out with cond5 {
                      upd4;
                    }
                    if and8.out with cond6 {
                      upd5;
                    }
                    if and11.out with cond7 {
                      upd6;
                    }
                    @pos(7) let6;
                  }
                  par {
                    if and14.out with cond8 {
                      upd7;
                    }
                    if and17.out with cond9 {
                      upd8;
                    }
                    if and20.out with cond10 {
                      upd9;
                    }
                    if and23.out with cond11 {
                      upd10;
                    }
                  }
                  @pos(5) upd11;
                }
              }
              @pos(4) upd12;
            }
          }
        }
      }
      @pos(8) let7;
      @bound(12) while le4.out with cond12 {
        seq {
          @pos(9) let8;
          let9;
          while le5.out with cond13 {
            seq {
              par {
                @pos(10) upd13;
                @pos(10) upd14;
                @pos(10) upd15;
                @pos(10) upd16;
              }
              let10;
              let11;
              let12;
              let13;
              upd17;
              upd18;
            }
          }
          invoke sqrt0(
            in = nrm_0.out
          )();
          @pos(11) let14;
          @pos(12) upd19;
          let15;
          while le6.out with cond14 {
            seq {
              par {
                @pos(13) upd20;
                @pos(13) upd21;
                @pos(13) upd22;
                @pos(13) upd23;
                @pos(14) upd24;
                @pos(14) upd25;
                @pos(14) upd26;
                @pos(14) upd27;
              }
              par {
                seq {
                  let16;
                  upd28;
                }
                seq {
                  let17;
                  upd29;
                }
                seq {
                  let18;
                  upd30;
                }
                seq {
                  let19;
                  upd31;
                }
              }
              upd32;
            }
          }
          @pos(15) let20;
          while lt0.out with cond15 {
            seq {
              @pos(16) upd33;
              let21;
              while le7.out with cond16 {
                seq {
                  par {
                    @pos(17) upd34;
                    @pos(17) upd35;
                    @pos(17) upd36;
                    @pos(17) upd37;
                    @pos(18) upd38;
                    @pos(18) upd39;
                    @pos(18) upd40;
                    @pos(18) upd41;
                  }
                  par {
                    seq {
                      let22;
                      let23;
                    }
                    seq {
                      let24;
                      let25;
                    }
                    seq {
                      let26;
                      let27;
                    }
                    seq {
                      let28;
                      let29;
                    }
                  }
                  let30;
                  upd42;
                  upd43;
                }
              }
              let31;
              while le8.out with cond17 {
                seq {
                  par {
                    @pos(19) upd44;
                    @pos(19) upd45;
                    @pos(19) upd46;
                    @pos(19) upd47;
                  }
                  par {
                    @pos(20) upd48;
                    @pos(20) upd49;
                    @pos(20) upd50;
                    @pos(20) upd51;
                    @pos(21) upd52;
                    @pos(21) upd53;
                    @pos(21) upd54;
                    @pos(21) upd55;
                  }
                  par {
                    seq {
                      let32;
                      upd56;
                    }
                    seq {
                      let33;
                      upd57;
                    }
                    seq {
                      let34;
                      upd58;
                    }
                    seq {
                      let35;
                      upd59;
                    }
                  }
                  upd60;
                }
              }
              @pos(22) upd61;
            }
          }
          @pos(8) upd62;
        }
      }
      par {
        seq {
          @pos(23) let36;
          @bound(12) while le9.out with cond18 {
            seq {
              @pos(24) let37;
              @bound(12) while le10.out with cond19 {
                seq {
                  @pos(25) upd63;
                  @pos(26) upd64;
                  @pos(24) upd65;
                }
              }
              @pos(23) upd66;
            }
          }
        }
        seq {
          @pos(27) let38;
          @bound(8) while le11.out with cond20 {
            seq {
              @pos(28) let39;
              @bound(12) while le12.out with cond21 {
                seq {
                  par {
                    if and26.out with cond22 {
                      @pos(29) upd67;
                    }
                    if and29.out with cond23 {
                      @pos(29) upd68;
                    }
                    if and32.out with cond24 {
                      @pos(29) upd69;
                    }
                    if and35.out with cond25 {
                      @pos(29) upd70;
                    }
                  }
                  par {
                    @pos(30) upd71;
                    if and38.out with cond26 {
                      @pos(31) upd72;
                    }
                    if and41.out with cond27 {
                      @pos(31) upd73;
                    }
                    if and44.out with cond28 {
                      @pos(31) upd74;
                    }
                    if and47.out with cond29 {
                      @pos(31) upd75;
                    }
                  }
                  @pos(32) upd76;
                  @pos(28) upd77;
                }
              }
              @pos(27) upd78;
            }
          }
        }
      }
    }
  }
}
component pow(base: 32, exp: 32, @go go: 1, @clk clk: 1, @reset reset: 1) -> (out: 32, @done done: 1) {
  cells {
    t = std_reg(32);
    count = std_reg(32);
    mul = std_mult_pipe(32);
    lt = std_lt(32);
    incr = std_add(32);
  }
  wires {
    group init<"static"=1> {
      t.in = 32'd1;
      t.write_en = 1'd1;
      count.in = 32'd0;
      count.write_en = 1'd1;
      init[done] = t.done & count.done ? 1'd1;
    }
    group do_mul {
      mul.left = base;
      mul.right = t.out;
      mul.go = !mul.done ? 1'd1;
      t.in = mul.out;
      t.write_en = mul.done;
      do_mul[done] = t.done;
    }
    group incr_count<"static"=1> {
      incr.left = 32'd1;
      incr.right = count.out;
      count.in = incr.out;
      count.write_en = 1'd1;
      incr_count[done] = count.done;
    }
    comb group cond {
      lt.right = exp;
      lt.left = count.out;
    }
    out = t.out;
  }

  control {
    seq {
      init;
      while lt.out with cond {
        par {
          do_mul;
          incr_count;
        }
      }
    }
  }
}
metadata #{
0: for (let init0: ubit<4> = 0..12) {
  1:   for (let init1: ubit<4> = 0..12) {
  2:     R_sh[init0][init1] := R_int[init0][init1];
  3:     R_sh[init0][init1] := R_int[init0][init1];
  4: for (let i0: ubit<4> = 0..8) {
  5:   for (let j0: ubit<4> = 0..12) {
  6:     A_sh[i0][j0] := A_int[i0][j0];
  7:     Q_sh[i0][j0] := Q_int[i0][j0];
  8: for (let k: ubit<4> = 0..12) {
  9:   let nrm: ubit<32> = 0;
  10:     let A_i_k = A[i][k];
  11:   let sq = sqrt(nrm);
  12:   R[k][k] := sq;
  13:     Q[i][k] := A[i][k] / R[k][k];
  14:     Q[i][k] := A[i][k] / R[k][k];
  15:   let j: ubit<4> = k + (1 as ubit<4>);
  16:     R[k][j] := 0;
  17:       let v: ubit<32> = Q[i][k] * A[i][j];
  18:       let v: ubit<32> = Q[i][k] * A[i][j];
  19:       let A_i_j = A[i][j];
  20:       A[i][j] := A_i_j - Q[i][k] * R[k][j];
  21:       A[i][j] := A_i_j - Q[i][k] * R[k][j];
  22:     j := j + (1 as ubit<4>);
  23: for (let init0: ubit<4> = 0..12) {
  24:   for (let init1: ubit<4> = 0..12) {
  25:     R_int[init0][init1] := R_sh[init0][init1];
  26:     R_int[init0][init1] := R_sh[init0][init1];
  27: for (let i0: ubit<4> = 0..8) {
  28:   for (let j0: ubit<4> = 0..12) {
  29:     A_int[i0][j0] := A_sh[i0][j0];
  30:     A_int[i0][j0] := A_sh[i0][j0];
  31:     Q_int[i0][j0] := Q_sh[i0][j0];
  32:     Q_int[i0][j0] := Q_sh[i0][j0];
}#
