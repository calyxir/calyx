import "primitives/core.futil";
import "primitives/binary_operators.futil";

component main(@go go: 1) -> (@done done: 1) {
  cells {
    @external mem = std_mem_d2(32, 2, 2, 2, 2);
    @external mem_2 = std_mem_d2(32, 2, 2, 2, 2);
    @external res = std_mem_d2(32, 2, 2, 2, 2);
    val_00_1 = std_reg(32);
    val_01_1 = std_reg(32);
    val_10_1 = std_reg(32);
    val_11_1 = std_reg(32);
    val_00_2 = std_reg(32);
    val_01_2 = std_reg(32);
    val_10_2 = std_reg(32);
    val_11_2 = std_reg(32);

    multiply_00_00 = std_mult_pipe(32);
    multiply_01_10 = std_mult_pipe(32);
    multiply_00_01 = std_mult_pipe(32);
    multiply_01_11 = std_mult_pipe(32);
    multiply_10_00 = std_mult_pipe(32);
    multiply_11_10 = std_mult_pipe(32);
    multiply_10_01 = std_mult_pipe(32);
    multiply_11_11 = std_mult_pipe(32);

    // Add values to go in final matrix
    add_00 = std_add(32);
    add_01 = std_add(32);
    add_10 = std_add(32);
    add_11 = std_add(32);
    // add = std_add(32);
    // counter = std_reg(32);
    // add2 = std_add(32);
    // lt = std_lt(32);
  }
  wires {
    // group the_answer {
    //   mem.addr0 = 1'b0;
    //   mem.write_data = 32'd42;
    //   mem.write_en = 1'b1;
    //   the_answer[done] = mem.done;
    // }
    group read_00_1 {
      mem.addr0 = 2'b0;
      mem.addr1 = 2'b0;
      val_00_1.in = mem.read_data;
      val_00_1.write_en = 1'b1;
      read_00_1[done] = val_00_1.done;
    }
    group read_01_1 {
      mem.addr0 = 2'b0;
      mem.addr1 = 2'b1;
      val_01_1.in = mem.read_data;
      val_01_1.write_en = 1'b1;
      read_01_1[done] = val_01_1.done;
    }
    group read_10_1 {
      mem.addr0 = 2'b1;
      mem.addr1 = 2'b0;
      val_10_1.in = mem.read_data;
      val_10_1.write_en = 1'b1;
      read_10_1[done] = val_10_1.done;
    }
    group read_11_1 {
      mem.addr0 = 2'b1;
      mem.addr1 = 2'b1;
      val_11_1.in = mem.read_data;
      val_11_1.write_en = 1'b1;
      read_11_1[done] = val_11_1.done;
    }
    group read_00_2 {
      mem_2.addr0 = 2'b0;
      mem_2.addr1 = 2'b0;
      val_00_2.in = mem_2.read_data;
      val_00_2.write_en = 1'b1;
      read_00_2[done] = val_00_2.done;
    }
    group read_01_2 {
      mem_2.addr0 = 2'b0;
      mem_2.addr1 = 2'b1;
      val_01_2.in = mem_2.read_data;
      val_01_2.write_en = 1'b1;
      read_01_2[done] = val_01_2.done;
    }
    group read_10_2 {
      mem_2.addr0 = 2'b1;
      mem_2.addr1 = 2'b0;
      val_10_2.in = mem_2.read_data;
      val_10_2.write_en = 1'b1;
      read_10_2[done] = val_10_2.done;
    }
    group read_11_2 {
      mem_2.addr0 = 2'b1;
      mem_2.addr1 = 2'b1;
      val_11_2.in = mem_2.read_data;
      val_11_2.write_en = 1'b1;
      read_11_2[done] = val_11_2.done;
    }
    group mult_00_00 {
      multiply_00_00.left = val_00_1.out;
      multiply_00_00.right = val_00_2.out;
      multiply_00_00.go = !multiply_00_00.done ? 1'd1;
      mult_00_00[done] = multiply_00_00.done ? 1'd1;
    }
    group mult_01_10 {
      multiply_01_10.left = val_01_1.out;
      multiply_01_10.right = val_10_2.out;
      multiply_01_10.go = !multiply_00_00.done ? 1'd1;
      mult_01_10[done] = multiply_01_10.done ? 1'd1;
    }
    group mult_00_01 {
      multiply_00_01.left = val_00_1.out;
      multiply_00_01.right = val_01_2.out;
      multiply_00_01.go = !multiply_00_01.done ? 1'd1;
      mult_00_01[done] = multiply_00_01.done ? 1'd1;
    }
    group mult_01_11 {
      multiply_01_11.left = val_01_1.out;
      multiply_01_11.right = val_11_2.out;
      multiply_01_11.go = !multiply_01_11.done ? 1'd1;
      mult_01_11[done] = multiply_01_11.done ? 1'd1;
    }
    group mult_10_00 {
      multiply_10_00.left = val_10_1.out;
      multiply_10_00.right = val_00_2.out;
      multiply_10_00.go = !multiply_10_00.done ? 1'd1;
      mult_10_00[done] = multiply_10_00.done ? 1'd1;
    }
    group mult_11_10 {
      multiply_11_10.left = val_11_1.out;
      multiply_11_10.right = val_10_2.out;
      multiply_11_10.go = !multiply_11_10.done ? 1'd1;
      mult_11_10[done] = multiply_11_10.done ? 1'd1;
    }
    group mult_10_01 {
      multiply_10_01.left = val_10_1.out;
      multiply_10_01.right = val_01_2.out;
      multiply_10_01.go = !multiply_10_01.done ? 1'd1;
      mult_10_01[done] = multiply_10_01.done ? 1'd1;
    }
    group mult_11_11 {
      multiply_11_11.left = val_11_1.out;
      multiply_11_11.right = val_11_2.out;
      multiply_11_11.go = !multiply_11_11.done ? 1'd1;
      mult_11_11[done] = multiply_11_11.done ? 1'd1;
    }
    group res_add_00 {
      add_00.left = multiply_00_00.out;
      add_00.right = multiply_01_10.out;
      res.addr0 = 2'b0;
      res.addr1 = 2'b0; 
      res.write_en = 1'b1;
      res.write_data = add_00.out;
      res_add_00[done] = res.done;
    }
    group res_add_01 {
      add_01.left = multiply_00_01.out;
      add_01.right = multiply_01_11.out;
      res.addr0 = 2'b0;
      res.addr1 = 2'b1; 
      res.write_en = 1'b1;
      res.write_data = add_01.out;
      res_add_01[done] = res.done;
    }
    group res_add_10 {
      add_10.left = multiply_10_00.out;
      add_10.right = multiply_11_10.out;
      res.addr0 = 2'b1;
      res.addr1 = 2'b0; 
      res.write_en = 1'b1;
      res.write_data = add_10.out;
      res_add_10[done] = res.done;
    }
    group res_add_11 {
      add_11.left = multiply_10_01.out;
      add_11.right = multiply_11_11.out;
      res.addr0 = 2'b1;
      res.addr1 = 2'b1; 
      res.write_en = 1'b1;
      res.write_data = add_11.out;
      res_add_11[done] = res.done;
    }
  }
  control {
    seq {
      read_00_1;
      read_01_1;
      read_10_1;
      read_11_1;
      read_00_2;
      read_01_2;
      read_10_2;
      read_11_2;
      par {
        mult_00_00;
        mult_00_01;
        mult_01_10;
        mult_01_11;
        mult_10_00;
        mult_10_01;
        mult_11_10;
        mult_11_11;
      }
      res_add_00;
      res_add_01;
      res_add_10;
      res_add_11;
    }
  }
}
