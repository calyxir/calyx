import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/binary_operators.futil";
component wrap2(i: 32, j: 32) -> () {
  cells {
    ref mem0 = comb_mem_d1(32, 4, 32);
    ref mem1 = comb_mem_d1(32, 4, 32);
    ref mem2 = comb_mem_d1(32, 4, 32);
    ref mem3 = comb_mem_d1(32, 4, 32);
    ref mem4 = comb_mem_d1(32, 4, 32);
    ref mem5 = comb_mem_d1(32, 4, 32);
    ref ans = comb_mem_d1(32, 1, 32);
    j_mod_4 = std_reg(32);
    eq_1 = std_eq(32);
    eq_2 = std_eq(32);
    lt_3 = std_lt(32);
    lt_4 = std_lt(32);
    j_minus_4 = std_sub(32);
    j_minus_8 = std_sub(32);
  }
  wires {
    comb group eq_1_group {
      eq_1.left = i;
      eq_1.right = 32'd0;
    }
    comb group eq_2_group {
      eq_2.left = i;
      eq_2.right = 32'd1;
    }
    comb group lt_3_group {
      lt_3.left = j;
      lt_3.right = 32'd4;
    }
    comb group lt_4_group {
      lt_4.left = j;
      lt_4.right = 32'd8;
    }
    group j_unchanged {
      j_mod_4.in = j;
      j_mod_4.write_en = 1'd1;
      j_unchanged[done] = j_mod_4.done;
    }
    group j_minus_4_group {
      j_minus_4.left = j;
      j_minus_4.right = 32'd4;
      j_mod_4.write_en = 1'd1;
      j_mod_4.in = j_minus_4.out;
      j_minus_4_group[done] = j_mod_4.done;
    }
    group j_minus_8_group {
      j_minus_8.left = j;
      j_minus_8.right = 32'd8;
      j_mod_4.write_en = 1'd1;
      j_mod_4.in = j_minus_8.out;
      j_minus_8_group[done] = j_mod_4.done;
    }
    group load_from_mem0 {
      mem0.addr0 = j_mod_4.out;
      ans.write_en = 1'd1;
      ans.addr0 = 32'd0;
      ans.write_data = mem0.read_data;
      load_from_mem0[done] = ans.done;
    }
    group load_from_mem1 {
      mem1.addr0 = j_mod_4.out;
      ans.write_en = 1'd1;
      ans.addr0 = 32'd0;
      ans.write_data = mem1.read_data;
      load_from_mem1[done] = ans.done;
    }
    group load_from_mem2 {
      mem2.addr0 = j_mod_4.out;
      ans.write_en = 1'd1;
      ans.addr0 = 32'd0;
      ans.write_data = mem2.read_data;
      load_from_mem2[done] = ans.done;
    }
    group load_from_mem3 {
      mem3.addr0 = j_mod_4.out;
      ans.write_en = 1'd1;
      ans.addr0 = 32'd0;
      ans.write_data = mem3.read_data;
      load_from_mem3[done] = ans.done;
    }
    group load_from_mem4 {
      mem4.addr0 = j_mod_4.out;
      ans.write_en = 1'd1;
      ans.addr0 = 32'd0;
      ans.write_data = mem4.read_data;
      load_from_mem4[done] = ans.done;
    }
    group load_from_mem5 {
      mem5.addr0 = j_mod_4.out;
      ans.write_en = 1'd1;
      ans.addr0 = 32'd0;
      ans.write_data = mem5.read_data;
      load_from_mem5[done] = ans.done;
    }
  }
  control {
    seq {
      if lt_3.out with lt_3_group {
        j_unchanged;
      } else {
        if lt_4.out with lt_4_group {
          j_minus_4_group;
        } else {
          j_minus_8_group;
        }
      }
      par {
        if eq_1.out with eq_1_group {
          if lt_3.out with lt_3_group {
            load_from_mem0;
          } else {
            if lt_4.out with lt_4_group {
              load_from_mem1;
            } else {
              load_from_mem2;
            }
          }
        }
        if eq_2.out with eq_2_group {
          if lt_3.out with lt_3_group {
            load_from_mem3;
          } else {
            if lt_4.out with lt_4_group {
              load_from_mem4;
            } else {
              load_from_mem5;
            }
          }
        }
      }
    }
  }
}
component wrap3(i: 32, j: 32) -> () {
  cells {
    ref mem0 = comb_mem_d1(32, 4, 32);
    ref mem1 = comb_mem_d1(32, 4, 32);
    ref mem2 = comb_mem_d1(32, 4, 32);
    ref mem3 = comb_mem_d1(32, 4, 32);
    ref mem4 = comb_mem_d1(32, 4, 32);
    ref mem5 = comb_mem_d1(32, 4, 32);
    ref ans = comb_mem_d1(32, 1, 32);
    j_mod_4 = std_reg(32);
    eq_1 = std_eq(32);
    eq_2 = std_eq(32);
    eq_3 = std_eq(32);
    lt_4 = std_lt(32);
    j_minus_4 = std_sub(32);
  }
  wires {
    comb group eq_1_group {
      eq_1.left = i;
      eq_1.right = 32'd0;
    }
    comb group eq_2_group {
      eq_2.left = i;
      eq_2.right = 32'd1;
    }
    comb group eq_3_group {
      eq_3.left = i;
      eq_3.right = 32'd2;
    }
    comb group lt_4_group {
      lt_4.left = j;
      lt_4.right = 32'd4;
    }
    group j_unchanged {
      j_mod_4.in = j;
      j_mod_4.write_en = 1'd1;
      j_unchanged[done] = j_mod_4.done;
    }
    group j_minus_4_group {
      j_minus_4.left = j;
      j_minus_4.right = 32'd4;
      j_mod_4.write_en = 1'd1;
      j_mod_4.in = j_minus_4.out;
      j_minus_4_group[done] = j_mod_4.done;
    }
    group load_from_mem0 {
      mem0.addr0 = j_mod_4.out;
      ans.write_en = 1'd1;
      ans.addr0 = 32'd0;
      ans.write_data = mem0.read_data;
      load_from_mem0[done] = ans.done;
    }
    group load_from_mem1 {
      mem1.addr0 = j_mod_4.out;
      ans.write_en = 1'd1;
      ans.addr0 = 32'd0;
      ans.write_data = mem1.read_data;
      load_from_mem1[done] = ans.done;
    }
    group load_from_mem2 {
      mem2.addr0 = j_mod_4.out;
      ans.write_en = 1'd1;
      ans.addr0 = 32'd0;
      ans.write_data = mem2.read_data;
      load_from_mem2[done] = ans.done;
    }
    group load_from_mem3 {
      mem3.addr0 = j_mod_4.out;
      ans.write_en = 1'd1;
      ans.addr0 = 32'd0;
      ans.write_data = mem3.read_data;
      load_from_mem3[done] = ans.done;
    }
    group load_from_mem4 {
      mem4.addr0 = j_mod_4.out;
      ans.write_en = 1'd1;
      ans.addr0 = 32'd0;
      ans.write_data = mem4.read_data;
      load_from_mem4[done] = ans.done;
    }
    group load_from_mem5 {
      mem5.addr0 = j_mod_4.out;
      ans.write_en = 1'd1;
      ans.addr0 = 32'd0;
      ans.write_data = mem5.read_data;
      load_from_mem5[done] = ans.done;
    }
  }
  control {
    seq {
      if lt_4.out with lt_4_group {
        j_unchanged;
      } else {
        j_minus_4_group;
      }
      par {
        if eq_1.out with eq_1_group {
          if lt_4.out with lt_4_group {
            load_from_mem0;
          } else {
            load_from_mem1;
          }
        }
        if eq_2.out with eq_2_group {
          if lt_4.out with lt_4_group {
            load_from_mem2;
          } else {
            load_from_mem3;
          }
        }
        if eq_3.out with eq_3_group {
          if lt_4.out with lt_4_group {
            load_from_mem4;
          } else {
            load_from_mem5;
          }
        }
      }
    }
  }
}
component main() -> () {
  cells {
    @external A = comb_mem_d1(32, 4, 32);
    @external B = comb_mem_d1(32, 4, 32);
    @external C = comb_mem_d1(32, 4, 32);
    @external D = comb_mem_d1(32, 4, 32);
    @external E = comb_mem_d1(32, 4, 32);
    @external F = comb_mem_d1(32, 4, 32);
    @external out2 = comb_mem_d1(32, 1, 32);
    @external out3 = comb_mem_d1(32, 1, 32);
    together2 = wrap2();
    together3 = wrap3();
  }
  wires {

  }
  control {
    seq {
      invoke together2[mem0=A, mem1=B, mem2=C, mem3=D, mem4=E, mem5=F, ans=out2](i=32'd1, j=32'd11)();
      invoke together3[mem0=A, mem1=B, mem2=C, mem3=D, mem4=E, mem5=F, ans=out3](i=32'd2, j=32'd7)();
    }
  }
}