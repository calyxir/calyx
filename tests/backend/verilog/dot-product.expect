/* verilator lint_off WIDTH */
module std_mem_d1
  #(parameter width = 32,
    parameter size = 16,
    parameter idx_size = 4)
   (input logic [idx_size-1:0] addr0,
    input logic [width-1:0]   write_data,
    input logic               write_en,
    input logic               clk,
    output logic [width-1:0]  read_data,
    output logic done);

  logic [width-1:0]  mem[size-1:0];

  assign read_data = mem[addr0];
  always_ff @(posedge clk) begin
    if (write_en) begin
      mem[addr0] <= write_data;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (output logic [width - 1:0] out);
  assign out = value;
endmodule

module std_le
  #(parameter width = 32)
  (input logic [width-1:0] left,
   input logic [width-1:0] right,
   output logic            out);
  assign out = left <= right;
endmodule

module std_mult_pipe
  #(parameter width = 32)
   (input logic [width-1:0] left,
    input logic [width-1:0] right,
    input logic go,
    input logic clk,
    output logic [width-1:0] out,
    output logic done);
   logic [width-1:0] rtmp;
   logic [width-1:0] ltmp;
   logic [width-1:0] out_tmp;
   reg done_buf[1:0];
   always_ff @(posedge clk) begin
     if (go) begin
       rtmp <= right;
       ltmp <= left;
       out_tmp <= rtmp * ltmp;
       out <= out_tmp;

       done <= done_buf[1];
       done_buf[0] <= 1'b1;
       done_buf[1] <= done_buf[0];
     end else begin
       rtmp <= 0;
       ltmp <= 0;
       out_tmp <= 0;
       out <= 0;

       done <= 0;
       done_buf[0] <= 0;
       done_buf[1] <= 0;
     end
   end
 endmodule

// Component Signature
module main (
      input logic go,
      input logic clk,
      output logic done
  );
  
  // Structure wire declarations
  logic v0_addr0;
  logic [31:0] v0_write_data;
  logic v0_write_en;
  logic v0_clk;
  logic [31:0] v0_read_data;
  logic v0_done;
  logic [31:0] mult_pipe0_left;
  logic [31:0] mult_pipe0_right;
  logic mult_pipe0_go;
  logic mult_pipe0_clk;
  logic [31:0] mult_pipe0_out;
  logic mult_pipe0_done;
  logic [3:0] le0_left;
  logic [3:0] le0_right;
  logic le0_out;
  logic [3:0] i0_in;
  logic i0_write_en;
  logic i0_clk;
  logic [3:0] i0_out;
  logic i0_done;
  logic [31:0] dot_0_in;
  logic dot_0_write_en;
  logic dot_0_clk;
  logic [31:0] dot_0_out;
  logic dot_0_done;
  logic [3:0] const4_out;
  logic const3_out;
  logic const2_out;
  logic [3:0] const1_out;
  logic [3:0] const0_out;
  logic [31:0] bin_read0_0_in;
  logic bin_read0_0_write_en;
  logic bin_read0_0_clk;
  logic [31:0] bin_read0_0_out;
  logic bin_read0_0_done;
  logic [3:0] add1_left;
  logic [3:0] add1_right;
  logic [3:0] add1_out;
  logic [31:0] add0_left;
  logic [31:0] add0_right;
  logic [31:0] add0_out;
  logic [31:0] B_read0_0_in;
  logic B_read0_0_write_en;
  logic B_read0_0_clk;
  logic [31:0] B_read0_0_out;
  logic B_read0_0_done;
  logic [3:0] B0_addr0;
  logic [31:0] B0_write_data;
  logic B0_write_en;
  logic B0_clk;
  logic [31:0] B0_read_data;
  logic B0_done;
  logic [31:0] A_read0_0_in;
  logic A_read0_0_write_en;
  logic A_read0_0_clk;
  logic [31:0] A_read0_0_out;
  logic A_read0_0_done;
  logic [3:0] A0_addr0;
  logic [31:0] A0_write_data;
  logic A0_write_en;
  logic A0_clk;
  logic [31:0] A0_read_data;
  logic A0_done;
  logic [1:0] fsm0_in;
  logic fsm0_write_en;
  logic fsm0_clk;
  logic [1:0] fsm0_out;
  logic fsm0_done;
  logic [1:0] incr0_left;
  logic [1:0] incr0_right;
  logic [1:0] incr0_out;
  logic [2:0] fsm1_in;
  logic fsm1_write_en;
  logic fsm1_clk;
  logic [2:0] fsm1_out;
  logic fsm1_done;
  logic [2:0] incr1_left;
  logic [2:0] incr1_right;
  logic [2:0] incr1_out;
  logic [3:0] fsm2_in;
  logic fsm2_write_en;
  logic fsm2_clk;
  logic [3:0] fsm2_out;
  logic fsm2_done;
  logic [3:0] incr2_left;
  logic [3:0] incr2_right;
  logic [3:0] incr2_out;
  logic [1:0] fsm3_in;
  logic fsm3_write_en;
  logic fsm3_clk;
  logic [1:0] fsm3_out;
  logic fsm3_done;
  
  // Subcomponent Instances
  std_mem_d1 #(32, 1, 1) v0 (
      .addr0(v0_addr0),
      .write_data(v0_write_data),
      .write_en(v0_write_en),
      .clk(clk),
      .read_data(v0_read_data),
      .done(v0_done)
  );
  
  std_mult_pipe #(32) mult_pipe0 (
      .left(mult_pipe0_left),
      .right(mult_pipe0_right),
      .go(mult_pipe0_go),
      .clk(clk),
      .out(mult_pipe0_out),
      .done(mult_pipe0_done)
  );
  
  std_le #(4) le0 (
      .left(le0_left),
      .right(le0_right),
      .out(le0_out)
  );
  
  std_reg #(4) i0 (
      .in(i0_in),
      .write_en(i0_write_en),
      .clk(clk),
      .out(i0_out),
      .done(i0_done)
  );
  
  std_reg #(32) dot_0 (
      .in(dot_0_in),
      .write_en(dot_0_write_en),
      .clk(clk),
      .out(dot_0_out),
      .done(dot_0_done)
  );
  
  std_const #(4, 1) const4 (
      .out(const4_out)
  );
  
  std_const #(1, 0) const3 (
      .out(const3_out)
  );
  
  std_const #(1, 0) const2 (
      .out(const2_out)
  );
  
  std_const #(4, 7) const1 (
      .out(const1_out)
  );
  
  std_const #(4, 0) const0 (
      .out(const0_out)
  );
  
  std_reg #(32) bin_read0_0 (
      .in(bin_read0_0_in),
      .write_en(bin_read0_0_write_en),
      .clk(clk),
      .out(bin_read0_0_out),
      .done(bin_read0_0_done)
  );
  
  std_add #(4) add1 (
      .left(add1_left),
      .right(add1_right),
      .out(add1_out)
  );
  
  std_add #(32) add0 (
      .left(add0_left),
      .right(add0_right),
      .out(add0_out)
  );
  
  std_reg #(32) B_read0_0 (
      .in(B_read0_0_in),
      .write_en(B_read0_0_write_en),
      .clk(clk),
      .out(B_read0_0_out),
      .done(B_read0_0_done)
  );
  
  std_mem_d1 #(32, 8, 4) B0 (
      .addr0(B0_addr0),
      .write_data(B0_write_data),
      .write_en(B0_write_en),
      .clk(clk),
      .read_data(B0_read_data),
      .done(B0_done)
  );
  
  std_reg #(32) A_read0_0 (
      .in(A_read0_0_in),
      .write_en(A_read0_0_write_en),
      .clk(clk),
      .out(A_read0_0_out),
      .done(A_read0_0_done)
  );
  
  std_mem_d1 #(32, 8, 4) A0 (
      .addr0(A0_addr0),
      .write_data(A0_write_data),
      .write_en(A0_write_en),
      .clk(clk),
      .read_data(A0_read_data),
      .done(A0_done)
  );
  
  std_reg #(2) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  std_add #(2) incr0 (
      .left(incr0_left),
      .right(incr0_right),
      .out(incr0_out)
  );
  
  std_reg #(3) fsm1 (
      .in(fsm1_in),
      .write_en(fsm1_write_en),
      .clk(clk),
      .out(fsm1_out),
      .done(fsm1_done)
  );
  
  std_add #(3) incr1 (
      .left(incr1_left),
      .right(incr1_right),
      .out(incr1_out)
  );
  
  std_reg #(4) fsm2 (
      .in(fsm2_in),
      .write_en(fsm2_write_en),
      .clk(clk),
      .out(fsm2_out),
      .done(fsm2_done)
  );
  
  std_add #(4) incr2 (
      .left(incr2_left),
      .right(incr2_right),
      .out(incr2_out)
  );
  
  std_reg #(2) fsm3 (
      .in(fsm3_in),
      .write_en(fsm3_write_en),
      .clk(clk),
      .out(fsm3_out),
      .done(fsm3_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      $readmemh({ DATA, "/v0.dat" }, v0.mem);
      $readmemh({ DATA, "/B0.dat" }, B0.mem);
      $readmemh({ DATA, "/A0.dat" }, A0.mem);
  end
  
   final begin
      $writememh({ DATA, "/v0.out" }, v0.mem);
      $writememh({ DATA, "/B0.out" }, B0.mem);
      $writememh({ DATA, "/A0.out" }, A0.mem);
  end
  
  // Input / output connections
  always_comb begin
    if ((fsm3_out == 2'd2))
      done = 1'd1;
    else 
      done = '0;
    
    if ((fsm1_out == 3'd6 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      v0_addr0 = const3_out;
    else if ((fsm1_out == 3'd6 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      v0_addr0 = const2_out;
    else 
      v0_addr0 = '0;
    
    if ((fsm1_out == 3'd6 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      v0_write_data = add0_out;
    else 
      v0_write_data = '0;
    
    if ((fsm1_out == 3'd6 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      v0_write_en = 1'd1;
    else 
      v0_write_en = '0;
    
    if ((fsm1_out >= 3'd1 & fsm1_out < 3'd5 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      mult_pipe0_left = A_read0_0_out;
    else 
      mult_pipe0_left = '0;
    
    if ((fsm1_out >= 3'd1 & fsm1_out < 3'd5 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      mult_pipe0_right = B_read0_0_out;
    else 
      mult_pipe0_right = '0;
    
    if ((!mult_pipe0_done & fsm1_out >= 3'd1 & fsm1_out < 3'd5 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      mult_pipe0_go = 1'd1;
    else 
      mult_pipe0_go = '0;
    
    if ((fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      le0_left = i0_out;
    else 
      le0_left = '0;
    
    if ((fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      le0_right = const1_out;
    else 
      le0_right = '0;
    
    if ((fsm3_out == 2'd0 & !i0_done & go))
      i0_in = const0_out;
    else if ((fsm1_out == 3'd7 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      i0_in = add1_out;
    else 
      i0_in = '0;
    
    if ((fsm3_out == 2'd0 & !i0_done & go | fsm1_out == 3'd7 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      i0_write_en = 1'd1;
    else 
      i0_write_en = '0;
    
    if ((fsm1_out == 3'd5 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      dot_0_in = bin_read0_0_out;
    else 
      dot_0_in = '0;
    
    if ((fsm1_out == 3'd5 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      dot_0_write_en = 1'd1;
    else 
      dot_0_write_en = '0;
    
    if ((fsm1_out >= 3'd1 & fsm1_out < 3'd5 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      bin_read0_0_in = mult_pipe0_out;
    else 
      bin_read0_0_in = '0;
    
    if ((fsm1_out >= 3'd1 & fsm1_out < 3'd5 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      bin_read0_0_write_en = mult_pipe0_done;
    else 
      bin_read0_0_write_en = '0;
    
    if ((fsm1_out == 3'd7 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      add1_left = i0_out;
    else 
      add1_left = '0;
    
    if ((fsm1_out == 3'd7 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      add1_right = const4_out;
    else 
      add1_right = '0;
    
    if ((fsm1_out == 3'd6 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      add0_left = v0_read_data;
    else 
      add0_left = '0;
    
    if ((fsm1_out == 3'd6 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      add0_right = dot_0_out;
    else 
      add0_right = '0;
    
    if ((fsm0_out <= 2'd1 & fsm1_out == 3'd0 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      B_read0_0_in = B0_read_data;
    else 
      B_read0_0_in = '0;
    
    if ((fsm0_out <= 2'd1 & fsm1_out == 3'd0 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      B_read0_0_write_en = 1'd1;
    else 
      B_read0_0_write_en = '0;
    
    if ((fsm0_out <= 2'd1 & fsm1_out == 3'd0 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      B0_addr0 = i0_out;
    else 
      B0_addr0 = '0;
    
    if ((fsm0_out <= 2'd1 & fsm1_out == 3'd0 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      A_read0_0_in = A0_read_data;
    else 
      A_read0_0_in = '0;
    
    if ((fsm0_out <= 2'd1 & fsm1_out == 3'd0 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      A_read0_0_write_en = 1'd1;
    else 
      A_read0_0_write_en = '0;
    
    if ((fsm0_out <= 2'd1 & fsm1_out == 3'd0 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      A0_addr0 = i0_out;
    else 
      A0_addr0 = '0;
    
    if ((fsm0_out != 2'd1 & fsm1_out == 3'd0 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      fsm0_in = incr0_out;
    else if ((fsm0_out == 2'd1))
      fsm0_in = 2'd0;
    else 
      fsm0_in = '0;
    
    if ((fsm0_out != 2'd1 & fsm1_out == 3'd0 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go | fsm0_out == 2'd1))
      fsm0_write_en = 1'd1;
    else 
      fsm0_write_en = '0;
    
    if ((fsm1_out == 3'd0 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      incr0_left = 2'd1;
    else 
      incr0_left = '0;
    
    if ((fsm1_out == 3'd0 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      incr0_right = fsm0_out;
    else 
      incr0_right = '0;
    
    if ((fsm1_out != 3'd8 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      fsm1_in = incr1_out;
    else if ((fsm1_out == 3'd8))
      fsm1_in = 3'd0;
    else 
      fsm1_in = '0;
    
    if ((fsm1_out != 3'd8 & fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go | fsm1_out == 3'd8))
      fsm1_write_en = 1'd1;
    else 
      fsm1_write_en = '0;
    
    if ((fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      incr1_left = 3'd1;
    else 
      incr1_left = '0;
    
    if ((fsm2_out > 4'd0 & fsm2_out < 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      incr1_right = fsm1_out;
    else 
      incr1_right = '0;
    
    if ((fsm2_out != 4'd9 & fsm2_out != 4'd0 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      fsm2_in = incr2_out;
    else if ((fsm2_out == 4'd10))
      fsm2_in = 4'd0;
    else if ((fsm2_out == 4'd0 & !le0_out & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go | fsm2_out == 4'd9 & !le0_out & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      fsm2_in = 4'd10;
    else if ((fsm2_out == 4'd0 & le0_out & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go | fsm2_out == 4'd9 & le0_out & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      fsm2_in = 4'd1;
    else 
      fsm2_in = '0;
    
    if ((fsm2_out != 4'd9 & fsm2_out != 4'd0 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go | fsm2_out == 4'd0 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go | fsm2_out == 4'd9 & fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go | fsm2_out == 4'd10))
      fsm2_write_en = 1'd1;
    else 
      fsm2_write_en = '0;
    
    if ((fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      incr2_left = fsm2_out;
    else 
      incr2_left = '0;
    
    if ((fsm3_out == 2'd1 & !(fsm2_out == 4'd10) & go))
      incr2_right = 4'd1;
    else 
      incr2_right = '0;
    
    if ((fsm3_out == 2'd2))
      fsm3_in = 2'd0;
    else if ((fsm3_out == 2'd1 & fsm2_out == 4'd10 & go))
      fsm3_in = 2'd2;
    else if ((fsm3_out == 2'd0 & i0_done & go))
      fsm3_in = 2'd1;
    else 
      fsm3_in = '0;
    
    if ((fsm3_out == 2'd0 & i0_done & go | fsm3_out == 2'd1 & fsm2_out == 4'd10 & go | fsm3_out == 2'd2))
      fsm3_write_en = 1'd1;
    else 
      fsm3_write_en = '0;
    
  end
endmodule // end main
