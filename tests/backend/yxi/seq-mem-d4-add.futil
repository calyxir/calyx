// -b yxi
import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/binary_operators.futil";
import "primitives/memories/seq.futil";

component main() -> () {
  cells {
    @external in1 = seq_mem_d4(32,3,2,1,4,2,2,1,3);
    @external in2 = seq_mem_d4(32,3,2,1,4,2,2,1,3);
    @external out = seq_mem_d4(32,3,2,1,4,2,2,1,3);

    // Compute primitives
    add = std_add(32);
    in1_reg = std_reg(32);
    in2_reg = std_reg(32);
    in3_reg = std_reg(32);
    in4_reg = std_reg(32);

    // Counter
    i = std_reg(2);
    j = std_reg(2);
    k = std_reg(1);
    l = std_reg(3);

    lt = std_lt(2);
    lt2 = std_lt(2);
    lt3 = std_lt(1);
    lt4 = std_lt(3);


    add_i = std_add(2);
    add_j = std_add(2);
    add_k = std_add(1);
    add_l = std_add(3);
  }
  wires {
    group init_i{
      i.write_en = 1'd1;
      i.in = 2'd0;
      init_i[done] = i.done;
    }
    group init_j{
      j.write_en = 1'd1;
      j.in = 2'd0;
      init_j[done] = j.done;
    }
    group init_k{
      k.write_en = 1'd1;
      k.in = 1'd0;
      init_k[done] = k.done;
    }
    group init_l{
      l.write_en = 1'd1;
      l.in = 3'd0;
      init_l[done] = l.done;
    }
    comb group i_lt {
      lt.left = i.out;
      lt.right = 2'd3;
    }
    comb group j_lt {
      lt2.left = j.out;
      lt2.right = 2'd2;
    }
    comb group k_lt {
      lt3.left = k.out;
      lt3.right = 1'd1;
    }
    comb group l_lt {
      lt4.left = l.out;
      lt4.right = 3'd4;
    }
    group read_in1{
      in1.addr0 = i.out;
      in1.addr1 = j.out;
      in1.addr2 = k.out;
      in1.addr3 = l.out;
      in1.content_en = 1'd1;
      in1_reg.write_en = in1.done;
      in1_reg.in = in1.read_data;
      read_in1[done] = in1_reg.done;
    }
    group read_in2{
      in2.addr0 = i.out;
      in2.addr1 = j.out;
      in2.addr2 = k.out;
      in2.addr3 = l.out;
      in2.content_en = 1'd1;
      in2_reg.write_en = in2.done;
      in2_reg.in = in2.read_data;
      read_in2[done] = in2_reg.done;
    }
    group update_val {
      add.left = in1_reg.out;
      add.right = in2_reg.out;
      out.addr0 = i.out;
      out.addr1 = j.out;
      out.addr2 = k.out;
      out.addr3 = l.out;
      out.content_en = 1'd1;
      out.write_en = 1'd1;
      out.write_data = add.out;
      update_val[done] = out.done;
    }
    group incr_i {
      add_i.left = i.out;
      add_i.right = 2'd1;
      i.write_en = 1'd1;
      i.in = add_i.out;
      incr_i[done] = i.done;
    }
    group incr_j {
      add_j.left = j.out;
      add_j.right = 2'd1;
      j.write_en = 1'd1;
      j.in = add_j.out;
      incr_j[done] = j.done;
    }
    group incr_k {
      add_k.left = k.out;
      add_k.right = 1'd1;
      k.write_en = 1'd1;
      k.in = add_k.out;
      incr_k[done] = k.done;
    }
    group incr_l {
      add_l.left = l.out;
      add_l.right = 3'd1;
      l.write_en = 1'd1;
      l.in = add_l.out;
      incr_l[done] = l.done;
    }
  }
  control {
    seq {
      init_i;
      while lt.out with i_lt {
        seq{
          init_j;
          while lt2.out with j_lt{
            seq{
              init_k;
              while lt3.out with k_lt{
                seq{
                  init_l;
                  while lt4.out with l_lt{
                    seq{
                      par{
                        read_in1;
                        read_in2;
                      }
                      update_val;
                      incr_l;
                    }
                  }
                  incr_k;
                }
              }
              incr_j;
            }
          }
          incr_i;
        }
      }
    }
  }
}
