// -p well-formed -p simplify-with-control -p cell-share -p dead-cell-removal -p remove-ids
import "primitives/core.futil";
import "primitives/memories/comb.futil";
component main() -> () {
  cells {
    @external(1) A0 = comb_mem_d1(32,32,6);
    A_read0_0 = std_reg(32);
    @external(1) B0 = comb_mem_d1(32,32,6);
    B_read0_0 = std_reg(32);
    @external(1) C0 = comb_mem_d1(32,32,6);
    C_read0_0 = std_reg(32);
    add0 = std_add(6);
    add1 = std_add(6);
    i0 = std_reg(6);
    i1 = std_reg(6);
    le0 = std_le(6);
    le1 = std_le(6);
  }
  wires {
    comb group cond0 {
      le0.left = i0.out;
      le0.right = 6'd31;
    }
    comb group cond1 {
      le1.left = i1.out;
      le1.right = 6'd31;
    }
    group let0<"promotable"=1> {
      i0.in = 6'd0;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"promotable"=1> {
      i1.in = 6'd0;
      i1.write_en = 1'd1;
      let1[done] = i1.done;
    }
    group upd0<"promotable"=1> {
      A_read0_0.write_en = 1'd1;
      A0.addr0 = i0.out;
      A_read0_0.in = A0.read_data;
      upd0[done] = A_read0_0.done;
    }
    group upd1<"promotable"=1> {
      C0.addr0 = i0.out;
      C0.write_en = 1'd1;
      C0.write_data = A_read0_0.out;
      upd1[done] = C0.done;
    }
    group upd2<"promotable"=1> {
      B_read0_0.write_en = 1'd1;
      B0.addr0 = i0.out;
      B_read0_0.in = B0.read_data;
      upd2[done] = B_read0_0.done;
    }
    group upd3<"promotable"=1> {
      A0.addr0 = i0.out;
      A0.write_en = 1'd1;
      A0.write_data = B_read0_0.out;
      upd3[done] = A0.done;
    }
    group upd4<"promotable"=1> {
      i0.write_en = 1'd1;
      add0.left = i0.out;
      add0.right = 6'd1;
      i0.in = add0.out;
      upd4[done] = i0.done;
    }
    group upd5<"promotable"=1> {
      C_read0_0.write_en = 1'd1;
      C0.addr0 = i1.out;
      C_read0_0.in = C0.read_data;
      upd5[done] = C_read0_0.done;
    }
    group upd6<"promotable"=1> {
      B0.addr0 = i1.out;
      B0.write_en = 1'd1;
      B0.write_data = C_read0_0.out;
      upd6[done] = B0.done;
    }
    group upd7<"promotable"=1> {
      i1.write_en = 1'd1;
      add1.left = i1.out;
      add1.right = 6'd1;
      i1.in = add1.out;
      upd7[done] = i1.done;
    }
  }
  control {
    seq {
      let0;
      while le0.out with cond0 {
        seq {
          upd0;
          par {
            upd1;
            upd2;
          }
          upd3;
          upd4;
        }
      }
      let1;
      while le1.out with cond1 {
        seq {
          upd5;
          upd6;
          upd7;
        }
      }
    }
  }
}
