import "primitives/core.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    @external A0 = std_mem_d1(32, 32, 6);
    A_read0_0 = std_reg(32);
    @external B0 = std_mem_d1(32, 32, 6);
    B_read0_0 = std_reg(32);
    @external C0 = std_mem_d1(32, 32, 6);
    add0 = std_add(6);
    i0 = std_reg(6);
    le0 = std_le(6);
    @generated comb_reg = std_reg(1);
  }
  wires {
    group let0<"static"=1> {
      i0.in = 6'd0;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"static"=1> {
      i0.in = 6'd0;
      i0.write_en = 1'd1;
      let1[done] = i0.done;
    }
    group upd0<"static"=1> {
      A_read0_0.write_en = 1'd1;
      A0.addr0 = i0.out;
      A_read0_0.in = A0.read_data;
      upd0[done] = A_read0_0.done;
    }
    group upd1<"static"=1> {
      C0.addr0 = i0.out;
      C0.write_en = 1'd1;
      C0.write_data = A_read0_0.out;
      upd1[done] = C0.done;
    }
    group upd2<"static"=1> {
      B_read0_0.write_en = 1'd1;
      B0.addr0 = i0.out;
      B_read0_0.in = B0.read_data;
      upd2[done] = B_read0_0.done;
    }
    group upd3<"static"=1> {
      A0.addr0 = i0.out;
      A0.write_en = 1'd1;
      A0.write_data = B_read0_0.out;
      upd3[done] = A0.done;
    }
    group upd4<"static"=1> {
      i0.write_en = 1'd1;
      add0.left = i0.out;
      add0.right = 6'd1;
      i0.in = add0.out;
      upd4[done] = i0.done;
    }
    group upd5<"static"=1> {
      A_read0_0.write_en = 1'd1;
      C0.addr0 = i0.out;
      A_read0_0.in = C0.read_data;
      upd5[done] = A_read0_0.done;
    }
    group upd6<"static"=1> {
      B0.addr0 = i0.out;
      B0.write_en = 1'd1;
      B0.write_data = A_read0_0.out;
      upd6[done] = B0.done;
    }
    group upd7<"static"=1> {
      i0.write_en = 1'd1;
      add0.left = i0.out;
      add0.right = 6'd1;
      i0.in = add0.out;
      upd7[done] = i0.done;
    }
    static<1> group cond00 {
      le0.left = i0.out;
      le0.right = 6'd31;
      comb_reg.in = le0.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group cond10 {
      le0.left = i0.out;
      le0.right = 6'd31;
      comb_reg.in = le0.out;
      comb_reg.write_en = 1'd1;
    }
    comb group cond0 {
      le0.left = i0.out;
      le0.right = 6'd31;
    }
    comb group cond1 {
      le0.left = i0.out;
      le0.right = 6'd31;
    }
  }
  control {
    seq {
      let0;
      seq {
        cond00;
        while comb_reg.out {
          seq {
            seq {
              upd0;
              par {
                upd1;
                upd2;
              }
              upd3;
              upd4;
            }
            cond00;
          }
        }
      }
      let1;
      seq {
        cond10;
        while comb_reg.out {
          seq {
            seq {
              upd5;
              upd6;
              upd7;
            }
            cond10;
          }
        }
      }
    }
  }
}
