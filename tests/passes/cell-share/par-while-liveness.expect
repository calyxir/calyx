import "primitives/core.futil";
import "primitives/memories/comb.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    @external a_src0 = comb_mem_d1(32, 8, 4);
    a_src_read0_0 = std_reg(32);
    @external a_tar0 = comb_mem_d1(32, 8, 4);
    add0 = std_add(4);
    add1 = std_add(4);
    @external b_src0 = comb_mem_d1(32, 8, 4);
    b_src_read0_0 = std_reg(32);
    @external b_tar0 = comb_mem_d1(32, 8, 4);
    @external c_src0 = comb_mem_d1(32, 8, 4);
    @external c_tar0 = comb_mem_d1(32, 8, 4);
    const0 = std_const(4, 0);
    const1 = std_const(4, 7);
    const2 = std_const(4, 1);
    const3 = std_const(4, 0);
    const4 = std_const(4, 7);
    const5 = std_const(4, 1);
    i0 = std_reg(4);
    i1 = std_reg(4);
    le0 = std_le(4);
    le1 = std_le(4);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(1);
  }
  wires {
    group let0<"promotable"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"promotable"=1> {
      i1.in = const3.out;
      i1.write_en = 1'd1;
      let1[done] = i1.done;
    }
    group let2<"promotable"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let2[done] = i0.done;
    }
    group upd0<"promotable"=1> {
      a_src_read0_0.write_en = 1'd1;
      a_src0.addr0 = i0.out;
      a_src_read0_0.in = a_src0.read_data;
      upd0[done] = a_src_read0_0.done ? 1'd1;
    }
    group upd1<"promotable"=1> {
      a_tar0.addr0 = i0.out;
      a_tar0.write_en = 1'd1;
      a_tar0.write_data = a_src_read0_0.out;
      upd1[done] = a_tar0.done ? 1'd1;
    }
    group upd2<"promotable"=1> {
      i0.write_en = 1'd1;
      add0.left = i0.out;
      add0.right = const2.out;
      i0.in = add0.out;
      upd2[done] = i0.done ? 1'd1;
    }
    group upd3<"promotable"=1> {
      b_src_read0_0.write_en = 1'd1;
      b_src0.addr0 = i1.out;
      b_src_read0_0.in = b_src0.read_data;
      upd3[done] = b_src_read0_0.done ? 1'd1;
    }
    group upd4<"promotable"=1> {
      b_tar0.addr0 = i1.out;
      b_tar0.write_en = 1'd1;
      b_tar0.write_data = b_src_read0_0.out;
      upd4[done] = b_tar0.done ? 1'd1;
    }
    group upd5<"promotable"=1> {
      i1.write_en = 1'd1;
      add1.left = i1.out;
      add1.right = const5.out;
      i1.in = add1.out;
      upd5[done] = i1.done ? 1'd1;
    }
    group upd6<"promotable"=1> {
      a_src_read0_0.write_en = 1'd1;
      c_tar0.addr0 = i0.out;
      a_src_read0_0.in = c_tar0.read_data;
      upd6[done] = a_src_read0_0.done ? 1'd1;
    }
    group upd7<"promotable"=1> {
      c_src0.addr0 = i0.out;
      c_src0.write_en = 1'd1;
      c_src0.write_data = a_src_read0_0.out;
      upd7[done] = c_src0.done ? 1'd1;
    }
    group upd8<"promotable"=1> {
      i0.write_en = 1'd1;
      add0.left = i0.out;
      add0.right = const2.out;
      i0.in = add0.out;
      upd8[done] = i0.done ? 1'd1;
    }
    static<1> group cond00 {
      le0.left = i0.out;
      le0.right = const1.out;
      comb_reg.in = le0.out;
      comb_reg.write_en = 1'd1;
    }
    static<1> group cond10 {
      le1.left = i1.out;
      le1.right = const4.out;
      comb_reg0.in = le1.out;
      comb_reg0.write_en = 1'd1;
    }
    static<1> group cond20 {
      le0.left = i0.out;
      le0.right = const1.out;
      comb_reg.in = le0.out;
      comb_reg.write_en = 1'd1;
    }
    comb group cond0 {
      le0.left = i0.out;
      le0.right = const1.out;
    }
    comb group cond1 {
      le1.left = i1.out;
      le1.right = const4.out;
    }
    comb group cond2 {
      le0.left = i0.out;
      le0.right = const1.out;
    }
  }
  control {
    seq {
      par {
        seq {
          let0;
          seq {
            cond00;
            while comb_reg.out {
              seq {
                seq {
                  upd0;
                  upd1;
                  upd2;
                }
                cond00;
              }
            }
          }
        }
        seq {
          let1;
          seq {
            cond10;
            while comb_reg0.out {
              seq {
                seq {
                  upd3;
                  upd4;
                  upd5;
                }
                cond10;
              }
            }
          }
        }
      }
      let2;
      seq {
        cond20;
        while comb_reg.out {
          seq {
            seq {
              upd6;
              upd7;
              upd8;
            }
            cond20;
          }
        }
      }
    }
  }
}
