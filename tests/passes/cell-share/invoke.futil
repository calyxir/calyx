// -p well-formed -p simplify-with-control -p cell-share -p dead-cell-removal -p remove-ids
import "primitives/core.futil";
import "primitives/memories/comb.futil";

component add(left: 32, right: 32) -> (out: 32) {
  cells {
    adder = std_add(32);
    outpt = std_reg(32);
  }
  wires {
    group do_add {
      adder.left = left;
      adder.right = right;
      outpt.in = adder.out;
      outpt.write_en = 1'd1;
      do_add[done] = outpt.done;
    }
  }
  control {
    seq {
      do_add;
    }
  }
}

component main() -> () {
  cells {
    x = std_reg(32);
    @external add_x = std_add(32);

    my_add = add();
    y = std_reg(32);
  }
  wires {
    group wr_x {
      x.in = 32'd1;
      x.write_en = 1'd1;
      wr_x[done] = x.done;
    }
    group rd_x {
      add_x.left = x.out;
      add_x.right = x.out;
      rd_x[done] = x.done; // XXX: This is wrong functionally
    }
    group wr_y {
      y.in = 32'd10;
      y.write_en = 1'd1;
      wr_y[done] = y.done;
    }
  }
  control {
    seq {
      wr_x;
      rd_x;
      wr_y;
      invoke my_add(left = y.out, right = y.out)();
    }
  }
}
