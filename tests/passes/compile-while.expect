import "primitives/std.lib";
component main(go: 1, clk: 1) -> (done: 1) {
  cells {
    add = prim std_add(32);
    cond_computed0 = prim std_reg(1);
    cond_stored0 = prim std_reg(1);
    done_reg0 = prim std_reg(1);
    lt = prim std_lt(32);
  }
  
  wires {
    group cond<> {
      lt.right = 32'd5;
      lt.left = 32'd1;
      cond[done] = 1'd1;
    }
    group do_add<> {
      add.right = 32'd4;
      add.left = 32'd4;
      do_add[done] = 1'd1;
    }
    group while0<> {
      cond[go] = !(cond_computed0.out) ? 1'd1;
      cond_computed0.in = (cond[go] & cond[done]) ? 1'd1;
      cond_computed0.write_en = (cond[go] & cond[done]) ? 1'd1;
      cond_stored0.in = (cond[go] & cond[done]) ? lt.out;
      cond_stored0.write_en = (cond[go] & cond[done]) ? 1'd1;
      do_add[go] = (cond_stored0.out & cond_computed0.out & !(do_add[done])) ? 1'd1;
      cond_computed0.in = (cond_stored0.out & cond_computed0.out & do_add[done]) ? 1'd0;
      cond_computed0.write_en = (cond_stored0.out & cond_computed0.out & do_add[done]) ? 1'd1;
      done_reg0.in = (cond_computed0.out & !(cond_stored0.out)) ? 1'd1;
      done_reg0.write_en = (cond_computed0.out & !(cond_stored0.out)) ? 1'd1;
      while0[done] = done_reg0.out ? 1'd1;
      cond_computed0.in = (cond_computed0.out & !(cond_stored0.out)) ? 1'd0;
      cond_computed0.write_en = (cond_computed0.out & !(cond_stored0.out)) ? 1'd1;
    }
    done_reg0.in = done_reg0.out ? 1'd0;
    done_reg0.write_en = done_reg0.out ? 1'd1;
  }
  
  control {
    while0;
  }
}