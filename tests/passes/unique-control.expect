import "primitives/core.futil";
import "primitives/memories/comb.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    @external mem1 = comb_mem_d1(32, 1, 1);
    @external mem2 = comb_mem_d1(32, 1, 1);
    val1 = std_reg(32);
    val2 = std_reg(32);
    add = std_add(32);
    sub = std_sub(32);
  }
  wires {
    group write1 {
      mem1.addr0 = 1'd0;
      mem1.write_en = 1'd1;
      mem1.write_data = val1.out;
      write1[done] = mem1.done;
    }
    group read1 {
      mem1.addr0 = 1'd0;
      val1.in = mem1.read_data;
      val1.write_en = 1'd1;
      read1[done] = val1.done;
    }
    group upd1 {
      add.left = val1.out;
      add.right = 32'd4;
      val1.in = add.out;
      val1.write_en = 1'd1;
      upd1[done] = val1.done;
    }
    group write2 {
      mem2.addr0 = 1'd0;
      mem2.write_en = 1'd1;
      mem2.write_data = val2.out;
      write2[done] = mem2.done;
    }
    group read2 {
      mem2.addr0 = 1'd0;
      val2.in = mem2.read_data;
      val2.write_en = 1'd1;
      read2[done] = val2.done;
    }
    group upd2 {
      sub.left = val1.out;
      sub.right = 32'd1;
      val2.in = sub.out;
      val2.write_en = 1'd1;
      upd2[done] = val2.done;
    }
    group read1UG {
      mem1.addr0 = 1'd0;
      val1.in = mem1.read_data;
      val1.write_en = 1'd1;
      read1UG[done] = val1.done;
    }
    group upd1UG {
      add.left = val1.out;
      add.right = 32'd4;
      val1.in = add.out;
      val1.write_en = 1'd1;
      upd1UG[done] = val1.done;
    }
    group write1UG {
      mem1.addr0 = 1'd0;
      mem1.write_en = 1'd1;
      mem1.write_data = val1.out;
      write1UG[done] = mem1.done;
    }
    group read2UG {
      mem2.addr0 = 1'd0;
      val2.in = mem2.read_data;
      val2.write_en = 1'd1;
      read2UG[done] = val2.done;
    }
    group upd2UG {
      sub.left = val1.out;
      sub.right = 32'd1;
      val2.in = sub.out;
      val2.write_en = 1'd1;
      upd2UG[done] = val2.done;
    }
    group write2UG {
      mem2.addr0 = 1'd0;
      mem2.write_en = 1'd1;
      mem2.write_data = val2.out;
      write2UG[done] = mem2.done;
    }
  }
  control {
    par {
      seq {
        read1UG;
        upd1UG;
        write1UG;
      }
      seq {
        read2UG;
        upd2UG;
        write2UG;
      }
    }
  }
}
