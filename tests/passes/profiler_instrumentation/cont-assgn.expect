import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/binary_operators.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    @external mem = comb_mem_d1(32, 1, 1);
    r = std_reg(32);
    ans = std_reg(32);
    id = identity();
    @control @generated @protected read___main_group_probe = std_wire(1);
    @control @generated @protected r___read___main_primitive_probe = std_wire(1);
    @control @generated @protected write___main_group_probe = std_wire(1);
    @control @generated @protected mem___write___main_primitive_probe = std_wire(1);
  }
  wires {
    group read {
      mem.addr0 = 1'd0;
      r.in = mem.read_data;
      r.write_en = 1'd1;
      read[done] = r.done;
      read___main_group_probe.in = 1'd1;
      r___read___main_primitive_probe.in = 1'd1;
    }
    group write {
      mem.addr0 = 1'd0;
      mem.write_en = 1'd1;
      mem.write_data = r.out;
      write[done] = mem.done;
      write___main_group_probe.in = 1'd1;
      mem___write___main_primitive_probe.in = 1'd1;
    }
  }
  control {
    seq {
      read;
      invoke id(
        in_1 = r.out
      )(
        out = ans.in
      );
      write;
    }
  }
}
component identity(in_1: 32, @go go: 1, @clk clk: 1, @reset reset: 1) -> (out: 32, @done done: 1) {
  cells {
    r = std_reg(32);
    add = std_add(1);
    @control @generated @protected save___identity_group_probe = std_wire(1);
    @control @generated @protected r___save___identity_primitive_probe = std_wire(1);
    @control @generated @protected add___identity_contprimitive_probe = std_wire(1);
  }
  wires {
    group save {
      r.in = in_1;
      r.write_en = 1'd1;
      save[done] = r.done;
      save___identity_group_probe.in = 1'd1;
      r___save___identity_primitive_probe.in = 1'd1;
    }
    add.left = 1'd1;
    add.right = 1'd0;
    out = r.out;
    add___identity_contprimitive_probe.in = 1'd1;
  }
  control {
    save;
  }
}
