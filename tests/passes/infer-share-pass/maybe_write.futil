//-p infer-share

import "primitives/core.futil";
import "primitives/binary_operators.futil";

component no_share(in: 32) -> (out: 32) {
  cells {
    r = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
    lt = std_lt(32);
    add = std_add(32);
  }
  wires {
    comb group setlt{
      lt.left = in; 
      lt.right = 32'd20; 
    }
    comb group rlt10{
      lt.left = r.out; 
      lt.right = 32'd10; 
    }
    group wrD{
      d.in = 32'd2; 
      d.write_en = 1'd1; 
      wrD[done] = d.done;
    }
    group wrC{
      c.write_en = lt.out; 
      c.in = 32'd20; 
      d.write_en = !lt.out ? 1'd1;
      d.in = 32'd15; 
      wrC[done] = c.done | d.done ? 1'd1; 
    }
    group wrR{
      r.write_en = 1'd1; 
      r.in = 32'd1; 
      wrR[done] = r.done; 
    }
    group incrR{
      add.left = r.out;
      add.right = 32'd1; 
      r.in = add.out; 
      r.write_en = 1'd1;  
      incrR[done] = r.done; 
    } 
    group addRC{
      add.left = r.out; 
      add.right = c.out; 
      c.write_en = 1'd1; 
      c.in = add.out; 
      addRC[done] = c.done;
    }
    group wrB{
      add.left = c.out; 
      add.right = in; 
      b.write_en = 1'd1; 
      b.in = add.out; 
      wrB[done] = b.done; 
    }
    out = b.out;
  }
  control {
    seq{
      if lt.out with setlt{
        wrD;
      }
      wrC;
      wrR;
      while lt.out with rlt10{
        seq{
          incrR;
          addRC;
        }
      }
      wrB;
    }
  }
}

component share(in: 32) -> (out: 32) {
  cells {
    r = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
    lt = std_lt(32);
    add = std_add(32);
  }
  wires {
    comb group setlt{
      lt.left = in; 
      lt.right = 32'd20; 
    }
    comb group rlt10{
      lt.left = r.out; 
      lt.right = 32'd10; 
    }
    group wrD{
      d.in = 32'd2; 
      d.write_en = 1'd1; 
      wrD[done] = d.done;
    }
    group wrC{
      c.write_en = 1'd1; 
      c.in = 32'd20; 
      wrC[done] = c.done; 
    }
    group wrR{
      r.write_en = 1'd1; 
      r.in = 32'd1; 
      wrR[done] = r.done; 
    }
    group incrR{
      add.left = r.out;
      add.right = 32'd1; 
      r.in = add.out; 
      r.write_en = 1'd1;  
      incrR[done] = r.done; 
    } 
    group addRC{
      add.left = r.out; 
      add.right = c.out; 
      c.write_en = 1'd1; 
      c.in = add.out; 
      addRC[done] = c.done;
    }
    group wrB{
      add.left = c.out; 
      add.right = in; 
      b.write_en = 1'd1; 
      b.in = add.out; 
      wrB[done] = b.done; 
    }
    out = b.out;
  }
  control {
    seq{
      if lt.out with setlt{
        wrD;
      }
      wrC;
      wrR;
      while lt.out with rlt10{
        seq{
          incrR;
          addRC;
        }
      }
      wrB;
    }
  }
}

component main() -> () {
  cells {
  }
  wires {
  }
  control {
  }
}
