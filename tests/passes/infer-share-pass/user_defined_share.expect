import "primitives/core.futil";
import "primitives/binary_operators.futil";
component share<"state_share"=1>(in: 32, @go go: 1, @clk clk: 1, @reset reset: 1) -> (out1: 32, out2: 32, @done done: 1) {
  cells {
    a = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
    add_32 = std_add(32);
  }
  wires {
    group wrC {
      c.write_en = 1'd1;
      c.in = b.out;
      wrC[done] = c.done;
    }
    group wrA {
      add_32.left = c.out;
      add_32.right = in;
      a.write_en = 1'd1;
      a.in = add_32.out;
      wrA[done] = a.done;
    }
    group wrB {
      add_32.left = in;
      add_32.right = 32'd20;
      b.write_en = 1'd1;
      b.in = add_32.out;
      wrB[done] = b.done;
    }
    out1 = a.out;
    out2 = b.out;
  }

  control {
    @NODE_ID(0) seq {
      @NODE_ID wrB;
      @NODE_ID(2) wrC;
      @NODE_ID(3) wrA;
    }
  }
}
component uses_share<"state_share"=1>(in: 32, @go go: 1, @clk clk: 1, @reset reset: 1) -> (out: 32, @done done: 1) {
  cells {
    s = share();
  }
  wires {
    group A {
      s.go = 1'd1;
      s.in = 32'd10;
      A[done] = s.done;
    }
    out = s.out1;
  }

  control {
    @NODE_ID(0) A;
  }
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
  }
  wires {
  }

  control {}
}
