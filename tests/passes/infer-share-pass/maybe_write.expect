import "primitives/core.futil";
import "primitives/binary_operators.futil";
component no_share(in: 32, @go go: 1, @clk clk: 1, @reset reset: 1) -> (out: 32, @done done: 1) {
  cells {
    r = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
    lt = std_lt(32);
    add = std_add(32);
  }
  wires {
    group wrD {
      d.in = 32'd2;
      d.write_en = 1'd1;
      wrD[done] = d.done;
    }
    group wrC {
      c.write_en = lt.out;
      c.in = 32'd20;
      d.write_en = !lt.out ? 1'd1;
      d.in = 32'd15;
      wrC[done] = c.done | d.done ? 1'd1;
    }
    group wrR {
      r.write_en = 1'd1;
      r.in = 32'd1;
      wrR[done] = r.done;
    }
    group incrR {
      add.left = r.out;
      add.right = 32'd1;
      r.in = add.out;
      r.write_en = 1'd1;
      incrR[done] = r.done;
    }
    group addRC {
      add.left = r.out;
      add.right = c.out;
      c.write_en = 1'd1;
      c.in = add.out;
      addRC[done] = c.done;
    }
    group wrB {
      add.left = c.out;
      add.right = in;
      b.write_en = 1'd1;
      b.in = add.out;
      wrB[done] = b.done;
    }
    comb group setlt {
      lt.left = in;
      lt.right = 32'd20;
    }
    comb group rlt10 {
      lt.left = r.out;
      lt.right = 32'd10;
    }
    out = b.out;
  }

  control {
    @NODE_ID(0) seq {
      @BEGIN_ID @END_ID(3) if lt.out with setlt {
        @NODE_ID(2) wrD;
      }
      @NODE_ID(4) wrC;
      @NODE_ID(5) wrR;
      @NODE_ID(6) while lt.out with rlt10 {
        @NODE_ID(7) seq {
          @NODE_ID(8) incrR;
          @NODE_ID(9) addRC;
        }
      }
      @NODE_ID(10) wrB;
    }
  }
}
component share<"state_share"=1>(in: 32, @go go: 1, @clk clk: 1, @reset reset: 1) -> (out: 32, @done done: 1) {
  cells {
    r = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
    lt = std_lt(32);
    add = std_add(32);
  }
  wires {
    group wrD {
      d.in = 32'd2;
      d.write_en = 1'd1;
      wrD[done] = d.done;
    }
    group wrC {
      c.write_en = 1'd1;
      c.in = 32'd20;
      wrC[done] = c.done;
    }
    group wrR {
      r.write_en = 1'd1;
      r.in = 32'd1;
      wrR[done] = r.done;
    }
    group incrR {
      add.left = r.out;
      add.right = 32'd1;
      r.in = add.out;
      r.write_en = 1'd1;
      incrR[done] = r.done;
    }
    group addRC {
      add.left = r.out;
      add.right = c.out;
      c.write_en = 1'd1;
      c.in = add.out;
      addRC[done] = c.done;
    }
    group wrB {
      add.left = c.out;
      add.right = in;
      b.write_en = 1'd1;
      b.in = add.out;
      wrB[done] = b.done;
    }
    comb group setlt {
      lt.left = in;
      lt.right = 32'd20;
    }
    comb group rlt10 {
      lt.left = r.out;
      lt.right = 32'd10;
    }
    out = b.out;
  }

  control {
    @NODE_ID(0) seq {
      @BEGIN_ID @END_ID(3) if lt.out with setlt {
        @NODE_ID(2) wrD;
      }
      @NODE_ID(4) wrC;
      @NODE_ID(5) wrR;
      @NODE_ID(6) while lt.out with rlt10 {
        @NODE_ID(7) seq {
          @NODE_ID(8) incrR;
          @NODE_ID(9) addRC;
        }
      }
      @NODE_ID(10) wrB;
    }
  }
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
  }
  wires {
  }

  control {}
}
