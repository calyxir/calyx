//-p infer-share

// add_5 checks for a situation when r is written but never read.
// count checks for situation when a read and write occur in the same group

import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/binary_operators.futil";


component add_5(in: 32) -> (out: 32) {
  cells {
    r = std_reg(32);
    add_32 = std_add(32);
  }
  wires {
    group A {
      add_32.left = in;
      add_32.right = 32'd5;
      r.in = add_32.out;
      r.write_en = 1'd1;
      A[done] = r.done;
    }
    out = r.out;
  }
  control {
    A;
  }
}

component count(in: 32) -> (out: 32) {
  cells {
    r = std_reg(32);
    add_32 = std_add(32);
  }
  wires {
    group A {
      add_32.left = r.out;
      add_32.right = 32'd1;
      r.in = add_32.out;
      r.write_en = 1'd1;
      A[done] = r.done;
    }
    out = r.out;
  }
  control {
    A;
  }
}

component main() -> () {
  cells {
  }
  wires {
  }
  control {
  }
}
