//-p infer-share

// share checks for the situation when there are writes to registers, but
// each time they are dominated by a read.
// non_share checks the same the same situation, except this time there is one read,
// in group wrC, that is not dominated by a write and is therefore not shareable.

import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/binary_operators.futil";

component share(in: 32) -> (out1: 32, out2: 32) {
  cells {
    a = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
    add_32 = std_add(32);
  }
  wires {
    group wrC {
      c.write_en = 1'd1;
      c.in = b.out;
      wrC[done] = c.done;
    }
    group wrA{
      add_32.left = c.out;
      add_32.right = in;
      a.write_en = 1'd1;
      a.in = add_32.out;
      wrA[done] = a.done;
    }
    group wrB{
      add_32.left = in;
      add_32.right = 32'd20;
      b.write_en = 1'd1;
      b.in = add_32.out;
      wrB[done] = b.done;
    }
    out1 = a.out;
    out2 = b.out;
  }
  control {
    seq{
      wrB;
      wrC;
      wrA;
    }
  }
}

component non_share(in: 32) -> (out1: 32, out2: 32) {
  cells {
    a = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
    add_32 = std_add(32);
  }
  wires {
    group wrC {
      c.write_en = 1'd1;
      c.in = b.out;
      wrC[done] = c.done;
    }
    group wrA{
      add_32.left = c.out;
      add_32.right = in;
      a.write_en = 1'd1;
      a.in = add_32.out;
      wrA[done] = a.done;
    }
    group wrB{
      add_32.left = in;
      add_32.right = 32'd20;
      b.write_en = 1'd1;
      b.in = add_32.out;
      wrB[done] = b.done;
    }
    out1 = a.out;
    out2 = b.out;
  }
  control {
    seq{
      wrC;
      par{
        wrB;
        wrA;
      }
    }
  }
}



component main() -> () {
  cells {
  }
  wires {
  }
  control {
  }
}
