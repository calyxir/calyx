import "primitives/core.futil";
import "primitives/memories/comb.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    a_reg = std_reg(32);
    b_reg = std_reg(32);
    d_reg = std_reg(32);
    e_reg = std_reg(32);
    lt = std_lt(32);
  }
  wires {
    group a {
      a_reg.write_en = 1'd1;
      a_reg.in = 32'd4;
      a[done] = a_reg.done;
    }
    group b {
      b_reg.write_en = 1'd1;
      b_reg.in = 32'd4;
      b[done] = b_reg.done;
    }
    group d {
      d_reg.write_en = 1'd1;
      d_reg.in = 32'd4;
      d[done] = d_reg.done;
    }
    group e {
      e_reg.write_en = 1'd1;
      e_reg.in = 32'd4;
      e[done] = e_reg.done;
    }
    group aUG {
      a_reg.write_en = 1'd1;
      a_reg.in = 32'd4;
      aUG[done] = a_reg.done;
    }
    group bUG {
      b_reg.write_en = 1'd1;
      b_reg.in = 32'd4;
      bUG[done] = b_reg.done;
    }
    group dUG {
      d_reg.write_en = 1'd1;
      d_reg.in = 32'd4;
      dUG[done] = d_reg.done;
    }
    group eUG {
      e_reg.write_en = 1'd1;
      e_reg.in = 32'd4;
      eUG[done] = e_reg.done;
    }
    group bUG0 {
      b_reg.write_en = 1'd1;
      b_reg.in = 32'd4;
      bUG0[done] = b_reg.done;
    }
    comb group cond {
      lt.left = a_reg.out;
      lt.right = 32'd8;
    }
  }
  control {
    seq {
      aUG;
      bUG;
      par {
        while lt.out with cond {
          seq {
            dUG;
            eUG;
          }
        }
        bUG0;
      }
    }
  }
}
---STDERR---
{
  "main": {
    "enables": {
      "aUG": "main.-0",
      "bUG": "main.-1",
      "bUG0": "main.-2-1",
      "dUG": "main.-2-0-b-0",
      "eUG": "main.-2-0-b-1"
    },
    "pars": [
      "main.-2-"
    ]
  }
}{
  "main": {
    "aUG": 0,
    "bUG": 0,
    "bUG0": 2,
    "dUG": 1,
    "eUG": 1
  }
}