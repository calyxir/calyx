import "primitives/core.futil";
import "primitives/memories/comb.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    @data r = std_reg(32);
    @data add = std_add(32);
    @generated fsm = std_reg(2);
    @generated do_update_go = std_wire(1);
    @generated do_update_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    done = tdcc_done.out ? 1'd1;
    fsm.write_en = fsm.out == 2'd2 | fsm.out == 2'd0 & do_update_done.out & tdcc_go.out | fsm.out == 2'd1 & do_update_done.out & tdcc_go.out ? 1'd1;
    fsm.clk = clk;
    fsm.reset = reset;
    fsm.in = fsm.out == 2'd0 & do_update_done.out & tdcc_go.out ? 2'd1;
    fsm.in = fsm.out == 2'd2 ? 2'd0;
    fsm.in = fsm.out == 2'd1 & do_update_done.out & tdcc_go.out ? 2'd2;
    do_update_done.in = r.done;
    do_update_go.in = !do_update_done.out & fsm.out == 2'd0 & tdcc_go.out | !do_update_done.out & fsm.out == 2'd1 & tdcc_go.out ? 1'd1;
    r.write_en = do_update_go.out ? 1'd1;
    r.clk = clk;
    r.reset = reset;
    r.in = do_update_go.out ? add.out;
    tdcc_go.in = go;
    add.left = do_update_go.out ? 32'd1;
    add.right = do_update_go.out ? r.out;
    tdcc_done.in = fsm.out == 2'd2 ? 1'd1;
  }
  control {}
}
