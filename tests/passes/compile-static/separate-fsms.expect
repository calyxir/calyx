import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/pipelined.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    a = std_reg(2);
    b = std_reg(2);
    c = std_reg(2);
    d = std_reg(2);
    @generated fsm = std_reg(1);
    @generated adder = std_add(1);
    @generated ud = undef(1);
    @generated fsm0 = std_reg(1);
    @generated adder0 = std_add(1);
    @generated ud0 = undef(1);
    @generated fsm1 = std_reg(1);
    @generated adder1 = std_add(1);
    @generated ud1 = undef(1);
    @generated fsm2 = std_reg(1);
    @generated adder2 = std_add(1);
    @generated ud2 = undef(1);
    @generated fsm3 = std_reg(3);
    @generated adder3 = std_add(3);
    @generated ud3 = undef(1);
    @generated signal_reg = std_reg(1);
    @generated signal_reg0 = std_reg(1);
    @generated signal_reg1 = std_reg(1);
  }
  wires {
    group early_reset_A {
      a.in = 2'd0;
      a.write_en = fsm.out == 1'd0 ? 1'd1;
      adder.left = fsm.out;
      adder.right = 1'd1;
      fsm.write_en = 1'd1;
      fsm.in = !(fsm.out == 1'd0) ? adder.out;
      fsm.in = fsm.out == 1'd0 ? 1'd0;
      early_reset_A[done] = ud.out;
    }
    group early_reset_C {
      c.in = 2'd0;
      c.write_en = fsm0.out == 1'd0 ? 1'd1;
      adder0.left = fsm0.out;
      adder0.right = 1'd1;
      fsm0.write_en = 1'd1;
      fsm0.in = !(fsm0.out == 1'd0) ? adder0.out;
      fsm0.in = fsm0.out == 1'd0 ? 1'd0;
      early_reset_C[done] = ud0.out;
    }
    group early_reset_D {
      d.in = 2'd0;
      d.write_en = fsm1.out == 1'd0 ? 1'd1;
      adder1.left = fsm1.out;
      adder1.right = 1'd1;
      fsm1.write_en = 1'd1;
      fsm1.in = !(fsm1.out == 1'd0) ? adder1.out;
      fsm1.in = fsm1.out == 1'd0 ? 1'd0;
      early_reset_D[done] = ud1.out;
    }
    group early_reset_B {
      b.in = 2'd0;
      b.write_en = fsm2.out == 1'd0 ? 1'd1;
      adder2.left = fsm2.out;
      adder2.right = 1'd1;
      fsm2.write_en = 1'd1;
      fsm2.in = !(fsm2.out == 1'd0) ? adder2.out;
      fsm2.in = fsm2.out == 1'd0 ? 1'd0;
      early_reset_B[done] = ud2.out;
    }
    group early_reset_run_A_and_D {
      early_reset_A[go] = fsm3.out < 3'd4 ? 1'd1;
      early_reset_D[go] = fsm3.out >= 3'd4 & fsm3.out < 3'd6 ? 1'd1;
      adder3.left = fsm3.out;
      adder3.right = 3'd1;
      fsm3.write_en = 1'd1;
      fsm3.in = !(fsm3.out == 3'd5) ? adder3.out;
      fsm3.in = fsm3.out == 3'd5 ? 3'd0;
      early_reset_run_A_and_D[done] = ud3.out;
    }
    group wrapper_early_reset_run_A_and_D {
      early_reset_run_A_and_D[go] = 1'd1;
      signal_reg.write_en = fsm3.out == 3'd0 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm3.out == 3'd0 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_run_A_and_D[done] = fsm3.out == 3'd0 & signal_reg.out ? 1'd1;
    }
    group wrapper_early_reset_B {
      early_reset_B[go] = 1'd1;
      signal_reg0.write_en = fsm2.out == 1'd0 & !signal_reg0.out ? 1'd1;
      signal_reg0.in = fsm2.out == 1'd0 & !signal_reg0.out ? 1'd1;
      wrapper_early_reset_B[done] = fsm2.out == 1'd0 & signal_reg0.out ? 1'd1;
    }
    group wrapper_early_reset_C {
      early_reset_C[go] = 1'd1;
      signal_reg1.write_en = fsm0.out == 1'd0 & !signal_reg1.out ? 1'd1;
      signal_reg1.in = fsm0.out == 1'd0 & !signal_reg1.out ? 1'd1;
      wrapper_early_reset_C[done] = fsm0.out == 1'd0 & signal_reg1.out ? 1'd1;
    }
    signal_reg.write_en = fsm3.out == 3'd0 & signal_reg.out ? 1'd1;
    signal_reg.in = fsm3.out == 3'd0 & signal_reg.out ? 1'd0;
    signal_reg0.write_en = fsm2.out == 1'd0 & signal_reg0.out ? 1'd1;
    signal_reg0.in = fsm2.out == 1'd0 & signal_reg0.out ? 1'd0;
    signal_reg1.write_en = fsm0.out == 1'd0 & signal_reg1.out ? 1'd1;
    signal_reg1.in = fsm0.out == 1'd0 & signal_reg1.out ? 1'd0;
  }
  control {
    par {
      par {
        wrapper_early_reset_run_A_and_D;
        wrapper_early_reset_B;
      }
      wrapper_early_reset_C;
    }
  }
}
