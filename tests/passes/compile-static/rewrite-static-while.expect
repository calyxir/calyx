import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/pipelined.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    p = std_reg(3);
    incr = std_add(3);
    l = std_lt(3);
    r = std_reg(1);
    @generated fsm = std_reg(2);
    @generated adder = std_add(2);
    @generated adder0 = std_add(2);
    @generated adder1 = std_add(2);
    @generated ud = undef(1);
    @generated ud0 = undef(1);
    @generated ud1 = undef(1);
    @generated signal_reg = std_reg(1);
  }
  wires {
    group early_reset_B {
      l.left = p.out;
      l.right = 3'd6;
      r.in = l.out;
      r.write_en = 1'd1;
      adder0.left = fsm.out;
      adder0.right = 2'd1;
      fsm.write_en = 1'd1;
      fsm.in = !(fsm.out == 2'd0) ? adder0.out;
      fsm.in = fsm.out == 2'd0 ? 2'd0;
      early_reset_B[done] = ud0.out;
    }
    group early_reset_static_seq {
      incr.left = fsm.out == 2'd0 ? p.out;
      incr.right = fsm.out == 2'd0 ? 3'd1;
      p.in = fsm.out == 2'd0 ? incr.out;
      p.write_en = fsm.out == 2'd0 ? 1'd1;
      l.left = fsm.out == 2'd1 ? p.out;
      l.right = fsm.out == 2'd1 ? 3'd6;
      r.in = fsm.out == 2'd1 ? l.out;
      r.write_en = fsm.out == 2'd1 ? 1'd1;
      adder1.left = fsm.out;
      adder1.right = 2'd1;
      fsm.write_en = 1'd1;
      fsm.in = !(fsm.out == 2'd1) ? adder1.out;
      fsm.in = fsm.out == 2'd1 ? 2'd0;
      early_reset_static_seq[done] = ud1.out;
    }
    group wrapper_early_reset_B {
      early_reset_B[go] = 1'd1;
      signal_reg.write_en = fsm.out == 2'd0 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 2'd0 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_B[done] = fsm.out == 2'd0 & signal_reg.out ? 1'd1;
    }
    group while_wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      while_wrapper_early_reset_static_seq[done] = !r.out & fsm.out == 2'd0 ? 1'd1;
    }
    signal_reg.write_en = fsm.out == 2'd0 & signal_reg.out ? 1'd1;
    signal_reg.in = fsm.out == 2'd0 & signal_reg.out ? 1'd0;
  }
  control {
    seq {
      wrapper_early_reset_B;
      while_wrapper_early_reset_static_seq;
    }
  }
}
