import "primitives/core.futil";
import "primitives/memories/comb.futil";
static<1> component do_add(left: 32, right: 32, @go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    add = std_add(32);
    r = std_reg(32);
  }
  wires {
    r.write_en = go ? 1'd1;
    add.right = go ? right;
    add.left = go ? left;
    r.in = go ? add.out;
  }
  control {}
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    a = do_add();
    @generated ud = undef(1);
    @generated signal_reg = std_reg(1);
  }
  wires {
    group early_reset_static_invoke {
      a.go = 1'd1;
      a.left = 32'd5;
      a.right = 32'd6;
      early_reset_static_invoke[done] = ud.out;
    }
    group wrapper_early_reset_static_invoke {
      early_reset_static_invoke[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_invoke[done] = signal_reg.out ? 1'd1;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
  }
  control {
    wrapper_early_reset_static_invoke;
  }
}
