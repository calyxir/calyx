import "primitives/core.futil";
import "primitives/memories/comb.futil";
static<6> component do_add(left: 32, right: 32, @go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    add = std_add(32);
    r = std_reg(32);
    @generated fsm = std_reg(3);
    @generated adder = std_add(3);
    @generated fsm0 = std_reg(1);
    @generated adder0 = std_add(1);
    @generated ud = undef(1);
  }
  wires {
    group early_reset_a {
      r.write_en = 1'd1;
      add.right = right;
      add.left = r.out;
      r.in = add.out;
      adder0.left = fsm0.out;
      adder0.right = 1'd1;
      fsm0.write_en = 1'd1;
      fsm0.in = !(fsm0.out == 1'd0) ? adder0.out;
      fsm0.in = fsm0.out == 1'd0 ? 1'd0;
      early_reset_a[done] = ud.out;
    }
    r.write_en = go & fsm.out == 3'd0 ? 1'd1;
    add.right = go & fsm.out == 3'd0 ? right;
    add.left = go & fsm.out == 3'd0 ? left;
    r.in = go & fsm.out == 3'd0 ? add.out;
    early_reset_a[go] = fsm.out >= 3'd1 & fsm.out < 3'd6 ? 1'd1;
    adder.left = fsm.out;
    adder.right = 3'd1;
    fsm.write_en = 1'd1;
    fsm.in = go & fsm.out == 3'd0 ? adder.out;
    fsm.in = !(fsm.out == 3'd0) & !(fsm.out == 3'd5) ? adder.out;
    fsm.in = fsm.out == 3'd5 ? 3'd0;
    fsm.in = !go & fsm.out == 3'd0 ? 3'd0;
  }
  control {}
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    a = do_add();
    @generated fsm = std_reg(3);
    @generated adder = std_add(3);
    @generated ud = undef(1);
    @generated signal_reg = std_reg(1);
  }
  wires {
    group early_reset_static_invoke {
      a.go = fsm.out == 3'd0 ? 1'd1;
      a.left = 32'd5;
      a.right = 32'd6;
      adder.left = fsm.out;
      adder.right = 3'd1;
      fsm.write_en = 1'd1;
      fsm.in = !(fsm.out == 3'd5) ? adder.out;
      fsm.in = fsm.out == 3'd5 ? 3'd0;
      early_reset_static_invoke[done] = ud.out;
    }
    group wrapper_early_reset_static_invoke {
      early_reset_static_invoke[go] = 1'd1;
      signal_reg.write_en = fsm.out == 3'd0 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 3'd0 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_invoke[done] = fsm.out == 3'd0 & signal_reg.out ? 1'd1;
    }
    signal_reg.write_en = fsm.out == 3'd0 & signal_reg.out ? 1'd1;
    signal_reg.in = fsm.out == 3'd0 & signal_reg.out ? 1'd0;
  }
  control {
    wrapper_early_reset_static_invoke;
  }
}
