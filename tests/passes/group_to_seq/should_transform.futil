//-p validate -p group2seq -p dead-assign-removal

import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/binary_operators.futil";
component main<"state_share"=1>(in:32) -> () {
  cells {
    A = std_reg(32);
    B = std_reg(32);
    x = std_reg(32);
    b = std_reg(32);
    add = std_add(32);
    mult_pipe0 = std_mult_pipe(32);
  }
  wires {
    group two {
      A.write_en = !A.done ? 1'd1;
      A.in = 32'd4;
      mult_pipe0.go = A.done;
      mult_pipe0.left = A.out;
      mult_pipe0.right = 32'd4;
      two[done] = mult_pipe0.done;
    }
    group write_a{
      A.in = 32'd2;
      A.write_en = 1'd1;
      write_a[done] = A.done;
    }
    group write_bmult{
      B.in = 32'd2;
      B.write_en = A.done & !B.done ? 1'd1;
      mult_pipe0.go = B.done;
      mult_pipe0.left = B.out;
      mult_pipe0.right = B.out;
      write_bmult[done] = mult_pipe0.done;
    }
    group chain_plus_adders {
      add.left = 32'd2;
      add.right = 32'd4;
      x.write_en = b.done;
      x.in = b.out;
      b.in = add.out;
      b.write_en = !b.done? 1'd1;
      chain_plus_adders[done] = x.done;
    }
  }
  control {
    seq{
      two;
      par{
        write_a;
        write_bmult;
      }
      chain_plus_adders;
    }
  }
}