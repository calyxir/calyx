import "primitives/core.futil";
import "primitives/binary_operators.futil";
component main<"state_share"=1>(in: 32, @go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    add = std_add(32);
    bin_read0_0 = std_reg(32);
    r = std_reg(32);
    A = std_reg(32);
    B = std_reg(32);
    mult_pipe0 = std_mult_pipe(32);
    x_0 = std_reg(32);
  }
  wires {
    group beg_spl_two {
      A.in = 32'd4;
      A.write_en = 1'd1;
      beg_spl_two[done] = A.done;
    }
    group end_spl_two {
      mult_pipe0.right = 32'd4;
      mult_pipe0.left = A.out;
      mult_pipe0.go = 1'd1;
      end_spl_two[done] = mult_pipe0.done;
    }
    group beg_spl_write_bmult {
      B.write_en = A.done & !B.done ? 1'd1;
      B.in = 32'd2;
      beg_spl_write_bmult[done] = B.done;
    }
    group end_spl_write_bmult {
      mult_pipe0.right = B.out;
      mult_pipe0.left = B.out;
      mult_pipe0.go = 1'd1;
      end_spl_write_bmult[done] = mult_pipe0.done;
    }
    group writeAB {
      B.in = 32'd7;
      B.write_en = 1'd1;
      A.in = 32'd5;
      A.write_en = 1'd1;
      writeAB[done] = A.done & B.done ? 1'd1;
    }
    group chain_plus_adders {
      bin_read0_0.write_en = !bin_read0_0.done ? 1'd1;
      x_0.in = bin_read0_0.out;
      x_0.write_en = bin_read0_0.done;
      add.right = 32'd4;
      add.left = 32'd2;
      bin_read0_0.in = add.out;
      chain_plus_adders[done] = x_0.done;
    }
    group write_a {
      A.write_en = 1'd1;
      A.in = 32'd2;
      write_a[done] = A.done;
    }
  }

  control {
    seq {
      writeAB;
      seq {
        beg_spl_two;
        end_spl_two;
      }
      chain_plus_adders;
      par {
        write_a;
        seq {
          beg_spl_write_bmult;
          end_spl_write_bmult;
        }
      }
    }
  }
}
