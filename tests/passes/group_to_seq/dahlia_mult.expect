import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/binary_operators.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    @external A0 = comb_mem_d1(32, 2, 2);
    A_read0_0 = std_reg(32);
    A_read1_0 = std_reg(32);
    @external B0 = comb_mem_d1(32, 2, 2);
    B_read0_0 = std_reg(32);
    B_read1_0 = std_reg(32);
    bin_read0_0 = std_reg(32);
    bin_read1_0 = std_reg(32);
    const0 = std_const(2, 0);
    const1 = std_const(2, 0);
    const2 = std_const(2, 0);
    const3 = std_const(2, 0);
    mult_pipe0 = std_mult_pipe(32);
    mult_pipe1 = std_mult_pipe(32);
    x_0 = std_reg(32);
    y_0 = std_reg(32);
  }
  wires {
    group beg_spl_let0 {
      mult_pipe0.right = B_read0_0.out;
      mult_pipe0.left = A_read0_0.out;
      mult_pipe0.go = 1'd1;
      beg_spl_let0[done] = mult_pipe0.done;
    }
    group end_spl_let0 {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = 1'd1;
      end_spl_let0[done] = bin_read0_0.done;
    }
    group beg_spl_let2 {
      mult_pipe1.right = B_read1_0.out;
      mult_pipe1.left = A_read1_0.out;
      mult_pipe1.go = 1'd1;
      beg_spl_let2[done] = mult_pipe1.done;
    }
    group end_spl_let2 {
      bin_read1_0.in = mult_pipe1.out;
      bin_read1_0.write_en = 1'd1;
      end_spl_let2[done] = bin_read1_0.done;
    }
    group let1<"promotable"=1> {
      x_0.write_en = 1'd1;
      x_0.in = bin_read0_0.out;
      let1[done] = x_0.done;
    }
    group let3<"promotable"=1> {
      y_0.write_en = 1'd1;
      y_0.in = bin_read1_0.out;
      let3[done] = y_0.done;
    }
    group upd0<"promotable"=1> {
      A0.addr0 = const0.out;
      A_read0_0.in = A0.read_data;
      A_read0_0.write_en = 1'd1;
      upd0[done] = A_read0_0.done;
    }
    group upd1<"promotable"=1> {
      B0.addr0 = const1.out;
      B_read0_0.in = B0.read_data;
      B_read0_0.write_en = 1'd1;
      upd1[done] = B_read0_0.done;
    }
    group upd2<"promotable"=1> {
      A0.addr0 = const2.out;
      A_read1_0.in = A0.read_data;
      A_read1_0.write_en = 1'd1;
      upd2[done] = A_read1_0.done;
    }
    group upd3<"promotable"=1> {
      B0.addr0 = const3.out;
      B_read1_0.in = B0.read_data;
      B_read1_0.write_en = 1'd1;
      upd3[done] = B_read1_0.done;
    }
  }
  control {
    seq {
      par {
        upd0;
        upd1;
      }
      seq {
        beg_spl_let0;
        end_spl_let0;
      }
      let1;
      par {
        upd2;
        upd3;
      }
      seq {
        beg_spl_let2;
        end_spl_let2;
      }
      let3;
    }
  }
}
