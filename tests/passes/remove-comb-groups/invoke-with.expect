import "primitives/core.futil";
import "primitives/binary_operators.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    m = std_mult_pipe(32);
    a0 = std_add(32);
    a1 = std_add(32);
    r = std_reg(32);
    @generated comb_reg = std_reg(32);
    @generated comb_reg0 = std_reg(32);
  }
  wires {
    group do_adds0<"static"=1> {
      a0.left = 32'd1;
      a0.right = 32'd2;
      a1.left = 32'd3;
      a1.right = 32'd4;
      comb_reg.in = a0.out;
      comb_reg.write_en = 1'd1;
      comb_reg0.in = a1.out;
      comb_reg0.write_en = 1'd1;
      do_adds0[done] = comb_reg.done & comb_reg0.done ? 1'd1;
    }
  }

  control {
    seq {
      seq {
        do_adds0;
        invoke m(
          left = comb_reg.out,
          right = comb_reg0.out
        )();
      }
      seq {
        do_adds0;
        invoke m(
          left = r.out,
          right = comb_reg0.out
        )();
      }
    }
  }
}
