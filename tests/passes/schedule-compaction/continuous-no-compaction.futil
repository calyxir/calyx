// -p validate -p static-promotion -p dead-group-removal

import "primitives/core.futil";
import "primitives/memories/comb.futil";

component main() -> (out: 8) {
  cells {
    r0 = std_reg(8);
    r1 = std_reg(8);
    r2 = std_reg(8);
    add = std_add(8);
    add1 = std_add(8);
    ud = undef(1);
  }
  wires {
    group write_r0<"promotable"=1> {
      r0.write_en = 1'd1;
      r0.in = 8'd1;
      write_r0[done] = r0.done;
    }
    group write_r1<"promotable"=1> {
      r1.write_en = 1'd1;
      r1.in = add.out;
      write_r1[done] = r1.done;
    }
    group write_add1<"promotable"=1> {
      add1.left = 8'd1;
      add1.right = 8'd4;
      write_add1[done] = ud.out;
    }
    r2.in = add1.out;
    add.left = r0.out;
    add.right = 8'd1;
    out = r1.out;
  }
  control {
    @promotable(4) seq {
      @promotable(2) seq {
        @promotable write_r0;
        // Continuous assignments to add.left and add.right prevent compation.
        @promotable write_r1;
      }
      @promotable(2) seq {
        @promotable write_r0;
        // Continuous assignment r2.in = add1.out prevents compaction.
        // This is overly conservative.
        @promotable write_add1;
      }
    }
  }
}