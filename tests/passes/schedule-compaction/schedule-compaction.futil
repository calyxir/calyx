// -p validate -p static-promotion -p dead-group-removal
// for control operators under static seq,
// we consider the subsequent control operator B to have data dependency on
// prior operator A in the following three cases:
// 1. B writes to a cell A reads from
// 2. B reads from a cell A writes to
// 3. B writes to a cell A writes to
// As such, we can draw the following dependency graph for the control program:
//    A       C
//   | \      /
//   |  \    /
//   |   \  /
//   |    \
//   |   / \
//   |  /   \
//   | /     \
//   B        D
// So we can compact the execution schedule to respect this data dependency
import "primitives/core.futil";
import "primitives/memories/comb.futil";

component main () -> () {
  cells {
    a_reg = std_reg(32);
    b_reg = std_reg(32);
    c_reg = std_reg(32);
    d_reg = std_reg(32);
    a = std_add(32);
    ud = undef(1);
  }

  wires {
    group A<"promotable"=1> {
      a_reg.in = 32'd5;
      a_reg.write_en = 1'd1;
      A[done] = a_reg.done;
    }

    group C<"promotable"=10> {
      c_reg.in = 32'd10;
      c_reg.write_en = 1'd1;
      C[done] = ud.out;
    }

    group B<"promotable"=1> {
      a.left = a_reg.out;
      a.right = c_reg.out;
      b_reg.in = a.out;
      b_reg.write_en = 1'd1;
      B[done] = b_reg.done;
    }

    group D<"promotable"=10> {
      d_reg.in = a_reg.out;
      d_reg.write_en = 1'd1;
      D[done] = ud.out;
    }
  }

  control {
    @promotable(22) seq {
      @promotable A;
      @promotable(10) C;
      @promotable B;
      @promotable(10) D;
    }
  }
}