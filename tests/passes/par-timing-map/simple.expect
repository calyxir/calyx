This maps ids of par blocks to " par timing maps ", which map enable ids to intervals (i,j), that signify the clock cycles the group is active for, 
 relative to the start of the given par block
======== Map for Component "comp" ========
====Par Node ID: 6====
Group Node ID: 8 -- [(1, 2)]
Group Node ID: 9 -- [(3, 3)]
Group Node ID: 11 -- [(1, 1)]
Group Node ID: 12 -- [(2, 3)]
}
This maps ids of par blocks to " par timing maps ", which map enable ids to intervals (i,j), that signify the clock cycles the group is active for, 
 relative to the start of the given par block
======== Map for Component "main" ========
====Par Node ID: 0====
Group Node ID: 3 -- [(1, 2)]
Group Node ID: 4 -- [(1, 3)]
Group Node ID: 6 -- [(4, 6)]
Group Node ID: 7 -- [(1, 4)]
}
import "primitives/core.futil";
component comp(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    lt = std_lt(32);
  }
  wires {
    group A {
    }
    group B {
    }
    group C {
    }
    group D {
    }
    group E {
    }
    group F {
    }
    group G {
    }
  }

  control {
    @NODE_ID(0) if lt.out {
      @NODE_ID seq {
        @NODE_ID(2) A;
        @NODE_ID(3) B;
      }
    } else {
      @NODE_ID(4) seq {
        @NODE_ID(5) C;
        @static(3) @NODE_ID(6) par {
          @static(3) @NODE_ID(7) seq {
            @static(2) @NODE_ID(8) D;
            @static @NODE_ID(9) E;
          }
          @static(3) @NODE_ID(10) seq {
            @static @NODE_ID(11) F;
            @static(2) @NODE_ID(12) G;
          }
        }
      }
    }
  }
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    lt = std_lt(32);
  }
  wires {
    group A {
    }
    group B {
    }
    group C {
    }
    group D {
    }
  }

  control {
    @static(8) @NODE_ID(0) par {
      @static(8) @NODE_ID seq {
        @static(3) @NODE_ID(2) if lt.out {
          @static(2) @NODE_ID(3) A;
        } else {
          @static(3) @NODE_ID(4) B;
        }
        @static(3) @NODE_ID(6) C;
      }
      @static(4) @NODE_ID(7) D;
    }
  }
}
