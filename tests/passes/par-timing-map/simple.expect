This maps ids of par blocks to " cell timing maps ", which map cells to intervals (i,j), that signify the clock cycles the group is active for, 
 relative to the start of the given par block
============ Map for Component "comp" ============
========Par Node ID: 6 ========
====Child/Thread ID: 7 ====
Id { id: "e" } -- [(3, 3)]
Id { id: "d" } -- [(1, 2)]
====Child/Thread ID: 10 ====
Id { id: "f" } -- [(1, 1)]
Id { id: "g" } -- [(2, 3)]


This maps ids of par blocks to " cell timing maps ", which map cells to intervals (i,j), that signify the clock cycles the group is active for, 
 relative to the start of the given par block
============ Map for Component "main" ============
========Par Node ID: 0 ========
====Child/Thread ID: 1 ====
Id { id: "b" } -- [(1, 3)]
Id { id: "a" } -- [(1, 2)]
Id { id: "c" } -- [(4, 6)]
====Child/Thread ID: 7 ====
Id { id: "d" } -- [(1, 4)]


import "primitives/core.futil";
component comp(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    lt = std_lt(32);
    a = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
    e = std_reg(32);
    f = std_reg(32);
    g = std_reg(32);
  }
  wires {
    group A {
      d.write_en = 1'd1;
      d.in = 32'd2;
      A[done] = d.done;
    }
    group B {
      d.write_en = 1'd1;
      d.in = 32'd2;
      B[done] = d.done;
    }
    group C {
      d.write_en = 1'd1;
      d.in = 32'd2;
      C[done] = d.done;
    }
    group D {
      d.write_en = 1'd1;
      d.in = 32'd2;
      D[done] = d.done;
    }
    group E {
      d.write_en = 1'd1;
      d.in = 32'd2;
      E[done] = d.done;
    }
    group F {
      f.write_en = 1'd1;
      f.in = 32'd2;
      F[done] = f.done;
    }
    group G {
      f.write_en = 1'd1;
      f.in = 32'd2;
      G[done] = f.done;
    }
  }

  control {
    @NODE_ID(0) if lt.out {
      @NODE_ID seq {
        @NODE_ID(2) A;
        @NODE_ID(3) B;
      }
    } else {
      @NODE_ID(4) seq {
        @NODE_ID(5) C;
        @static(3) @NODE_ID(6) par {
          @static(3) @NODE_ID(7) seq {
            @static(2) @NODE_ID(8) D;
            @static @NODE_ID(9) E;
          }
          @static(3) @NODE_ID(10) seq {
            @static @NODE_ID(11) F;
            @static(2) @NODE_ID(12) G;
          }
        }
      }
    }
  }
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    lt = std_lt(32);
    a = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
  }
  wires {
    group A {
      a.write_en = 1'd1;
      a.in = 32'd2;
      A[done] = a.done;
    }
    group B {
      a.write_en = 1'd1;
      a.in = 32'd2;
      B[done] = a.done;
    }
    group C {
      a.write_en = 1'd1;
      a.in = 32'd2;
      C[done] = a.done;
    }
    group D {
      d.write_en = 1'd1;
      d.in = 32'd2;
      D[done] = d.done;
    }
  }

  control {
    @static(8) @NODE_ID(0) par {
      @static(8) @NODE_ID seq {
        @static(3) @NODE_ID(2) if lt.out {
          @static(2) @NODE_ID(3) A;
        } else {
          @static(3) @NODE_ID(4) B;
        }
        @static(3) @NODE_ID(6) C;
      }
      @static(4) @NODE_ID(7) D;
    }
  }
}
