// -p cell-share -x cell-share:print-par-timing=<err>
import "primitives/core.futil";
import "primitives/memories/comb.futil";
component comp(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    lt = std_lt(32);
    a = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
    e = std_reg(32);
    f = std_reg(32);
    g = std_reg(32);
  }
  wires {
    group A{
      a.write_en = 1'd1;
      a.in = 32'd2;
      A[done] = a.done;
    }
    group B{
      b.write_en = 1'd1;
      b.in = 32'd2;
      B[done] = b.done;
    }
    group C{
      c.write_en = 1'd1;
      c.in = 32'd2;
      C[done] = c.done;
    }
    static<2> group D {
      d.write_en = 1'd1;
      d.in = 32'd2;
    }
    static<1> group E {
      e.write_en = 1'd1;
      e.in = 32'd2;
    }
    static<1> group F {
      f.write_en = 1'd1;
      f.in = 32'd2;
    }
    static<2> group G  {
      g.write_en = 1'd1;
      g.in = 32'd2;
    }
  }

  control {
    if lt.out {
      seq {A; B;}
    }
    else{
      seq{
        C;
        static par {
          static seq { D; E; }
          static seq { F; G; }
        }
      }
    }
  }
}

component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    lt = std_lt(32);
    a = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
  }
  wires {
    static<2> group A {
      a.write_en = 1'd1;
      a.in = 32'd2;
    }
    static<3> group B {
      b.write_en = 1'd1;
      b.in = 32'd2;
    }
    static<3> group C {
      c.write_en = 1'd1;
      c.in = 32'd2;
    }
    static<4> group D {
      d.write_en = 1'd1;
      d.in = 32'd2;
    }
  }
  control {
    static par {
      static seq {
        static if lt.out {
          A;
        }
        else{
          B;
        }
        C;
      }
      D;
    }
  }
}