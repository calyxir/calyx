// -p cell-share -x cell-share:print_par_timing
import "primitives/core.futil";
component comp(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    lt = std_lt(32);
    a = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
    e = std_reg(32);
    f = std_reg(32);
    g = std_reg(32);
  }
  wires {
    group A{
      a.write_en = 1'd1; 
      a.in = 32'd2; 
      A[done] = a.done;
    }
    group B{
      b.write_en = 1'd1; 
      b.in = 32'd2; 
      B[done] = b.done;
    }
    group C{
      c.write_en = 1'd1; 
      c.in = 32'd2; 
      C[done] = c.done;  
    }
    static group D <2> {
      d.write_en = 1'd1; 
      d.in = 32'd2; 
    }
    static group E <1>{
      e.write_en = 1'd1; 
      e.in = 32'd2; 
    }
    static group F<1> {
      f.write_en = 1'd1; 
      f.in = 32'd2; 
    }
    static group G <2> {
      g.write_en = 1'd1; 
      g.in = 32'd2; 
    }
  }

  control {
    if lt.out {
      seq {A; B;}
    }
    else{
      seq{
        C; 
        static par {
          static seq { D; E; }
          static seq { F; G; }
        } 
      }
    }
  }
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    lt = std_lt(32);
    a = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
  }
  wires {
    static group A <2> {
      a.write_en = 1'd1; 
      a.in = 32'd2; 
    }
    static group B <3> {
      b.write_en = 1'd1; 
      b.in = 32'd2; 
    }
    static group C <3> {
      c.write_en = 1'd1; 
      c.in = 32'd2; 
    }
    static group D <4>{
      d.write_en = 1'd1; 
      d.in = 32'd2; 
    }
  }

  control {
    static par {
      static seq {
        static if lt.out {
          A;
        }
        else{
          B; 
        }
        C; 
      }
      D; 
    }
  }
}