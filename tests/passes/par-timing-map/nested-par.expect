This maps ids of par blocks to " cell timing maps ", which map cells to intervals (i,j), that signify the clock cycles the group is active for, 
 relative to the start of the given par block
============ Map for Component "main" ============
========Par Node ID: 0 ========
====Child/Thread ID: 1 ====
Id { id: "b" } -- [(4, 8)]
Id { id: "a" } -- [(0, 4)]
Id { id: "c" } -- [(8, 12)]
====Child/Thread ID: 5 ====
Id { id: "e" } -- [(1, 5)]
Id { id: "d" } -- [(0, 1), (9, 10)]
Id { id: "f" } -- [(5, 9)]
Id { id: "h" } -- [(3, 5)]
Id { id: "g" } -- [(1, 3)]
====Child/Thread ID: 15 ====
Id { id: "j" } -- [(1, 2), (3, 4), (5, 6), (7, 8)]
Id { id: "i" } -- [(0, 1), (2, 3), (4, 5), (6, 7)]

========Par Node ID: 7 ========
====Child/Thread ID: 8 ====
Id { id: "e" } -- [(0, 4)]
Id { id: "f" } -- [(4, 8)]
====Child/Thread ID: 11 ====
Id { id: "h" } -- [(2, 4)]
Id { id: "g" } -- [(0, 2)]


import "primitives/core.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    lt = std_lt(32);
    a = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
    e = std_reg(32);
    f = std_reg(32);
    g = std_reg(32);
    h = std_reg(32);
    i = std_reg(32);
    j = std_reg(32);
  }
  wires {
    static group A<4> {
      a.write_en = 1'd1;
      a.in = 32'd2;
    }
    static group B<4> {
      a.write_en = 1'd1;
      a.in = 32'd2;
    }
    static group C<4> {
      a.write_en = 1'd1;
      a.in = 32'd2;
    }
    static group D<1> {
      d.write_en = 1'd1;
      d.in = 32'd2;
    }
    static group E<4> {
      d.write_en = 1'd1;
      d.in = 32'd2;
    }
    static group F<4> {
      d.write_en = 1'd1;
      d.in = 32'd2;
    }
    static group G<2> {
      g.write_en = 1'd1;
      g.in = 32'd2;
    }
    static group H<2> {
      g.write_en = 1'd1;
      g.in = 32'd2;
    }
    static group I<1> {
      i.write_en = 1'd1;
      i.in = 32'd2;
    }
    static group J<1> {
      i.write_en = 1'd1;
      i.in = 32'd2;
    }
  }

  control {
    @NODE_ID(0) static par <12> {
      @NODE_ID static seq <12> {
        @NODE_ID(2) A;
        @NODE_ID(3) B;
        @NODE_ID(4) C;
      }
      @NODE_ID(5) static seq <10> {
        @NODE_ID(6) D;
        @NODE_ID(7) static par <8> {
          @NODE_ID(8) static seq <8> {
            @NODE_ID(9) E;
            @NODE_ID(10) F;
          }
          @NODE_ID(11) static seq <4> {
            @NODE_ID(12) G;
            @NODE_ID(13) H;
          }
        }
        @NODE_ID(14) D;
      }
      @NODE_ID(15) static repeat 4 {
        @NODE_ID(16) static seq <2> {
          @NODE_ID(17) I;
          @NODE_ID(18) J;
        }
      }
    }
  }
}
