import "primitives/core.futil";
import "primitives/memories/comb.futil";
component foo(base: 32, @go go: 1, @clk clk: 1, @reset reset: 1) -> (out: 32, @done done: 1) {
  cells {
    r1 = std_reg(32);
    r2 = std_reg(32);
    r3 = std_reg(32);
  }
  wires {
    group upd3<"promotable"=1> {
      r3.in = base;
      r3.write_en = 1'd1;
      upd3[done] = r3.done;
    }
    group upd2<"promotable"=1> {
      r2.in = r3.out;
      r2.write_en = 1'd1;
      upd2[done] = r2.done;
    }
    group upd1<"promotable"=1> {
      r1.in = r2.out;
      r1.write_en = 1'd1;
      upd1[done] = r1.done;
    }
  }
  control {
    seq {
      upd3;
      upd2;
      upd1;
    }
  }
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    a = std_reg(2);
    b = std_reg(2);
    foo_inst = foo();
  }
  wires {
    group A<"promotable"=1> {
      a.in = 2'd0;
      a.write_en = 1'd1;
      A[done] = a.done;
    }
    group B<"promotable"=1> {
      b.in = 2'd1;
      b.write_en = 1'd1;
      B[done] = b.done;
    }
    group F {
      foo_inst.go = 1'd1;
      F[done] = foo_inst.done;
    }
  }
  control {
    seq {
      A;
      F;
      B;
    }
  }
}
