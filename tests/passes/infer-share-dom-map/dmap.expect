The numbers in the domination map refer to the BEGIN_ID, END_ID, and NODE_ID attributes that are attached to each non-empty control statement when the domination map is built. To see which ID's refer to which control statement, look at the Calyx Program, which should be printed along with the map when it is printed.
Domination Map for component "example"  {
Group: 1 -- Dominators: [1]
Group: 2 -- Dominators: [1, 2]
Group: 3 -- Dominators: [1, 2, 3]
Group: 5 -- Dominators: [1, 2, 3, 5]
Group: 7 -- Dominators: [1, 2, 3, 5, 7]
Group: 9 -- Dominators: [1, 2, 3, 5, 9]
Group: 10 -- Dominators: [1, 2, 3, 5, 9, 10]
Group: 11 -- Dominators: [1, 2, 3, 5, 9, 10, 11]
Group: 13 -- Dominators: [1, 2, 3, 5, 13]
Group: 14 -- Dominators: [1, 2, 3, 5, 14]
Group: 15 -- Dominators: [1, 2, 3, 5, 15]
Group: 16 -- Dominators: [1, 2, 3, 16]
Group: 17 -- Dominators: [1, 2, 3, 17]
Group: 18 -- Dominators: [1, 2, 3, 5, 15, 16, 17, 18]
}
import "primitives/core.futil";
component example<"state_share"=1>(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    lt = std_lt(4);
  }
  wires {
    group P0 {
    }
    group P1 {
    }
    group P2 {
    }
    group A {
    }
    group L {
    }
    group M {
    }
    group O {
    }
    group Q {
    }
    group R {
    }
    group X {
    }
    group Y {
    }
    group Z {
    }
    comb group less_than {
      lt.left = 4'd3;
      lt.right = 4'd2;
    }
  }

  control {
    @NODE_ID(0) seq {
      @NODE_ID P0;
      @NODE_ID(2) P1;
      @NODE_ID(3) P2;
      @NODE_ID(4) par {
        @BEGIN_ID(5) @END_ID(15) if lt.out with less_than {
          @NODE_ID(6) par {
            @NODE_ID(7) A;
            @NODE_ID(8) seq {
              @NODE_ID(9) L;
              @NODE_ID(10) M;
              @NODE_ID(11) O;
            }
          }
        } else {
          @NODE_ID(12) par {
            @NODE_ID(13) Q;
            @NODE_ID(14) R;
          }
        }
        @NODE_ID(16) X;
        @NODE_ID(17) Y;
      }
      @NODE_ID(18) Z;
    }
  }
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    e = example();
  }
  wires {
  }

  control {
    par {
      invoke e()();
    }
  }
}
