Domination Map {
group: 1
1
group: 2
1
2
group: 3
1
2
3
group: 4
1
2
3
4
group: 5
1
2
3
4
5
group: 8
1
2
3
4
5
8
group: 9
1
2
3
4
5
9
group: 10
1
2
3
4
5
8
9
10
group: 12
1
2
3
4
5
8
9
10
12
group: 14
1
2
3
4
5
8
9
10
12
14
group: 15
1
2
3
4
5
8
9
10
12
15
group: 17
1
2
3
4
5
8
9
10
17
group: 18
1
2
3
4
5
8
9
10
18
group: 19
1
2
3
4
5
8
9
10
19
group: 20
1
2
3
4
5
8
9
10
20
group: 22
1
2
3
4
22
group: 23
1
2
3
4
23
group: 24
1
2
3
4
24
group: 25
1
2
3
4
25
group: 26
1
2
3
4
25
26
}
import "primitives/core.futil";
component example<"state_share"=1>(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    lt = std_lt(4);
  }
  wires {
    group P0 {
    }
    group P1 {
    }
    group P2 {
    }
    group A {
    }
    group L {
    }
    group M {
    }
    group O {
    }
    group Q {
    }
    group R {
    }
    group X {
    }
    group Y {
    }
    group Z {
    }
    group A0 {
    }
    group B0 {
    }
    comb group less_than {
      lt.left = 4'd3;
      lt.right = 4'd2;
    }
  }

  control {
    @NODE_ID(0) seq {
      @NODE_ID P0;
      @NODE_ID(2) P1;
      @NODE_ID(3) P2;
      @BEGIN_ID(4) @END_ID(25) if lt.out with less_than {
        @NODE_ID(5) while lt.out with less_than {
          @NODE_ID(6) seq {
            @NODE_ID(7) par {
              @NODE_ID(8) A0;
              @NODE_ID(9) B0;
            }
            @BEGIN_ID(10) @END_ID(20) if lt.out with less_than {
              @NODE_ID(11) seq {
                @NODE_ID(12) A;
                @NODE_ID(13) par {
                  @NODE_ID(14) L;
                  @NODE_ID(15) M;
                }
              }
            } else {
              @NODE_ID(16) par {
                @NODE_ID(17) O;
                @NODE_ID(18) Q;
                @NODE_ID(19) R;
              }
            }
          }
        }
      } else {
        @NODE_ID(21) par {
          @NODE_ID(22) X;
          @NODE_ID(23) Y;
          @NODE_ID(24) Z;
        }
      }
      @NODE_ID(26) Z;
    }
  }
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    e = example();
  }
  wires {
  }

  control {
    par {
      invoke e()();
    }
  }
}
