This maps ids of par blocks to "node timing maps", which map node ids to the first interval (i,j) that the node (i.e., enable or if conditional) is active for, 
 relative to the start of the given par block
============ Map for Component "example" ============
========Par Node ID: 0========
====MUST EXECUTE====
2 -- (0, 4)
3 -- (4, 5)
4 -- (5, 6)
14 -- (12, 15)
16 -- (0, 3)
17 -- (3, 5)
18 -- (5, 8)
19 -- (8, 10)
====MAY EXECUTE====
7 -- (5, 9)
8 -- (9, 12)
10 -- (5, 6)
11 -- (6, 8)
12 -- (5, 10)
========Par Node ID: 5========
====MUST EXECUTE====
7 -- (0, 4)
8 -- (4, 7)
10 -- (0, 1)
11 -- (1, 3)
====MAY EXECUTE====


import "primitives/core.futil";
component example<"state_share"=1>(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    lt = std_lt(4);
  }
  wires {
    static group A<4> {
    }
    static group B<1> {
    }
    static group C<3> {
    }
    static group D<2> {
    }
    static group E<3> {
    }
    static group F<2> {
    }
    static group G<4> {
    }
    static group H<3> {
    }
    static group J<3> {
    }
    static group X<1> {
    }
    static group Y<2> {
    }
    static group Z<5> {
    }
    comb group less_than {
      lt.left = 4'd3;
      lt.right = 4'd2;
    }
  }

  control {
    @NODE_ID(0) static par <15> {
      @NODE_ID static seq <15> {
        @NODE_ID(2) A;
        @NODE_ID(3) B;
        @BEGIN_ID(4) @END_ID(13) static if <7> lt.out {
          @NODE_ID(5) static par <7> {
            @NODE_ID(6) static seq <7> {
              @NODE_ID(7) G;
              @NODE_ID(8) H;
            }
            @NODE_ID(9) static seq <3> {
              @NODE_ID(10) X;
              @NODE_ID(11) Y;
            }
          }
        } else {
          @NODE_ID(12) Z;
        }
        @NODE_ID(14) J;
      }
      @NODE_ID(15) static seq <10> {
        @NODE_ID(16) C;
        @NODE_ID(17) D;
        @NODE_ID(18) E;
        @NODE_ID(19) F;
      }
    }
  }
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    e = example();
  }
  wires {
  }

  control {
    invoke e()();
  }
}
