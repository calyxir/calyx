/* verilator lint_off WIDTH */
module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

// Component Signature
module main (
      input wire go,
      input wire clk,
      output wire done
  );
  
  // Structure wire declarations
  wire [31:0] add_left;
  wire [31:0] add_right;
  wire [31:0] add_out;
  wire [31:0] r_in;
  wire r_write_en;
  wire r_clk;
  wire [31:0] r_out;
  wire r_done;
  wire [31:0] fsm0_in;
  wire fsm0_write_en;
  wire fsm0_clk;
  wire [31:0] fsm0_out;
  wire fsm0_done;
  
  // Subcomponent Instances
  std_add #(32) add (
      .left(add_left),
      .right(add_right),
      .out(add_out)
  );
  
  std_reg #(32) r (
      .in(r_in),
      .write_en(r_write_en),
      .clk(clk),
      .out(r_out),
      .done(r_done)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      
  end
  
   final begin
      
  end
  
  // Input / output connections
  assign done = (fsm0_out == 32'd2) ? 1'd1 : '0;
  assign add_left = (fsm0_out == 32'd0 & !r_done & go | fsm0_out == 32'd1 & !r_done & go) ? 32'd1 : '0;
  assign add_right = (fsm0_out == 32'd0 & !r_done & go | fsm0_out == 32'd1 & !r_done & go) ? r_out : '0;
  assign r_in = (fsm0_out == 32'd0 & !r_done & go | fsm0_out == 32'd1 & !r_done & go) ? add_out : '0;
  assign r_write_en = (fsm0_out == 32'd0 & !r_done & go | fsm0_out == 32'd1 & !r_done & go) ? 1'd1 : '0;
  assign fsm0_in = (fsm0_out == 32'd1 & r_done & go) ? 32'd2 : (fsm0_out == 32'd2) ? 32'd0 : (fsm0_out == 32'd0 & r_done & go) ? 32'd1 : '0;
  assign fsm0_write_en = (fsm0_out == 32'd0 & r_done & go | fsm0_out == 32'd1 & r_done & go | fsm0_out == 32'd2) ? 1'd1 : '0;
endmodule // end main