import "primitives/std.lib";
component main(go: 1, clk: 1) -> (done: 1) {
  cells {
    const0 = prim std_const(32, 0);
    const1 = prim std_const(32, 10);
    par_done_reg0 = prim std_reg(1);
    par_done_reg1 = prim std_reg(1);
    par_reset0 = prim std_reg(1);
    x = prim std_reg(32);
    y = prim std_reg(32);
  }
  
  wires {
    x.in = (!((par_done_reg0.out | x.done)) & go) ? const0.out;
    x.write_en = (!((par_done_reg0.out | x.done)) & go) ? 1'd1;
    y.in = (!((par_done_reg1.out | y.done)) & go) ? const1.out;
    y.write_en = (!((par_done_reg1.out | y.done)) & go) ? 1'd1;
    par_reset0.in = (par_done_reg0.out & par_done_reg1.out & go) ? 1'd1;
    par_done_reg0.in = (x.done & go) ? 1'd1;
    par_done_reg1.in = (y.done & go) ? 1'd1;
    par_reset0.write_en = ((par_done_reg0.out & par_done_reg1.out & go) | par_reset0.out) ? 1'd1;
    par_done_reg0.write_en = ((x.done & go) | par_reset0.out) ? 1'd1;
    par_done_reg1.write_en = ((y.done & go) | par_reset0.out) ? 1'd1;
    par_done_reg0.in = par_reset0.out ? 1'd0;
    par_done_reg1.in = par_reset0.out ? 1'd0;
    par_reset0.in = par_reset0.out ? 1'd0;
    done = par_reset0.out ? 1'd1;
  }
  
  control {
    
  }
}