import "primitives/std.lib";
component main(go: 1, clk: 1) -> (done: 1) {
  cells {
    a0 = prim std_reg(32);
    add0 = prim std_add(32);
    add1 = prim std_add(32);
    b0 = prim std_reg(32);
    const0 = prim std_const(32, 1);
    const1 = prim std_const(32, 0);
    const2 = prim std_const(32, 1);
    const3 = prim std_const(32, 10);
    const4 = prim std_const(32, 1);
    fsm0 = prim std_reg(32);
    fsm1 = prim std_reg(32);
    fsm2 = prim std_reg(32);
    fsm3 = prim std_reg(32);
    fsm4 = prim std_reg(32);
    i0 = prim std_reg(32);
    incr0 = prim std_add(32);
    incr1 = prim std_add(32);
    incr2 = prim std_add(32);
    incr3 = prim std_add(32);
    lt0 = prim std_lt(32);
    tmp0 = prim std_reg(32);
  }
  
  wires {
    a0.in = (fsm0.out == 32'd0 & fsm4.out == 32'd0 & !(fsm0.out == 32'd2) & go) ? const0.out;
    i0.in = (fsm0.out == 32'd1 & fsm4.out == 32'd0 & !(fsm0.out == 32'd2) & go) ? const1.out;
    tmp0.in = (fsm1.out == 32'd0 & fsm2.out <= 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? b0.out;
    tmp0.write_en = (fsm1.out == 32'd0 & fsm2.out <= 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? 1'd1;
    i0.in = (fsm1.out == 32'd1 & fsm2.out <= 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? add0.out;
    add0.right = (fsm1.out == 32'd1 & fsm2.out <= 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? const4.out;
    add0.left = (fsm1.out == 32'd1 & fsm2.out <= 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? i0.out;
    add1.left = (fsm2.out == 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? a0.out;
    b0.in = (fsm2.out == 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? add1.out;
    add1.right = (fsm2.out == 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? tmp0.out;
    a0.in = (fsm2.out == 32'd3 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? tmp0.out;
    fsm4.in = (fsm4.out == 32'd0 & fsm0.out == 32'd2 & go) ? 32'd1;
    incr0.right = (fsm4.out == 32'd0 & !(fsm0.out == 32'd2) & go) ? fsm0.out;
    incr0.left = (fsm4.out == 32'd0 & !(fsm0.out == 32'd2) & go) ? 32'd1;
    b0.in = (fsm4.out == 32'd1 & !(b0.done) & go) ? const2.out;
    fsm4.in = (fsm4.out == 32'd1 & b0.done & go) ? 32'd2;
    fsm4.in = (fsm4.out == 32'd2 & fsm3.out == 32'd6 & go) ? 32'd3;
    lt0.right = (fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? const3.out;
    incr3.left = (fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? fsm3.out;
    lt0.left = (fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? i0.out;
    incr3.right = (fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? 32'd1;
    fsm0.in = (fsm0.out != 32'd2 & fsm4.out == 32'd0 & !(fsm0.out == 32'd2) & go) ? incr0.out;
    fsm1.in = (fsm1.out != 32'd2 & fsm2.out <= 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? incr1.out;
    fsm2.in = (fsm2.out != 32'd4 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? incr2.out;
    fsm3.in = (fsm3.out != 32'd5 & fsm3.out != 32'd0 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? incr3.out;
    incr2.right = (fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? fsm2.out;
    incr2.left = (fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? 32'd1;
    incr1.right = (fsm2.out <= 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? fsm1.out;
    incr1.left = (fsm2.out <= 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) ? 32'd1;
    a0.write_en = ((fsm0.out == 32'd0 & fsm4.out == 32'd0 & !(fsm0.out == 32'd2) & go) | (fsm2.out == 32'd3 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go)) ? 1'd1;
    i0.write_en = ((fsm0.out == 32'd1 & fsm4.out == 32'd0 & !(fsm0.out == 32'd2) & go) | (fsm1.out == 32'd1 & fsm2.out <= 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go)) ? 1'd1;
    fsm3.in = ((fsm3.out == 32'd0 & !(lt0.out) & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) | (fsm3.out == 32'd5 & !(lt0.out) & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go)) ? 32'd6;
    fsm3.in = ((fsm3.out == 32'd0 & lt0.out & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) | (fsm3.out == 32'd5 & lt0.out & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go)) ? 32'd1;
    fsm4.write_en = ((fsm4.out == 32'd0 & fsm0.out == 32'd2 & go) | (fsm4.out == 32'd1 & b0.done & go) | (fsm4.out == 32'd2 & fsm3.out == 32'd6 & go) | fsm4.out == 32'd3) ? 1'd1;
    b0.write_en = ((fsm4.out == 32'd1 & !(b0.done) & go) | (fsm2.out == 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go)) ? 1'd1;
    fsm0.write_en = ((fsm0.out != 32'd2 & fsm4.out == 32'd0 & !(fsm0.out == 32'd2) & go) | fsm0.out == 32'd2) ? 1'd1;
    fsm1.write_en = ((fsm1.out != 32'd2 & fsm2.out <= 32'd2 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) | fsm1.out == 32'd2) ? 1'd1;
    fsm2.write_en = ((fsm2.out != 32'd4 & fsm3.out > 32'd0 & fsm3.out < 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) | fsm2.out == 32'd4) ? 1'd1;
    fsm3.write_en = ((fsm3.out != 32'd5 & fsm3.out != 32'd0 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) | (fsm3.out == 32'd0 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) | (fsm3.out == 32'd5 & fsm4.out == 32'd2 & !(fsm3.out == 32'd6) & go) | fsm3.out == 32'd6) ? 1'd1;
    fsm0.in = fsm0.out == 32'd2 ? 32'd0;
    fsm1.in = fsm1.out == 32'd2 ? 32'd0;
    fsm2.in = fsm2.out == 32'd4 ? 32'd0;
    fsm3.in = fsm3.out == 32'd6 ? 32'd0;
    done = fsm4.out == 32'd3 ? 1'd1;
    fsm4.in = fsm4.out == 32'd3 ? 32'd0;
  }
  
  control {
    
  }
}