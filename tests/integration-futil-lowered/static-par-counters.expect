component main(go: 1) -> (done: 1) {
  cells {
    add0 = prim std_add(32);
    add1 = prim std_add(32);
    cond_computed0 = prim std_reg(1);
    cond_stored0 = prim std_reg(1);
    const0 = prim std_const(32, 0);
    const1 = prim std_const(32, 0);
    const2 = prim std_const(32, 10);
    const3 = prim std_const(32, 1);
    const4 = prim std_const(32, 1);
    done_reg0 = prim std_reg(1);
    fsm0 = prim std_reg(32);
    fsm1 = prim std_reg(32);
    incr0 = prim std_add(32);
    lt0 = prim std_lt(32);
    x0 = prim std_reg(32);
    y0 = prim std_reg(32);
  }
  
  wires {
    x0.in = fsm1.out == 32'd0 & !(x0.done) & go ? const0.out;
    x0.write_en = fsm1.out == 32'd0 & !(x0.done) & go | fsm0.out <= 32'd1 & cond_stored0.out & cond_computed0.out & !(fsm0.out == 32'd1) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? 1'd1;
    fsm1.in = fsm1.out == 32'd0 & x0.done & go ? 32'd1;
    fsm1.write_en = fsm1.out == 32'd0 & x0.done & go | fsm1.out == 32'd1 & y0.done & go | fsm1.out == 32'd2 & done_reg0.out & go | fsm1.out == 32'd3 ? 1'd1;
    y0.in = fsm1.out == 32'd1 & !(y0.done) & go ? const1.out;
    y0.write_en = fsm1.out == 32'd1 & !(y0.done) & go | fsm0.out <= 32'd1 & cond_stored0.out & cond_computed0.out & !(fsm0.out == 32'd1) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? 1'd1;
    fsm1.in = fsm1.out == 32'd1 & y0.done & go ? 32'd2;
    fsm1.in = fsm1.out == 32'd2 & done_reg0.out & go ? 32'd3;
    done = fsm1.out == 32'd3 ? 1'd1;
    x0.in = fsm0.out <= 32'd1 & cond_stored0.out & cond_computed0.out & !(fsm0.out == 32'd1) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? add0.out;
    y0.in = fsm0.out <= 32'd1 & cond_stored0.out & cond_computed0.out & !(fsm0.out == 32'd1) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? add1.out;
    add0.right = fsm0.out <= 32'd1 & cond_stored0.out & cond_computed0.out & !(fsm0.out == 32'd1) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? const3.out;
    add1.right = fsm0.out <= 32'd1 & cond_stored0.out & cond_computed0.out & !(fsm0.out == 32'd1) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? const4.out;
    add0.left = fsm0.out <= 32'd1 & cond_stored0.out & cond_computed0.out & !(fsm0.out == 32'd1) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? x0.out;
    add1.left = fsm0.out <= 32'd1 & cond_stored0.out & cond_computed0.out & !(fsm0.out == 32'd1) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? y0.out;
    fsm0.in = !(fsm0.out == 32'd1) & cond_stored0.out & cond_computed0.out & !(fsm0.out == 32'd1) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? incr0.out;
    fsm0.write_en = !(fsm0.out == 32'd1) & cond_stored0.out & cond_computed0.out & !(fsm0.out == 32'd1) & fsm1.out == 32'd2 & !(done_reg0.out) & go | fsm0.out == 32'd1 ? 1'd1;
    lt0.right = !(cond_computed0.out) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? const2.out;
    cond_stored0.in = !(cond_computed0.out) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? lt0.out;
    lt0.left = !(cond_computed0.out) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? x0.out;
    cond_computed0.in = !(cond_computed0.out) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? 1'd1;
    cond_stored0.write_en = !(cond_computed0.out) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? 1'd1;
    cond_computed0.write_en = !(cond_computed0.out) & fsm1.out == 32'd2 & !(done_reg0.out) & go | cond_stored0.out & cond_computed0.out & fsm0.out == 32'd1 & fsm1.out == 32'd2 & !(done_reg0.out) & go | cond_computed0.out & !(cond_stored0.out) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? 1'd1;
    done_reg0.in = cond_computed0.out & !(cond_stored0.out) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? 1'd1;
    done_reg0.write_en = cond_computed0.out & !(cond_stored0.out) & fsm1.out == 32'd2 & !(done_reg0.out) & go | done_reg0.out ? 1'd1;
    cond_computed0.in = cond_stored0.out & cond_computed0.out & fsm0.out == 32'd1 & fsm1.out == 32'd2 & !(done_reg0.out) & go | cond_computed0.out & !(cond_stored0.out) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? 1'd0;
    incr0.right = cond_stored0.out & cond_computed0.out & !(fsm0.out == 32'd1) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? fsm0.out;
    incr0.left = cond_stored0.out & cond_computed0.out & !(fsm0.out == 32'd1) & fsm1.out == 32'd2 & !(done_reg0.out) & go ? 32'd1;
    fsm0.in = fsm0.out == 32'd1 ? 32'd0;
    fsm1.in = fsm1.out == 32'd3 ? 32'd0;
    done_reg0.in = done_reg0.out ? 1'd0;
  }
  
  control {
    (empty)
  }
}