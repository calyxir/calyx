import "primitives/std.lib";
component main(go: 1, clk: 1) -> (done: 1) {
  cells {
    add0 = prim std_add(32);
    const0 = prim std_const(32, 0);
    const1 = prim std_const(32, 10);
    const2 = prim std_const(32, 1);
    fsm0 = prim std_reg(32);
    fsm1 = prim std_reg(32);
    i_0 = prim std_reg(32);
    incr0 = prim std_add(32);
    lt0 = prim std_lt(32);
  }
  
  wires {
    i_0.in = (fsm1.out == 32'd0 & !(i_0.done) & go) ? const0.out;
    fsm1.in = (fsm1.out == 32'd0 & i_0.done & go) ? 32'd1;
    fsm1.in = (fsm1.out == 32'd1 & fsm0.out == 32'd3 & go) ? 32'd2;
    lt0.right = (fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go) ? const1.out;
    incr0.left = (fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go) ? fsm0.out;
    lt0.left = (fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go) ? i_0.out;
    incr0.right = (fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go) ? 32'd1;
    fsm0.in = (fsm0.out != 32'd2 & fsm0.out != 32'd0 & fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go) ? incr0.out;
    i_0.in = (fsm0.out > 32'd0 & fsm0.out < 32'd2 & fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go) ? add0.out;
    add0.right = (fsm0.out > 32'd0 & fsm0.out < 32'd2 & fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go) ? const2.out;
    add0.left = (fsm0.out > 32'd0 & fsm0.out < 32'd2 & fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go) ? i_0.out;
    fsm0.in = ((fsm0.out == 32'd0 & !(lt0.out) & fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go) | (fsm0.out == 32'd2 & !(lt0.out) & fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go)) ? 32'd3;
    fsm0.in = ((fsm0.out == 32'd0 & lt0.out & fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go) | (fsm0.out == 32'd2 & lt0.out & fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go)) ? 32'd1;
    i_0.write_en = ((fsm1.out == 32'd0 & !(i_0.done) & go) | (fsm0.out > 32'd0 & fsm0.out < 32'd2 & fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go)) ? 1'd1;
    fsm1.write_en = ((fsm1.out == 32'd0 & i_0.done & go) | (fsm1.out == 32'd1 & fsm0.out == 32'd3 & go) | fsm1.out == 32'd2) ? 1'd1;
    fsm0.write_en = ((fsm0.out != 32'd2 & fsm0.out != 32'd0 & fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go) | (fsm0.out == 32'd0 & fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go) | (fsm0.out == 32'd2 & fsm1.out == 32'd1 & !(fsm0.out == 32'd3) & go) | fsm0.out == 32'd3) ? 1'd1;
    fsm0.in = fsm0.out == 32'd3 ? 32'd0;
    done = fsm1.out == 32'd2 ? 1'd1;
    fsm1.in = fsm1.out == 32'd2 ? 32'd0;
  }
  
  control {
    
  }
}