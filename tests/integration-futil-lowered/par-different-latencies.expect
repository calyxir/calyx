import "primitives/std.lib";
component do_one(go: 1, clk: 1) -> (done: 1) {
  cells {
    add = prim std_add(32);
    fsm0 = prim std_reg(32);
    x = prim std_reg(32);
  }
  
  wires {
    x.in = (fsm0.out == 32'd0 & !(x.done) & go) ? add.out;
    add.right = (fsm0.out == 32'd0 & !(x.done) & go) ? x.out;
    x.write_en = (fsm0.out == 32'd0 & !(x.done) & go) ? 1'd1;
    add.left = (fsm0.out == 32'd0 & !(x.done) & go) ? 32'd1;
    fsm0.in = (fsm0.out == 32'd0 & x.done & go) ? 32'd1;
    fsm0.write_en = ((fsm0.out == 32'd0 & x.done & go) | fsm0.out == 32'd1) ? 1'd1;
    done = fsm0.out == 32'd1 ? 1'd1;
    fsm0.in = fsm0.out == 32'd1 ? 32'd0;
  }
  
  control {
    
  }
}

component do_two(go: 1, clk: 1) -> (done: 1) {
  cells {
    add = prim std_add(32);
    fsm0 = prim std_reg(32);
    y = prim std_reg(32);
    z = prim std_reg(32);
  }
  
  wires {
    y.in = (fsm0.out == 32'd0 & !(y.done) & go) ? add.out;
    add.right = (fsm0.out == 32'd0 & !(y.done) & go) ? y.out;
    y.write_en = (fsm0.out == 32'd0 & !(y.done) & go) ? 1'd1;
    fsm0.in = (fsm0.out == 32'd0 & y.done & go) ? 32'd1;
    z.in = (fsm0.out == 32'd1 & !(z.done) & go) ? add.out;
    add.right = (fsm0.out == 32'd1 & !(z.done) & go) ? z.out;
    z.write_en = (fsm0.out == 32'd1 & !(z.done) & go) ? 1'd1;
    fsm0.in = (fsm0.out == 32'd1 & z.done & go) ? 32'd2;
    add.left = ((fsm0.out == 32'd0 & !(y.done) & go) | (fsm0.out == 32'd1 & !(z.done) & go)) ? 32'd1;
    fsm0.write_en = ((fsm0.out == 32'd0 & y.done & go) | (fsm0.out == 32'd1 & z.done & go) | fsm0.out == 32'd2) ? 1'd1;
    done = fsm0.out == 32'd2 ? 1'd1;
    fsm0.in = fsm0.out == 32'd2 ? 32'd0;
  }
  
  control {
    
  }
}

component main(go: 1, clk: 1) -> (done: 1) {
  cells {
    one = do_one;
    two = do_two;
    par_done_reg0 = prim std_reg(1);
    par_done_reg1 = prim std_reg(1);
    par_reset0 = prim std_reg(1);
  }
  
  wires {
    one.go = (!((par_done_reg0.out | one.done)) & go) ? 1'd1;
    two.go = (!((par_done_reg1.out | two.done)) & go) ? 1'd1;
    par_done_reg0.in = (one.done & go) ? 1'd1;
    par_reset0.in = (par_done_reg0.out & par_done_reg1.out & go) ? 1'd1;
    par_done_reg1.in = (two.done & go) ? 1'd1;
    par_done_reg0.write_en = ((one.done & go) | par_reset0.out) ? 1'd1;
    par_reset0.write_en = ((par_done_reg0.out & par_done_reg1.out & go) | par_reset0.out) ? 1'd1;
    par_done_reg1.write_en = ((two.done & go) | par_reset0.out) ? 1'd1;
    par_done_reg0.in = par_reset0.out ? 1'd0;
    par_done_reg1.in = par_reset0.out ? 1'd0;
    par_reset0.in = par_reset0.out ? 1'd0;
    done = par_reset0.out ? 1'd1;
  }
  
  control {
    
  }
}