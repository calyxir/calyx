import "primitives/std.lib";
component main(go: 1, clk: 1) -> (done: 1) {
  cells {
    a_0 = prim std_reg(32);
    b_0 = prim std_reg(32);
    cond_stored0 = prim std_reg(1);
    const0 = prim std_const(32, 10);
    const1 = prim std_const(32, 1);
    const2 = prim std_const(32, 5);
    const3 = prim std_const(32, 20);
    const4 = prim std_const(32, 40);
    fsm0 = prim std_reg(32);
    fsm1 = prim std_reg(32);
    fsm2 = prim std_reg(32);
    gt0 = prim std_gt(32);
    incr0 = prim std_add(32);
    incr1 = prim std_add(32);
    incr2 = prim std_add(32);
    y_0 = prim std_reg(32);
    z_0 = prim std_reg(32);
  }
  
  wires {
    gt0.left = (fsm1.out == 32'd0 & fsm2.out >= 32'd1 & fsm2.out < 32'd3 & go) ? a_0.out;
    gt0.right = (fsm1.out == 32'd0 & fsm2.out >= 32'd1 & fsm2.out < 32'd3 & go) ? const2.out;
    cond_stored0.in = (fsm1.out == 32'd0 & fsm2.out >= 32'd1 & fsm2.out < 32'd3 & go) ? gt0.out;
    cond_stored0.write_en = (fsm1.out == 32'd0 & fsm2.out >= 32'd1 & fsm2.out < 32'd3 & go) ? 1'd1;
    incr0.right = (fsm2.out == 32'd0 & go) ? fsm0.out;
    incr0.left = (fsm2.out == 32'd0 & go) ? 32'd1;
    fsm0.in = (fsm0.out != 32'd1 & fsm2.out == 32'd0 & go) ? incr0.out;
    fsm1.in = (fsm1.out != 32'd2 & fsm2.out >= 32'd1 & fsm2.out < 32'd3 & go) ? incr1.out;
    fsm2.in = (fsm2.out != 32'd3 & go) ? incr2.out;
    z_0.in = (fsm1.out > 32'd0 & fsm1.out < 32'd2 & !(cond_stored0.out) & fsm2.out >= 32'd1 & fsm2.out < 32'd3 & go) ? const4.out;
    z_0.write_en = (fsm1.out > 32'd0 & fsm1.out < 32'd2 & !(cond_stored0.out) & fsm2.out >= 32'd1 & fsm2.out < 32'd3 & go) ? 1'd1;
    y_0.in = (fsm1.out > 32'd0 & fsm1.out < 32'd2 & cond_stored0.out & fsm2.out >= 32'd1 & fsm2.out < 32'd3 & go) ? const3.out;
    y_0.write_en = (fsm1.out > 32'd0 & fsm1.out < 32'd2 & cond_stored0.out & fsm2.out >= 32'd1 & fsm2.out < 32'd3 & go) ? 1'd1;
    incr1.left = (fsm2.out >= 32'd1 & fsm2.out < 32'd3 & go) ? fsm1.out;
    incr1.right = (fsm2.out >= 32'd1 & fsm2.out < 32'd3 & go) ? 32'd1;
    a_0.in = (fsm0.out <= 32'd1 & fsm2.out == 32'd0 & go) ? const0.out;
    b_0.in = (fsm0.out <= 32'd1 & fsm2.out == 32'd0 & go) ? const1.out;
    a_0.write_en = (fsm0.out <= 32'd1 & fsm2.out == 32'd0 & go) ? 1'd1;
    b_0.write_en = (fsm0.out <= 32'd1 & fsm2.out == 32'd0 & go) ? 1'd1;
    fsm0.write_en = ((fsm0.out != 32'd1 & fsm2.out == 32'd0 & go) | fsm0.out == 32'd1) ? 1'd1;
    fsm1.write_en = ((fsm1.out != 32'd2 & fsm2.out >= 32'd1 & fsm2.out < 32'd3 & go) | fsm1.out == 32'd2) ? 1'd1;
    fsm2.write_en = ((fsm2.out != 32'd3 & go) | fsm2.out == 32'd3) ? 1'd1;
    fsm0.in = fsm0.out == 32'd1 ? 32'd0;
    fsm1.in = fsm1.out == 32'd2 ? 32'd0;
    done = fsm2.out == 32'd3 ? 1'd1;
    fsm2.in = fsm2.out == 32'd3 ? 32'd0;
    incr2.right = go ? fsm2.out;
    incr2.left = go ? 32'd1;
  }
  
  control {
    
  }
}