import "primitives/std.lib";
component do_one() -> () {
  cells {
    x = prim std_reg(32);
    add = prim std_add(32);
  }
  wires {
    group latency_one {
      add.left = 32'd1;
      add.right = x.out;
      x.in = add.out;
      x.write_en = 1'd1;

      latency_one[done] = x.done;
    }
  }

  control {
    seq {
      latency_one;
    }
  }
}

component do_two() -> () {
  cells {
    z = prim std_reg(32);
    y = prim std_reg(32);
    add = prim std_add(32);
  }
  wires {
    group y_upd {
      add.left = 32'd1;
      add.right = y.out;

      y.in = add.out;
      y.write_en = 1'd1;

      y_upd[done] = y.done;
    }
    group z_upd {
      add.left = 32'd1;
      add.right = z.out;

      z.in = add.out;
      z.write_en = 1'd1;

      z_upd[done] = z.done;
    }
  }
  control {
    seq {
      y_upd;
      z_upd;
    }
  }
}

component main() -> () {
  cells {
    one = do_one;
    two = do_two;
  }
  wires {
    group latency_one {
      one.go = 1'd1;
      latency_one[done] = one.done;
    }

    group latency_two {
      two.go = 1'd1;
      latency_two[done] = two.done;
    }
  }
  control {
    par {
      latency_one;
      latency_two;
    }
  }
}
