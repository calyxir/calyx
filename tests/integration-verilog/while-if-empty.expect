/* verilator lint_off WIDTH */
module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (output logic [width - 1:0] out);
  assign out = value;
endmodule

module std_eq
  #(parameter width = 32)
  (input logic [width-1:0] left,
    input logic [width-1:0] right,
    output logic            out);
  assign out = left == right;
endmodule

module std_lt
  #(parameter width = 32)
  (input logic [width-1:0] left,
    input logic [width-1:0] right,
    output logic            out);
  assign out = left < right;
endmodule

module std_mod_pipe
          #(parameter width = 32)
            (input            clk, reset,
            input                  go,
            input [width-1:0]      left,
            input [width-1:0]      right,
            output reg [width-1:0] out,
            output reg             done);

  wire start = go && !running && !reset;

  reg [width-1:0]     dividend;
  reg [(width-1)*2:0] divisor;
  reg [width-1:0]     quotient;
  reg [width-1:0]     quotient_msk;
  reg                 running;

  always @(posedge clk) begin
      if (reset || !go) begin
        running <= 0;
        done <= 0;
        out <= 0;
      end else
       if (start && left == 0) begin
          out <= 0;
          done <= 1;
       end if (start) begin
          running <= 1;
          dividend <= left;
          divisor <= right << width-1;
          quotient <= 0;
          quotient_msk <= 1 << width-1;
        end else
          if (!quotient_msk && running) begin
            running <= 0;
            done <= 1;
            out <= dividend;
          end else begin
            if (divisor <= dividend) begin
                dividend <= dividend - divisor;
                quotient <= quotient | quotient_msk;
            end
            divisor <= divisor >> 1;
            quotient_msk <= quotient_msk >> 1;
          end
  end
endmodule

// Component Signature
module main (
      input logic go,
      input logic clk,
      output logic done
  );
  
  // Structure wire declarations
  logic [3:0] x_0_in;
  logic x_0_write_en;
  logic x_0_clk;
  logic [3:0] x_0_out;
  logic x_0_done;
  logic mod_pipe0_clk;
  logic mod_pipe0_reset;
  logic mod_pipe0_go;
  logic [3:0] mod_pipe0_left;
  logic [3:0] mod_pipe0_right;
  logic [3:0] mod_pipe0_out;
  logic mod_pipe0_done;
  logic [3:0] lt0_left;
  logic [3:0] lt0_right;
  logic lt0_out;
  logic [3:0] i_0_in;
  logic i_0_write_en;
  logic i_0_clk;
  logic [3:0] i_0_out;
  logic i_0_done;
  logic [3:0] eq0_left;
  logic [3:0] eq0_right;
  logic eq0_out;
  logic [3:0] const6_out;
  logic [3:0] const5_out;
  logic [3:0] const4_out;
  logic [3:0] const3_out;
  logic [3:0] const2_out;
  logic [3:0] const1_out;
  logic [3:0] const0_out;
  logic [3:0] bin_read0_0_in;
  logic bin_read0_0_write_en;
  logic bin_read0_0_clk;
  logic [3:0] bin_read0_0_out;
  logic bin_read0_0_done;
  logic [3:0] add1_left;
  logic [3:0] add1_right;
  logic [3:0] add1_out;
  logic [3:0] add0_left;
  logic [3:0] add0_right;
  logic [3:0] add0_out;
  logic [31:0] fsm0_in;
  logic fsm0_write_en;
  logic fsm0_clk;
  logic [31:0] fsm0_out;
  logic fsm0_done;
  logic [31:0] incr0_left;
  logic [31:0] incr0_right;
  logic [31:0] incr0_out;
  logic [31:0] fsm1_in;
  logic fsm1_write_en;
  logic fsm1_clk;
  logic [31:0] fsm1_out;
  logic fsm1_done;
  logic cond_stored0_in;
  logic cond_stored0_write_en;
  logic cond_stored0_clk;
  logic cond_stored0_out;
  logic cond_stored0_done;
  logic [31:0] incr1_left;
  logic [31:0] incr1_right;
  logic [31:0] incr1_out;
  logic [31:0] fsm2_in;
  logic fsm2_write_en;
  logic fsm2_clk;
  logic [31:0] fsm2_out;
  logic fsm2_done;
  logic cond_computed0_in;
  logic cond_computed0_write_en;
  logic cond_computed0_clk;
  logic cond_computed0_out;
  logic cond_computed0_done;
  logic cond_stored1_in;
  logic cond_stored1_write_en;
  logic cond_stored1_clk;
  logic cond_stored1_out;
  logic cond_stored1_done;
  logic done_reg0_in;
  logic done_reg0_write_en;
  logic done_reg0_clk;
  logic done_reg0_out;
  logic done_reg0_done;
  logic [31:0] fsm3_in;
  logic fsm3_write_en;
  logic fsm3_clk;
  logic [31:0] fsm3_out;
  logic fsm3_done;
  
  // Subcomponent Instances
  std_reg #(4) x_0 (
      .in(x_0_in),
      .write_en(x_0_write_en),
      .clk(clk),
      .out(x_0_out),
      .done(x_0_done)
  );
  
  std_mod_pipe #(4) mod_pipe0 (
      .clk(clk),
      .reset(mod_pipe0_reset),
      .go(mod_pipe0_go),
      .left(mod_pipe0_left),
      .right(mod_pipe0_right),
      .out(mod_pipe0_out),
      .done(mod_pipe0_done)
  );
  
  std_lt #(4) lt0 (
      .left(lt0_left),
      .right(lt0_right),
      .out(lt0_out)
  );
  
  std_reg #(4) i_0 (
      .in(i_0_in),
      .write_en(i_0_write_en),
      .clk(clk),
      .out(i_0_out),
      .done(i_0_done)
  );
  
  std_eq #(4) eq0 (
      .left(eq0_left),
      .right(eq0_right),
      .out(eq0_out)
  );
  
  std_const #(4, 1) const6 (
      .out(const6_out)
  );
  
  std_const #(4, 1) const5 (
      .out(const5_out)
  );
  
  std_const #(4, 0) const4 (
      .out(const4_out)
  );
  
  std_const #(4, 2) const3 (
      .out(const3_out)
  );
  
  std_const #(4, 10) const2 (
      .out(const2_out)
  );
  
  std_const #(4, 0) const1 (
      .out(const1_out)
  );
  
  std_const #(4, 0) const0 (
      .out(const0_out)
  );
  
  std_reg #(4) bin_read0_0 (
      .in(bin_read0_0_in),
      .write_en(bin_read0_0_write_en),
      .clk(clk),
      .out(bin_read0_0_out),
      .done(bin_read0_0_done)
  );
  
  std_add #(4) add1 (
      .left(add1_left),
      .right(add1_right),
      .out(add1_out)
  );
  
  std_add #(4) add0 (
      .left(add0_left),
      .right(add0_right),
      .out(add0_out)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  std_add #(32) incr0 (
      .left(incr0_left),
      .right(incr0_right),
      .out(incr0_out)
  );
  
  std_reg #(32) fsm1 (
      .in(fsm1_in),
      .write_en(fsm1_write_en),
      .clk(clk),
      .out(fsm1_out),
      .done(fsm1_done)
  );
  
  std_reg #(1) cond_stored0 (
      .in(cond_stored0_in),
      .write_en(cond_stored0_write_en),
      .clk(clk),
      .out(cond_stored0_out),
      .done(cond_stored0_done)
  );
  
  std_add #(32) incr1 (
      .left(incr1_left),
      .right(incr1_right),
      .out(incr1_out)
  );
  
  std_reg #(32) fsm2 (
      .in(fsm2_in),
      .write_en(fsm2_write_en),
      .clk(clk),
      .out(fsm2_out),
      .done(fsm2_done)
  );
  
  std_reg #(1) cond_computed0 (
      .in(cond_computed0_in),
      .write_en(cond_computed0_write_en),
      .clk(clk),
      .out(cond_computed0_out),
      .done(cond_computed0_done)
  );
  
  std_reg #(1) cond_stored1 (
      .in(cond_stored1_in),
      .write_en(cond_stored1_write_en),
      .clk(clk),
      .out(cond_stored1_out),
      .done(cond_stored1_done)
  );
  
  std_reg #(1) done_reg0 (
      .in(done_reg0_in),
      .write_en(done_reg0_write_en),
      .clk(clk),
      .out(done_reg0_out),
      .done(done_reg0_done)
  );
  
  std_reg #(32) fsm3 (
      .in(fsm3_in),
      .write_en(fsm3_write_en),
      .clk(clk),
      .out(fsm3_out),
      .done(fsm3_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      
  end
  
   final begin
      
  end
  
  // Input / output connections
  always_comb begin
    if ((fsm3_out == 32'd2))
      done = 1'd1;
    else 
      done = '0;
    
    if ((fsm0_out <= 32'd1 & fsm3_out == 32'd0 & !(fsm0_out == 32'd1) & go))
      x_0_in = const1_out;
    else if ((fsm1_out > 32'd0 & fsm1_out < 32'd2 & cond_stored0_out & fsm2_out == 32'd1 & !(fsm1_out == 32'd2) & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      x_0_in = add0_out;
    else 
      x_0_in = '0;
    
    if ((fsm0_out <= 32'd1 & fsm3_out == 32'd0 & !(fsm0_out == 32'd1) & go | fsm1_out > 32'd0 & fsm1_out < 32'd2 & cond_stored0_out & fsm2_out == 32'd1 & !(fsm1_out == 32'd2) & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      x_0_write_en = 1'd1;
    else 
      x_0_write_en = '0;
    
    if ((!mod_pipe0_done & fsm2_out == 32'd0 & !bin_read0_0_done & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      mod_pipe0_go = 1'd1;
    else 
      mod_pipe0_go = '0;
    
    if ((fsm2_out == 32'd0 & !bin_read0_0_done & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      mod_pipe0_left = i_0_out;
    else 
      mod_pipe0_left = '0;
    
    if ((fsm2_out == 32'd0 & !bin_read0_0_done & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      mod_pipe0_right = const3_out;
    else 
      mod_pipe0_right = '0;
    
    if ((!cond_computed0_out & fsm3_out == 32'd1 & !done_reg0_out & go))
      lt0_left = i_0_out;
    else 
      lt0_left = '0;
    
    if ((!cond_computed0_out & fsm3_out == 32'd1 & !done_reg0_out & go))
      lt0_right = const2_out;
    else 
      lt0_right = '0;
    
    if ((fsm0_out <= 32'd1 & fsm3_out == 32'd0 & !(fsm0_out == 32'd1) & go))
      i_0_in = const0_out;
    else if ((fsm2_out == 32'd2 & !i_0_done & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      i_0_in = add1_out;
    else 
      i_0_in = '0;
    
    if ((fsm0_out <= 32'd1 & fsm3_out == 32'd0 & !(fsm0_out == 32'd1) & go | fsm2_out == 32'd2 & !i_0_done & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      i_0_write_en = 1'd1;
    else 
      i_0_write_en = '0;
    
    if ((fsm1_out == 32'd0 & fsm2_out == 32'd1 & !(fsm1_out == 32'd2) & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      eq0_left = bin_read0_0_out;
    else 
      eq0_left = '0;
    
    if ((fsm1_out == 32'd0 & fsm2_out == 32'd1 & !(fsm1_out == 32'd2) & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      eq0_right = const4_out;
    else 
      eq0_right = '0;
    
    if ((fsm2_out == 32'd0 & !bin_read0_0_done & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      bin_read0_0_in = mod_pipe0_out;
    else 
      bin_read0_0_in = '0;
    
    if ((fsm2_out == 32'd0 & !bin_read0_0_done & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      bin_read0_0_write_en = mod_pipe0_done;
    else 
      bin_read0_0_write_en = '0;
    
    if ((fsm2_out == 32'd2 & !i_0_done & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      add1_left = i_0_out;
    else 
      add1_left = '0;
    
    if ((fsm2_out == 32'd2 & !i_0_done & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      add1_right = const6_out;
    else 
      add1_right = '0;
    
    if ((fsm1_out > 32'd0 & fsm1_out < 32'd2 & cond_stored0_out & fsm2_out == 32'd1 & !(fsm1_out == 32'd2) & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      add0_left = x_0_out;
    else 
      add0_left = '0;
    
    if ((fsm1_out > 32'd0 & fsm1_out < 32'd2 & cond_stored0_out & fsm2_out == 32'd1 & !(fsm1_out == 32'd2) & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      add0_right = const5_out;
    else 
      add0_right = '0;
    
    if ((fsm0_out != 32'd1 & fsm3_out == 32'd0 & !(fsm0_out == 32'd1) & go))
      fsm0_in = incr0_out;
    else if ((fsm0_out == 32'd1))
      fsm0_in = 32'd0;
    else 
      fsm0_in = '0;
    
    if ((fsm0_out != 32'd1 & fsm3_out == 32'd0 & !(fsm0_out == 32'd1) & go | fsm0_out == 32'd1))
      fsm0_write_en = 1'd1;
    else 
      fsm0_write_en = '0;
    
    if ((fsm3_out == 32'd0 & !(fsm0_out == 32'd1) & go))
      incr0_left = 32'd1;
    else 
      incr0_left = '0;
    
    if ((fsm3_out == 32'd0 & !(fsm0_out == 32'd1) & go))
      incr0_right = fsm0_out;
    else 
      incr0_right = '0;
    
    if ((fsm1_out != 32'd2 & fsm2_out == 32'd1 & !(fsm1_out == 32'd2) & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      fsm1_in = incr1_out;
    else if ((fsm1_out == 32'd2))
      fsm1_in = 32'd0;
    else 
      fsm1_in = '0;
    
    if ((fsm1_out != 32'd2 & fsm2_out == 32'd1 & !(fsm1_out == 32'd2) & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm1_out == 32'd2))
      fsm1_write_en = 1'd1;
    else 
      fsm1_write_en = '0;
    
    if ((fsm1_out == 32'd0 & fsm2_out == 32'd1 & !(fsm1_out == 32'd2) & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      cond_stored0_in = eq0_out;
    else 
      cond_stored0_in = '0;
    
    if ((fsm1_out == 32'd0 & fsm2_out == 32'd1 & !(fsm1_out == 32'd2) & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      cond_stored0_write_en = 1'd1;
    else 
      cond_stored0_write_en = '0;
    
    if ((fsm2_out == 32'd1 & !(fsm1_out == 32'd2) & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      incr1_left = fsm1_out;
    else 
      incr1_left = '0;
    
    if ((fsm2_out == 32'd1 & !(fsm1_out == 32'd2) & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      incr1_right = 32'd1;
    else 
      incr1_right = '0;
    
    if ((fsm2_out == 32'd2 & i_0_done & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      fsm2_in = 32'd3;
    else if ((fsm2_out == 32'd1 & fsm1_out == 32'd2 & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      fsm2_in = 32'd2;
    else if ((fsm2_out == 32'd3))
      fsm2_in = 32'd0;
    else if ((fsm2_out == 32'd0 & bin_read0_0_done & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go))
      fsm2_in = 32'd1;
    else 
      fsm2_in = '0;
    
    if ((fsm2_out == 32'd0 & bin_read0_0_done & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd1 & fsm1_out == 32'd2 & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd2 & i_0_done & cond_stored1_out & cond_computed0_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd3))
      fsm2_write_en = 1'd1;
    else 
      fsm2_write_en = '0;
    
    if ((cond_stored1_out & cond_computed0_out & fsm2_out == 32'd3 & fsm3_out == 32'd1 & !done_reg0_out & go | cond_computed0_out & !cond_stored1_out & fsm3_out == 32'd1 & !done_reg0_out & go))
      cond_computed0_in = 1'd0;
    else if ((!cond_computed0_out & fsm3_out == 32'd1 & !done_reg0_out & go))
      cond_computed0_in = 1'd1;
    else 
      cond_computed0_in = '0;
    
    if ((!cond_computed0_out & fsm3_out == 32'd1 & !done_reg0_out & go | cond_stored1_out & cond_computed0_out & fsm2_out == 32'd3 & fsm3_out == 32'd1 & !done_reg0_out & go | cond_computed0_out & !cond_stored1_out & fsm3_out == 32'd1 & !done_reg0_out & go))
      cond_computed0_write_en = 1'd1;
    else 
      cond_computed0_write_en = '0;
    
    if ((!cond_computed0_out & fsm3_out == 32'd1 & !done_reg0_out & go))
      cond_stored1_in = lt0_out;
    else 
      cond_stored1_in = '0;
    
    if ((!cond_computed0_out & fsm3_out == 32'd1 & !done_reg0_out & go))
      cond_stored1_write_en = 1'd1;
    else 
      cond_stored1_write_en = '0;
    
    if (done_reg0_out)
      done_reg0_in = 1'd0;
    else if ((cond_computed0_out & !cond_stored1_out & fsm3_out == 32'd1 & !done_reg0_out & go))
      done_reg0_in = 1'd1;
    else 
      done_reg0_in = '0;
    
    if ((cond_computed0_out & !cond_stored1_out & fsm3_out == 32'd1 & !done_reg0_out & go | done_reg0_out))
      done_reg0_write_en = 1'd1;
    else 
      done_reg0_write_en = '0;
    
    if ((fsm3_out == 32'd1 & done_reg0_out & go))
      fsm3_in = 32'd2;
    else if ((fsm3_out == 32'd2))
      fsm3_in = 32'd0;
    else if ((fsm3_out == 32'd0 & fsm0_out == 32'd1 & go))
      fsm3_in = 32'd1;
    else 
      fsm3_in = '0;
    
    if ((fsm3_out == 32'd0 & fsm0_out == 32'd1 & go | fsm3_out == 32'd1 & done_reg0_out & go | fsm3_out == 32'd2))
      fsm3_write_en = 1'd1;
    else 
      fsm3_write_en = '0;
    
  end
endmodule // end main