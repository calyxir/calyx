/* verilator lint_off WIDTH */
module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (output logic [width - 1:0] out);
  assign out = value;
endmodule

module std_eq
  #(parameter width = 32)
  (input logic [width-1:0] left,
    input logic [width-1:0] right,
    output logic            out);
  assign out = left == right;
endmodule

module std_lt
  #(parameter width = 32)
  (input logic [width-1:0] left,
    input logic [width-1:0] right,
    output logic            out);
  assign out = left < right;
endmodule

module std_mod
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left % right;
endmodule

// Component Signature
module main (
      input wire go,
      input wire clk,
      output wire done
  );
  
  // Structure wire declarations
  wire [3:0] z0_in;
  wire z0_write_en;
  wire z0_clk;
  wire [3:0] z0_out;
  wire z0_done;
  wire [3:0] y0_in;
  wire y0_write_en;
  wire y0_clk;
  wire [3:0] y0_out;
  wire y0_done;
  wire [3:0] x0_in;
  wire x0_write_en;
  wire x0_clk;
  wire [3:0] x0_out;
  wire x0_done;
  wire [3:0] mod0_left;
  wire [3:0] mod0_right;
  wire [3:0] mod0_out;
  wire [3:0] lt0_left;
  wire [3:0] lt0_right;
  wire lt0_out;
  wire [3:0] i0_in;
  wire i0_write_en;
  wire i0_clk;
  wire [3:0] i0_out;
  wire i0_done;
  wire [3:0] eq0_left;
  wire [3:0] eq0_right;
  wire eq0_out;
  wire [3:0] const9_out;
  wire [3:0] const8_out;
  wire [3:0] const7_out;
  wire [3:0] const6_out;
  wire [3:0] const5_out;
  wire [3:0] const4_out;
  wire [3:0] const3_out;
  wire [3:0] const2_out;
  wire [3:0] const11_out;
  wire [3:0] const10_out;
  wire [3:0] const1_out;
  wire [3:0] const0_out;
  wire [3:0] add4_left;
  wire [3:0] add4_right;
  wire [3:0] add4_out;
  wire [3:0] add3_left;
  wire [3:0] add3_right;
  wire [3:0] add3_out;
  wire [3:0] add2_left;
  wire [3:0] add2_right;
  wire [3:0] add2_out;
  wire [3:0] add1_left;
  wire [3:0] add1_right;
  wire [3:0] add1_out;
  wire [3:0] add0_left;
  wire [3:0] add0_right;
  wire [3:0] add0_out;
  wire [31:0] fsm0_in;
  wire fsm0_write_en;
  wire fsm0_clk;
  wire [31:0] fsm0_out;
  wire fsm0_done;
  wire [31:0] incr0_left;
  wire [31:0] incr0_right;
  wire [31:0] incr0_out;
  wire [31:0] fsm1_in;
  wire fsm1_write_en;
  wire fsm1_clk;
  wire [31:0] fsm1_out;
  wire fsm1_done;
  wire [31:0] incr1_left;
  wire [31:0] incr1_right;
  wire [31:0] incr1_out;
  wire [31:0] fsm2_in;
  wire fsm2_write_en;
  wire fsm2_clk;
  wire [31:0] fsm2_out;
  wire fsm2_done;
  wire cond_stored0_in;
  wire cond_stored0_write_en;
  wire cond_stored0_clk;
  wire cond_stored0_out;
  wire cond_stored0_done;
  wire [31:0] incr2_left;
  wire [31:0] incr2_right;
  wire [31:0] incr2_out;
  wire [31:0] fsm3_in;
  wire fsm3_write_en;
  wire fsm3_clk;
  wire [31:0] fsm3_out;
  wire fsm3_done;
  wire [31:0] incr3_left;
  wire [31:0] incr3_right;
  wire [31:0] incr3_out;
  wire [31:0] fsm4_in;
  wire fsm4_write_en;
  wire fsm4_clk;
  wire [31:0] fsm4_out;
  wire fsm4_done;
  wire [31:0] incr4_left;
  wire [31:0] incr4_right;
  wire [31:0] incr4_out;
  wire [31:0] fsm5_in;
  wire fsm5_write_en;
  wire fsm5_clk;
  wire [31:0] fsm5_out;
  wire fsm5_done;
  
  // Subcomponent Instances
  std_reg #(4) z0 (
      .in(z0_in),
      .write_en(z0_write_en),
      .clk(clk),
      .out(z0_out),
      .done(z0_done)
  );
  
  std_reg #(4) y0 (
      .in(y0_in),
      .write_en(y0_write_en),
      .clk(clk),
      .out(y0_out),
      .done(y0_done)
  );
  
  std_reg #(4) x0 (
      .in(x0_in),
      .write_en(x0_write_en),
      .clk(clk),
      .out(x0_out),
      .done(x0_done)
  );
  
  std_mod #(4) mod0 (
      .left(mod0_left),
      .right(mod0_right),
      .out(mod0_out)
  );
  
  std_lt #(4) lt0 (
      .left(lt0_left),
      .right(lt0_right),
      .out(lt0_out)
  );
  
  std_reg #(4) i0 (
      .in(i0_in),
      .write_en(i0_write_en),
      .clk(clk),
      .out(i0_out),
      .done(i0_done)
  );
  
  std_eq #(4) eq0 (
      .left(eq0_left),
      .right(eq0_right),
      .out(eq0_out)
  );
  
  std_const #(4, 1) const9 (
      .out(const9_out)
  );
  
  std_const #(4, 1) const8 (
      .out(const8_out)
  );
  
  std_const #(4, 1) const7 (
      .out(const7_out)
  );
  
  std_const #(4, 0) const6 (
      .out(const6_out)
  );
  
  std_const #(4, 2) const5 (
      .out(const5_out)
  );
  
  std_const #(4, 10) const4 (
      .out(const4_out)
  );
  
  std_const #(4, 0) const3 (
      .out(const3_out)
  );
  
  std_const #(4, 0) const2 (
      .out(const2_out)
  );
  
  std_const #(4, 1) const11 (
      .out(const11_out)
  );
  
  std_const #(4, 1) const10 (
      .out(const10_out)
  );
  
  std_const #(4, 0) const1 (
      .out(const1_out)
  );
  
  std_const #(4, 0) const0 (
      .out(const0_out)
  );
  
  std_add #(4) add4 (
      .left(add4_left),
      .right(add4_right),
      .out(add4_out)
  );
  
  std_add #(4) add3 (
      .left(add3_left),
      .right(add3_right),
      .out(add3_out)
  );
  
  std_add #(4) add2 (
      .left(add2_left),
      .right(add2_right),
      .out(add2_out)
  );
  
  std_add #(4) add1 (
      .left(add1_left),
      .right(add1_right),
      .out(add1_out)
  );
  
  std_add #(4) add0 (
      .left(add0_left),
      .right(add0_right),
      .out(add0_out)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  std_add #(32) incr0 (
      .left(incr0_left),
      .right(incr0_right),
      .out(incr0_out)
  );
  
  std_reg #(32) fsm1 (
      .in(fsm1_in),
      .write_en(fsm1_write_en),
      .clk(clk),
      .out(fsm1_out),
      .done(fsm1_done)
  );
  
  std_add #(32) incr1 (
      .left(incr1_left),
      .right(incr1_right),
      .out(incr1_out)
  );
  
  std_reg #(32) fsm2 (
      .in(fsm2_in),
      .write_en(fsm2_write_en),
      .clk(clk),
      .out(fsm2_out),
      .done(fsm2_done)
  );
  
  std_reg #(1) cond_stored0 (
      .in(cond_stored0_in),
      .write_en(cond_stored0_write_en),
      .clk(clk),
      .out(cond_stored0_out),
      .done(cond_stored0_done)
  );
  
  std_add #(32) incr2 (
      .left(incr2_left),
      .right(incr2_right),
      .out(incr2_out)
  );
  
  std_reg #(32) fsm3 (
      .in(fsm3_in),
      .write_en(fsm3_write_en),
      .clk(clk),
      .out(fsm3_out),
      .done(fsm3_done)
  );
  
  std_add #(32) incr3 (
      .left(incr3_left),
      .right(incr3_right),
      .out(incr3_out)
  );
  
  std_reg #(32) fsm4 (
      .in(fsm4_in),
      .write_en(fsm4_write_en),
      .clk(clk),
      .out(fsm4_out),
      .done(fsm4_done)
  );
  
  std_add #(32) incr4 (
      .left(incr4_left),
      .right(incr4_right),
      .out(incr4_out)
  );
  
  std_reg #(32) fsm5 (
      .in(fsm5_in),
      .write_en(fsm5_write_en),
      .clk(clk),
      .out(fsm5_out),
      .done(fsm5_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      
  end
  
   final begin
      
  end
  
  // Input / output connections
  assign done = (fsm5_out == 32'd5) ? 1'd1 : '0;
  assign z0_in = (fsm5_out == 32'd3 & !z0_done & go) ? const3_out : (fsm1_out == 32'd1 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & !cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? add3_out : '0;
  assign z0_write_en = (fsm5_out == 32'd3 & !z0_done & go | fsm1_out == 32'd1 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & !cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? 1'd1 : '0;
  assign y0_in = (fsm5_out == 32'd2 & !y0_done & go) ? const2_out : (fsm1_out == 32'd0 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & !cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? add2_out : '0;
  assign y0_write_en = (fsm5_out == 32'd2 & !y0_done & go | fsm1_out == 32'd0 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & !cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? 1'd1 : '0;
  assign x0_in = (fsm5_out == 32'd1 & !x0_done & go) ? const1_out : (fsm0_out == 32'd1 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? add1_out : (fsm0_out == 32'd0 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? add0_out : '0;
  assign x0_write_en = (fsm5_out == 32'd1 & !x0_done & go | fsm0_out == 32'd0 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go | fsm0_out == 32'd1 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? 1'd1 : '0;
  assign mod0_left = (fsm2_out == 32'd0 & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? i0_out : '0;
  assign mod0_right = (fsm2_out == 32'd0 & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? const5_out : '0;
  assign lt0_left = (fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? i0_out : '0;
  assign lt0_right = (fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? const4_out : '0;
  assign i0_in = (fsm5_out == 32'd0 & !i0_done & go) ? const0_out : (fsm3_out == 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? add4_out : '0;
  assign i0_write_en = (fsm5_out == 32'd0 & !i0_done & go | fsm3_out == 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? 1'd1 : '0;
  assign eq0_left = (fsm2_out == 32'd0 & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? mod0_out : '0;
  assign eq0_right = (fsm2_out == 32'd0 & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? const6_out : '0;
  assign add4_left = (fsm3_out == 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? i0_out : '0;
  assign add4_right = (fsm3_out == 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? const11_out : '0;
  assign add3_left = (fsm1_out == 32'd1 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & !cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? z0_out : '0;
  assign add3_right = (fsm1_out == 32'd1 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & !cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? const10_out : '0;
  assign add2_left = (fsm1_out == 32'd0 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & !cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? y0_out : '0;
  assign add2_right = (fsm1_out == 32'd0 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & !cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? const9_out : '0;
  assign add1_left = (fsm0_out == 32'd1 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? x0_out : '0;
  assign add1_right = (fsm0_out == 32'd1 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? const8_out : '0;
  assign add0_left = (fsm0_out == 32'd0 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? x0_out : '0;
  assign add0_right = (fsm0_out == 32'd0 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? const7_out : '0;
  assign fsm0_in = (fsm0_out != 32'd2 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? incr0_out : (fsm0_out == 32'd2) ? 32'd0 : '0;
  assign fsm0_write_en = (fsm0_out != 32'd2 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go | fsm0_out == 32'd2) ? 1'd1 : '0;
  assign incr0_left = (fsm2_out > 32'd0 & fsm2_out < 32'd3 & cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? 32'd1 : '0;
  assign incr0_right = (fsm2_out > 32'd0 & fsm2_out < 32'd3 & cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? fsm0_out : '0;
  assign fsm1_in = (fsm1_out != 32'd2 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & !cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? incr1_out : (fsm1_out == 32'd2) ? 32'd0 : '0;
  assign fsm1_write_en = (fsm1_out != 32'd2 & fsm2_out > 32'd0 & fsm2_out < 32'd3 & !cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go | fsm1_out == 32'd2) ? 1'd1 : '0;
  assign incr1_left = (fsm2_out > 32'd0 & fsm2_out < 32'd3 & !cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? 32'd1 : '0;
  assign incr1_right = (fsm2_out > 32'd0 & fsm2_out < 32'd3 & !cond_stored0_out & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? fsm1_out : '0;
  assign fsm2_in = (fsm2_out != 32'd3 & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? incr2_out : (fsm2_out == 32'd3) ? 32'd0 : '0;
  assign fsm2_write_en = (fsm2_out != 32'd3 & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go | fsm2_out == 32'd3) ? 1'd1 : '0;
  assign cond_stored0_in = (fsm2_out == 32'd0 & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? eq0_out : '0;
  assign cond_stored0_write_en = (fsm2_out == 32'd0 & fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? 1'd1 : '0;
  assign incr2_left = (fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? fsm2_out : '0;
  assign incr2_right = (fsm3_out <= 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? 32'd1 : '0;
  assign fsm3_in = (fsm3_out != 32'd4 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? incr3_out : (fsm3_out == 32'd4) ? 32'd0 : '0;
  assign fsm3_write_en = (fsm3_out != 32'd4 & fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go | fsm3_out == 32'd4) ? 1'd1 : '0;
  assign incr3_left = (fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? 32'd1 : '0;
  assign incr3_right = (fsm4_out > 32'd0 & fsm4_out < 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? fsm3_out : '0;
  assign fsm4_in = (fsm4_out != 32'd5 & fsm4_out != 32'd0 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? incr4_out : (fsm4_out == 32'd0 & !lt0_out & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go | fsm4_out == 32'd5 & !lt0_out & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? 32'd6 : (fsm4_out == 32'd0 & lt0_out & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go | fsm4_out == 32'd5 & lt0_out & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? 32'd1 : (fsm4_out == 32'd6) ? 32'd0 : '0;
  assign fsm4_write_en = (fsm4_out != 32'd5 & fsm4_out != 32'd0 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go | fsm4_out == 32'd0 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go | fsm4_out == 32'd5 & fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go | fsm4_out == 32'd6) ? 1'd1 : '0;
  assign incr4_left = (fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? fsm4_out : '0;
  assign incr4_right = (fsm5_out == 32'd4 & !(fsm4_out == 32'd6) & go) ? 32'd1 : '0;
  assign fsm5_in = (fsm5_out == 32'd4 & fsm4_out == 32'd6 & go) ? 32'd5 : (fsm5_out == 32'd3 & z0_done & go) ? 32'd4 : (fsm5_out == 32'd2 & y0_done & go) ? 32'd3 : (fsm5_out == 32'd1 & x0_done & go) ? 32'd2 : (fsm5_out == 32'd0 & i0_done & go) ? 32'd1 : (fsm5_out == 32'd5) ? 32'd0 : '0;
  assign fsm5_write_en = (fsm5_out == 32'd0 & i0_done & go | fsm5_out == 32'd1 & x0_done & go | fsm5_out == 32'd2 & y0_done & go | fsm5_out == 32'd3 & z0_done & go | fsm5_out == 32'd4 & fsm4_out == 32'd6 & go | fsm5_out == 32'd5) ? 1'd1 : '0;
endmodule // end main