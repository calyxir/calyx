/* verilator lint_off WIDTH */
module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

// Component Signature
module do_one (
      input wire go,
      input wire clk,
      output wire done
  );
  
  // Structure wire declarations
  wire [31:0] add_left;
  wire [31:0] add_right;
  wire [31:0] add_out;
  wire [31:0] x_in;
  wire x_write_en;
  wire x_clk;
  wire [31:0] x_out;
  wire x_done;
  wire [31:0] fsm0_in;
  wire fsm0_write_en;
  wire fsm0_clk;
  wire [31:0] fsm0_out;
  wire fsm0_done;
  
  // Subcomponent Instances
  std_add #(32) add (
      .left(add_left),
      .right(add_right),
      .out(add_out)
  );
  
  std_reg #(32) x (
      .in(x_in),
      .write_en(x_write_en),
      .clk(clk),
      .out(x_out),
      .done(x_done)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      
  end
  
   final begin
      
  end
  
  // Input / output connections
  assign done = (fsm0_out == 32'd1) ? 1'd1 : '0;
  assign add_left = (fsm0_out == 32'd0 & !x_done & go) ? 32'd1 : '0;
  assign add_right = (fsm0_out == 32'd0 & !x_done & go) ? x_out : '0;
  assign x_in = (fsm0_out == 32'd0 & !x_done & go) ? add_out : '0;
  assign x_write_en = (fsm0_out == 32'd0 & !x_done & go) ? 1'd1 : '0;
  assign fsm0_in = (fsm0_out == 32'd1) ? 32'd0 : (fsm0_out == 32'd0 & x_done & go) ? 32'd1 : '0;
  assign fsm0_write_en = (fsm0_out == 32'd0 & x_done & go | fsm0_out == 32'd1) ? 1'd1 : '0;
endmodule // end do_one
// Component Signature
module do_two (
      input wire go,
      input wire clk,
      output wire done
  );
  
  // Structure wire declarations
  wire [31:0] add_left;
  wire [31:0] add_right;
  wire [31:0] add_out;
  wire [31:0] y_in;
  wire y_write_en;
  wire y_clk;
  wire [31:0] y_out;
  wire y_done;
  wire [31:0] z_in;
  wire z_write_en;
  wire z_clk;
  wire [31:0] z_out;
  wire z_done;
  wire [31:0] fsm0_in;
  wire fsm0_write_en;
  wire fsm0_clk;
  wire [31:0] fsm0_out;
  wire fsm0_done;
  
  // Subcomponent Instances
  std_add #(32) add (
      .left(add_left),
      .right(add_right),
      .out(add_out)
  );
  
  std_reg #(32) y (
      .in(y_in),
      .write_en(y_write_en),
      .clk(clk),
      .out(y_out),
      .done(y_done)
  );
  
  std_reg #(32) z (
      .in(z_in),
      .write_en(z_write_en),
      .clk(clk),
      .out(z_out),
      .done(z_done)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      
  end
  
   final begin
      
  end
  
  // Input / output connections
  assign done = (fsm0_out == 32'd2) ? 1'd1 : '0;
  assign add_left = (fsm0_out == 32'd0 & !y_done & go | fsm0_out == 32'd1 & !z_done & go) ? 32'd1 : '0;
  assign add_right = (fsm0_out == 32'd1 & !z_done & go) ? z_out : (fsm0_out == 32'd0 & !y_done & go) ? y_out : '0;
  assign y_in = (fsm0_out == 32'd0 & !y_done & go) ? add_out : '0;
  assign y_write_en = (fsm0_out == 32'd0 & !y_done & go) ? 1'd1 : '0;
  assign z_in = (fsm0_out == 32'd1 & !z_done & go) ? add_out : '0;
  assign z_write_en = (fsm0_out == 32'd1 & !z_done & go) ? 1'd1 : '0;
  assign fsm0_in = (fsm0_out == 32'd1 & z_done & go) ? 32'd2 : (fsm0_out == 32'd2) ? 32'd0 : (fsm0_out == 32'd0 & y_done & go) ? 32'd1 : '0;
  assign fsm0_write_en = (fsm0_out == 32'd0 & y_done & go | fsm0_out == 32'd1 & z_done & go | fsm0_out == 32'd2) ? 1'd1 : '0;
endmodule // end do_two
// Component Signature
module main (
      input wire go,
      input wire clk,
      output wire done
  );
  
  // Structure wire declarations
  wire two_go;
  wire two_clk;
  wire two_done;
  wire one_go;
  wire one_clk;
  wire one_done;
  wire par_reset0_in;
  wire par_reset0_write_en;
  wire par_reset0_clk;
  wire par_reset0_out;
  wire par_reset0_done;
  wire par_done_reg0_in;
  wire par_done_reg0_write_en;
  wire par_done_reg0_clk;
  wire par_done_reg0_out;
  wire par_done_reg0_done;
  wire par_done_reg1_in;
  wire par_done_reg1_write_en;
  wire par_done_reg1_clk;
  wire par_done_reg1_out;
  wire par_done_reg1_done;
  
  // Subcomponent Instances
  do_two #() two (
      .go(two_go),
      .clk(clk),
      .done(two_done)
  );
  
  do_one #() one (
      .go(one_go),
      .clk(clk),
      .done(one_done)
  );
  
  std_reg #(1) par_reset0 (
      .in(par_reset0_in),
      .write_en(par_reset0_write_en),
      .clk(clk),
      .out(par_reset0_out),
      .done(par_reset0_done)
  );
  
  std_reg #(1) par_done_reg0 (
      .in(par_done_reg0_in),
      .write_en(par_done_reg0_write_en),
      .clk(clk),
      .out(par_done_reg0_out),
      .done(par_done_reg0_done)
  );
  
  std_reg #(1) par_done_reg1 (
      .in(par_done_reg1_in),
      .write_en(par_done_reg1_write_en),
      .clk(clk),
      .out(par_done_reg1_out),
      .done(par_done_reg1_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      
  end
  
   final begin
      
  end
  
  // Input / output connections
  assign done = par_reset0_out ? 1'd1 : '0;
  assign two_go = (!(par_done_reg1_out | two_done) & go) ? 1'd1 : '0;
  assign one_go = (!(par_done_reg0_out | one_done) & go) ? 1'd1 : '0;
  assign par_reset0_in = par_reset0_out ? 1'd0 : (par_done_reg0_out & par_done_reg1_out & go) ? 1'd1 : '0;
  assign par_reset0_write_en = (par_done_reg0_out & par_done_reg1_out & go | par_reset0_out) ? 1'd1 : '0;
  assign par_done_reg0_in = par_reset0_out ? 1'd0 : (one_done & go) ? 1'd1 : '0;
  assign par_done_reg0_write_en = (one_done & go | par_reset0_out) ? 1'd1 : '0;
  assign par_done_reg1_in = par_reset0_out ? 1'd0 : (two_done & go) ? 1'd1 : '0;
  assign par_done_reg1_write_en = (two_done & go | par_reset0_out) ? 1'd1 : '0;
endmodule // end main