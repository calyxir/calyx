/* verilator lint_off PINMISSING */
module std_const
  #(parameter width = 32,
    parameter value = 0)
   (input logic                valid,
    output logic               ready,
    output logic [width - 1:0] out,
    output logic               out_read_out);
  assign out = value;
  assign ready = valid;
  assign out_read_out = valid;
endmodule

module std_reg
  #(parameter width = 32,
    parameter reset_val = 0)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

// Component Signature
module main (
      input wire clk,
      input wire go,
      output wire done
  );
  
  // Structure wire declarations
  wire const0_valid;
  wire [31:0] const0_out;
  wire const0_out_read_out;
  wire const0_ready;
  wire const1_valid;
  wire [31:0] const1_out;
  wire const1_out_read_out;
  wire const1_ready;
  wire [31:0] x_in;
  wire x_write_en;
  wire x_clk;
  wire [31:0] x_out;
  wire x_done;
  wire [31:0] y_in;
  wire y_write_en;
  wire y_clk;
  wire [31:0] y_out;
  wire y_done;
  
  // Subcomponent Instances
  std_const #(32, 0) const0 (
      .out(const0_out),
      .out_read_out(const0_out_read_out),
      .ready(const0_ready)
  );
  
  std_const #(32, 10) const1 (
      .out(const1_out),
      .out_read_out(const1_out_read_out),
      .ready(const1_ready)
  );
  
  std_reg #(32) x (
      .in(x_in),
      .write_en(x_write_en),
      .clk(clk),
      .out(x_out),
      .done(x_done)
  );
  
  std_reg #(32) y (
      .in(y_in),
      .write_en(y_write_en),
      .clk(clk),
      .out(y_out),
      .done(y_done)
  );
  
  // Input / output connections
  assign done = ((x_done & y_done) ? 1'd1 : '0);
  assign x_in = (go ? const0_out : '0);
  assign x_write_en = (go ? 1'd1 : '0);
  assign y_in = (go ? const1_out : '0);
  assign y_write_en = (go ? 1'd1 : '0);
endmodule // end main