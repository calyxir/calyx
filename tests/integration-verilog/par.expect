/* verilator lint_off WIDTH */
module std_const
  #(parameter width = 32,
    parameter value = 0)
   (output logic [width - 1:0] out);
  assign out = value;
endmodule

module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

// Component Signature
module main (
      input wire go,
      input wire clk,
      output wire done
  );
  
  // Structure wire declarations
  wire [31:0] y_in;
  wire y_write_en;
  wire y_clk;
  wire [31:0] y_out;
  wire y_done;
  wire [31:0] x_in;
  wire x_write_en;
  wire x_clk;
  wire [31:0] x_out;
  wire x_done;
  wire [31:0] const1_out;
  wire [31:0] const0_out;
  wire par_reset0_in;
  wire par_reset0_write_en;
  wire par_reset0_clk;
  wire par_reset0_out;
  wire par_reset0_done;
  wire par_done_reg0_in;
  wire par_done_reg0_write_en;
  wire par_done_reg0_clk;
  wire par_done_reg0_out;
  wire par_done_reg0_done;
  wire par_done_reg1_in;
  wire par_done_reg1_write_en;
  wire par_done_reg1_clk;
  wire par_done_reg1_out;
  wire par_done_reg1_done;
  
  // Subcomponent Instances
  std_reg #(32) y (
      .in(y_in),
      .write_en(y_write_en),
      .clk(clk),
      .out(y_out),
      .done(y_done)
  );
  
  std_reg #(32) x (
      .in(x_in),
      .write_en(x_write_en),
      .clk(clk),
      .out(x_out),
      .done(x_done)
  );
  
  std_const #(32, 10) const1 (
      .out(const1_out)
  );
  
  std_const #(32, 0) const0 (
      .out(const0_out)
  );
  
  std_reg #(1) par_reset0 (
      .in(par_reset0_in),
      .write_en(par_reset0_write_en),
      .clk(clk),
      .out(par_reset0_out),
      .done(par_reset0_done)
  );
  
  std_reg #(1) par_done_reg0 (
      .in(par_done_reg0_in),
      .write_en(par_done_reg0_write_en),
      .clk(clk),
      .out(par_done_reg0_out),
      .done(par_done_reg0_done)
  );
  
  std_reg #(1) par_done_reg1 (
      .in(par_done_reg1_in),
      .write_en(par_done_reg1_write_en),
      .clk(clk),
      .out(par_done_reg1_out),
      .done(par_done_reg1_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      
  end
  
   final begin
      
  end
  
  // Input / output connections
  assign done = par_reset0_out ? 1'd1 : '0;
  assign y_in = (!(par_done_reg1_out | y_done) & go) ? const1_out : '0;
  assign y_write_en = (!(par_done_reg1_out | y_done) & go) ? 1'd1 : '0;
  assign x_in = (!(par_done_reg0_out | x_done) & go) ? const0_out : '0;
  assign x_write_en = (!(par_done_reg0_out | x_done) & go) ? 1'd1 : '0;
  assign par_reset0_in = par_reset0_out ? 1'd0 : (par_done_reg0_out & par_done_reg1_out & go) ? 1'd1 : '0;
  assign par_reset0_write_en = (par_done_reg0_out & par_done_reg1_out & go | par_reset0_out) ? 1'd1 : '0;
  assign par_done_reg0_in = par_reset0_out ? 1'd0 : (x_done & go) ? 1'd1 : '0;
  assign par_done_reg0_write_en = (x_done & go | par_reset0_out) ? 1'd1 : '0;
  assign par_done_reg1_in = par_reset0_out ? 1'd0 : (y_done & go) ? 1'd1 : '0;
  assign par_done_reg1_write_en = (y_done & go | par_reset0_out) ? 1'd1 : '0;
endmodule // end main