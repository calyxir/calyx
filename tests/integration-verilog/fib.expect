/* verilator lint_off PINMISSING */
module std_reg
  #(parameter width = 32,
    parameter reset_val = 0)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (input logic                valid,
    output logic               ready,
    output logic [width - 1:0] out,
    output logic               out_read_out);
  assign out = value;
  assign ready = valid;
  assign out_read_out = valid;
endmodule

module std_lt
  #(parameter width = 32)
  (input logic [width-1:0] left,
    input logic [width-1:0] right,
    output logic            out);
  assign out = left < right;
endmodule

// Component Signature
module main (
      input wire clk,
      input wire go,
      output wire done
  );
  
  // Structure wire declarations
  wire [31:0] a_in;
  wire a_write_en;
  wire a_clk;
  wire [31:0] a_out;
  wire a_done;
  wire [31:0] add0_left;
  wire [31:0] add0_right;
  wire [31:0] add0_out;
  wire [31:0] add1_left;
  wire [31:0] add1_right;
  wire [31:0] add1_out;
  wire [31:0] b_in;
  wire b_write_en;
  wire b_clk;
  wire [31:0] b_out;
  wire b_done;
  wire const0_valid;
  wire [31:0] const0_out;
  wire const0_out_read_out;
  wire const0_ready;
  wire const1_valid;
  wire [31:0] const1_out;
  wire const1_out_read_out;
  wire const1_ready;
  wire const2_valid;
  wire [31:0] const2_out;
  wire const2_out_read_out;
  wire const2_ready;
  wire const3_valid;
  wire [31:0] const3_out;
  wire const3_out_read_out;
  wire const3_ready;
  wire const4_valid;
  wire [31:0] const4_out;
  wire const4_out_read_out;
  wire const4_ready;
  wire [31:0] i_in;
  wire i_write_en;
  wire i_clk;
  wire [31:0] i_out;
  wire i_done;
  wire [31:0] lt0_left;
  wire [31:0] lt0_right;
  wire lt0_out;
  wire [31:0] tmp_in;
  wire tmp_write_en;
  wire tmp_clk;
  wire [31:0] tmp_out;
  wire tmp_done;
  wire [31:0] fsm0_in;
  wire fsm0_write_en;
  wire fsm0_clk;
  wire [31:0] fsm0_out;
  wire fsm0_done;
  wire [31:0] fsm1_in;
  wire fsm1_write_en;
  wire fsm1_clk;
  wire [31:0] fsm1_out;
  wire fsm1_done;
  wire [31:0] fsm2_in;
  wire fsm2_write_en;
  wire fsm2_clk;
  wire [31:0] fsm2_out;
  wire fsm2_done;
  wire cond_computed0_in;
  wire cond_computed0_write_en;
  wire cond_computed0_clk;
  wire cond_computed0_out;
  wire cond_computed0_done;
  wire cond_stored0_in;
  wire cond_stored0_write_en;
  wire cond_stored0_clk;
  wire cond_stored0_out;
  wire cond_stored0_done;
  wire done_reg0_in;
  wire done_reg0_write_en;
  wire done_reg0_clk;
  wire done_reg0_out;
  wire done_reg0_done;
  wire [31:0] fsm3_in;
  wire fsm3_write_en;
  wire fsm3_clk;
  wire [31:0] fsm3_out;
  wire fsm3_done;
  
  // Subcomponent Instances
  std_reg #(32) a (
      .in(a_in),
      .write_en(a_write_en),
      .clk(clk),
      .out(a_out),
      .done(a_done)
  );
  
  std_add #(32) add0 (
      .left(add0_left),
      .right(add0_right),
      .out(add0_out)
  );
  
  std_add #(32) add1 (
      .left(add1_left),
      .right(add1_right),
      .out(add1_out)
  );
  
  std_reg #(32) b (
      .in(b_in),
      .write_en(b_write_en),
      .clk(clk),
      .out(b_out),
      .done(b_done)
  );
  
  std_const #(32, 1) const0 (
      .out(const0_out),
      .out_read_out(const0_out_read_out),
      .ready(const0_ready)
  );
  
  std_const #(32, 0) const1 (
      .out(const1_out),
      .out_read_out(const1_out_read_out),
      .ready(const1_ready)
  );
  
  std_const #(32, 1) const2 (
      .out(const2_out),
      .out_read_out(const2_out_read_out),
      .ready(const2_ready)
  );
  
  std_const #(32, 10) const3 (
      .out(const3_out),
      .out_read_out(const3_out_read_out),
      .ready(const3_ready)
  );
  
  std_const #(32, 1) const4 (
      .out(const4_out),
      .out_read_out(const4_out_read_out),
      .ready(const4_ready)
  );
  
  std_reg #(32) i (
      .in(i_in),
      .write_en(i_write_en),
      .clk(clk),
      .out(i_out),
      .done(i_done)
  );
  
  std_lt #(32) lt0 (
      .left(lt0_left),
      .right(lt0_right),
      .out(lt0_out)
  );
  
  std_reg #(32) tmp (
      .in(tmp_in),
      .write_en(tmp_write_en),
      .clk(clk),
      .out(tmp_out),
      .done(tmp_done)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  std_reg #(32) fsm1 (
      .in(fsm1_in),
      .write_en(fsm1_write_en),
      .clk(clk),
      .out(fsm1_out),
      .done(fsm1_done)
  );
  
  std_reg #(32) fsm2 (
      .in(fsm2_in),
      .write_en(fsm2_write_en),
      .clk(clk),
      .out(fsm2_out),
      .done(fsm2_done)
  );
  
  std_reg #(1) cond_computed0 (
      .in(cond_computed0_in),
      .write_en(cond_computed0_write_en),
      .clk(clk),
      .out(cond_computed0_out),
      .done(cond_computed0_done)
  );
  
  std_reg #(1) cond_stored0 (
      .in(cond_stored0_in),
      .write_en(cond_stored0_write_en),
      .clk(clk),
      .out(cond_stored0_out),
      .done(cond_stored0_done)
  );
  
  std_reg #(1) done_reg0 (
      .in(done_reg0_in),
      .write_en(done_reg0_write_en),
      .clk(clk),
      .out(done_reg0_out),
      .done(done_reg0_done)
  );
  
  std_reg #(32) fsm3 (
      .in(fsm3_in),
      .write_en(fsm3_write_en),
      .clk(clk),
      .out(fsm3_out),
      .done(fsm3_done)
  );
  
  // Input / output connections
  assign done = (((fsm3_out == 32'd3) & 1'd1) ? 1'd1 : '0);
  assign a_in = (((((fsm0_out == 32'd0) & !a_done) & ((((fsm3_out == 32'd0) & !((fsm0_out == 32'd2) & 1'd1)) & go) & 1'd1)) & 1'd1) ? const0_out : (((((fsm2_out == 32'd2) & !a_done) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1) ? tmp_out : '0));
  assign a_write_en = (((((fsm0_out == 32'd0) & !a_done) & ((((fsm3_out == 32'd0) & !((fsm0_out == 32'd2) & 1'd1)) & go) & 1'd1)) & 1'd1) ? 1'd1 : (((((fsm2_out == 32'd2) & !a_done) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1) ? 1'd1 : '0));
  assign add0_left = (((((fsm1_out == 32'd1) & !i_done) & ((((fsm2_out == 32'd0) & !((fsm1_out == 32'd2) & 1'd1)) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1)) & 1'd1) ? i_out : '0);
  assign add0_right = (((((fsm1_out == 32'd1) & !i_done) & ((((fsm2_out == 32'd0) & !((fsm1_out == 32'd2) & 1'd1)) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1)) & 1'd1) ? const4_out : '0);
  assign add1_left = (((((fsm2_out == 32'd1) & !b_done) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1) ? a_out : '0);
  assign add1_right = (((((fsm2_out == 32'd1) & !b_done) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1) ? tmp_out : '0);
  assign b_in = (((((fsm3_out == 32'd1) & !b_done) & go) & 1'd1) ? const2_out : (((((fsm2_out == 32'd1) & !b_done) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1) ? add1_out : '0));
  assign b_write_en = (((((fsm3_out == 32'd1) & !b_done) & go) & 1'd1) ? 1'd1 : (((((fsm2_out == 32'd1) & !b_done) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1) ? 1'd1 : '0));
  assign i_in = (((((fsm0_out == 32'd1) & !i_done) & ((((fsm3_out == 32'd0) & !((fsm0_out == 32'd2) & 1'd1)) & go) & 1'd1)) & 1'd1) ? const1_out : (((((fsm1_out == 32'd1) & !i_done) & ((((fsm2_out == 32'd0) & !((fsm1_out == 32'd2) & 1'd1)) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1)) & 1'd1) ? add0_out : '0));
  assign i_write_en = (((((fsm0_out == 32'd1) & !i_done) & ((((fsm3_out == 32'd0) & !((fsm0_out == 32'd2) & 1'd1)) & go) & 1'd1)) & 1'd1) ? 1'd1 : (((((fsm1_out == 32'd1) & !i_done) & ((((fsm2_out == 32'd0) & !((fsm1_out == 32'd2) & 1'd1)) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1)) & 1'd1) ? 1'd1 : '0));
  assign lt0_left = (((!cond_computed0_out & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1) ? i_out : '0);
  assign lt0_right = (((!cond_computed0_out & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1) ? const3_out : '0);
  assign tmp_in = (((((fsm1_out == 32'd0) & !tmp_done) & ((((fsm2_out == 32'd0) & !((fsm1_out == 32'd2) & 1'd1)) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1)) & 1'd1) ? b_out : '0);
  assign tmp_write_en = (((((fsm1_out == 32'd0) & !tmp_done) & ((((fsm2_out == 32'd0) & !((fsm1_out == 32'd2) & 1'd1)) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1)) & 1'd1) ? 1'd1 : '0);
  assign fsm0_in = ((((fsm0_out == 32'd0) & a_done) & ((((fsm3_out == 32'd0) & !((fsm0_out == 32'd2) & 1'd1)) & go) & 1'd1)) ? 32'd1 : ((((fsm0_out == 32'd1) & i_done) & ((((fsm3_out == 32'd0) & !((fsm0_out == 32'd2) & 1'd1)) & go) & 1'd1)) ? 32'd2 : ((fsm0_out == 32'd2) ? 32'd0 : '0)));
  assign fsm0_write_en = ((((fsm0_out == 32'd0) & a_done) & ((((fsm3_out == 32'd0) & !((fsm0_out == 32'd2) & 1'd1)) & go) & 1'd1)) ? 1'd1 : ((((fsm0_out == 32'd1) & i_done) & ((((fsm3_out == 32'd0) & !((fsm0_out == 32'd2) & 1'd1)) & go) & 1'd1)) ? 1'd1 : ((fsm0_out == 32'd2) ? 1'd1 : '0)));
  assign fsm1_in = ((((fsm1_out == 32'd0) & tmp_done) & ((((fsm2_out == 32'd0) & !((fsm1_out == 32'd2) & 1'd1)) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1)) ? 32'd1 : ((((fsm1_out == 32'd1) & i_done) & ((((fsm2_out == 32'd0) & !((fsm1_out == 32'd2) & 1'd1)) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1)) ? 32'd2 : ((fsm1_out == 32'd2) ? 32'd0 : '0)));
  assign fsm1_write_en = ((((fsm1_out == 32'd0) & tmp_done) & ((((fsm2_out == 32'd0) & !((fsm1_out == 32'd2) & 1'd1)) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1)) ? 1'd1 : ((((fsm1_out == 32'd1) & i_done) & ((((fsm2_out == 32'd0) & !((fsm1_out == 32'd2) & 1'd1)) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) & 1'd1)) ? 1'd1 : ((fsm1_out == 32'd2) ? 1'd1 : '0)));
  assign fsm2_in = ((((fsm2_out == 32'd0) & ((fsm1_out == 32'd2) & 1'd1)) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) ? 32'd1 : ((((fsm2_out == 32'd1) & b_done) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) ? 32'd2 : ((((fsm2_out == 32'd2) & a_done) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) ? 32'd3 : ((fsm2_out == 32'd3) ? 32'd0 : '0))));
  assign fsm2_write_en = ((((fsm2_out == 32'd0) & ((fsm1_out == 32'd2) & 1'd1)) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) ? 1'd1 : ((((fsm2_out == 32'd1) & b_done) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) ? 1'd1 : ((((fsm2_out == 32'd2) & a_done) & ((((cond_stored0_out & cond_computed0_out) & !((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1)) ? 1'd1 : ((fsm2_out == 32'd3) ? 1'd1 : '0))));
  assign cond_computed0_in = (((((!cond_computed0_out & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1) & 1'd1) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) ? 1'd1 : ((((cond_stored0_out & cond_computed0_out) & ((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) ? 1'd0 : (((cond_computed0_out & !cond_stored0_out) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) ? 1'd0 : '0)));
  assign cond_computed0_write_en = (((((!cond_computed0_out & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1) & 1'd1) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) ? 1'd1 : ((((cond_stored0_out & cond_computed0_out) & ((fsm2_out == 32'd3) & 1'd1)) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) ? 1'd1 : (((cond_computed0_out & !cond_stored0_out) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) ? 1'd1 : '0)));
  assign cond_stored0_in = (((((!cond_computed0_out & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1) & 1'd1) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) ? lt0_out : '0);
  assign cond_stored0_write_en = (((((!cond_computed0_out & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) & 1'd1) & 1'd1) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) ? 1'd1 : '0);
  assign done_reg0_in = (((cond_computed0_out & !cond_stored0_out) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) ? 1'd1 : (done_reg0_out ? 1'd0 : '0));
  assign done_reg0_write_en = (((cond_computed0_out & !cond_stored0_out) & ((((fsm3_out == 32'd2) & !(done_reg0_out & 1'd1)) & go) & 1'd1)) ? 1'd1 : (done_reg0_out ? 1'd1 : '0));
  assign fsm3_in = ((((fsm3_out == 32'd0) & ((fsm0_out == 32'd2) & 1'd1)) & go) ? 32'd1 : ((((fsm3_out == 32'd1) & b_done) & go) ? 32'd2 : ((((fsm3_out == 32'd2) & (done_reg0_out & 1'd1)) & go) ? 32'd3 : ((fsm3_out == 32'd3) ? 32'd0 : '0))));
  assign fsm3_write_en = ((((fsm3_out == 32'd0) & ((fsm0_out == 32'd2) & 1'd1)) & go) ? 1'd1 : ((((fsm3_out == 32'd1) & b_done) & go) ? 1'd1 : ((((fsm3_out == 32'd2) & (done_reg0_out & 1'd1)) & go) ? 1'd1 : ((fsm3_out == 32'd3) ? 1'd1 : '0))));
endmodule // end main