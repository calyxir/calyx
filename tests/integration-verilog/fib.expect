/* verilator lint_off WIDTH */
module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (output logic [width - 1:0] out);
  assign out = value;
endmodule

module std_lt
  #(parameter width = 32)
  (input logic [width-1:0] left,
    input logic [width-1:0] right,
    output logic            out);
  assign out = left < right;
endmodule

// Component Signature
module main (
      input wire go,
      input wire clk,
      output wire done
  );
  
  // Structure wire declarations
  wire [31:0] tmp0_in;
  wire tmp0_write_en;
  wire tmp0_clk;
  wire [31:0] tmp0_out;
  wire tmp0_done;
  wire [31:0] lt0_left;
  wire [31:0] lt0_right;
  wire lt0_out;
  wire [31:0] i0_in;
  wire i0_write_en;
  wire i0_clk;
  wire [31:0] i0_out;
  wire i0_done;
  wire [31:0] const4_out;
  wire [31:0] const3_out;
  wire [31:0] const2_out;
  wire [31:0] const1_out;
  wire [31:0] const0_out;
  wire [31:0] b0_in;
  wire b0_write_en;
  wire b0_clk;
  wire [31:0] b0_out;
  wire b0_done;
  wire [31:0] add1_left;
  wire [31:0] add1_right;
  wire [31:0] add1_out;
  wire [31:0] add0_left;
  wire [31:0] add0_right;
  wire [31:0] add0_out;
  wire [31:0] a0_in;
  wire a0_write_en;
  wire a0_clk;
  wire [31:0] a0_out;
  wire a0_done;
  wire [31:0] fsm0_in;
  wire fsm0_write_en;
  wire fsm0_clk;
  wire [31:0] fsm0_out;
  wire fsm0_done;
  wire [31:0] incr0_left;
  wire [31:0] incr0_right;
  wire [31:0] incr0_out;
  wire [31:0] fsm1_in;
  wire fsm1_write_en;
  wire fsm1_clk;
  wire [31:0] fsm1_out;
  wire fsm1_done;
  wire [31:0] incr1_left;
  wire [31:0] incr1_right;
  wire [31:0] incr1_out;
  wire [31:0] fsm2_in;
  wire fsm2_write_en;
  wire fsm2_clk;
  wire [31:0] fsm2_out;
  wire fsm2_done;
  
  // Subcomponent Instances
  std_reg #(32) tmp0 (
      .in(tmp0_in),
      .write_en(tmp0_write_en),
      .clk(clk),
      .out(tmp0_out),
      .done(tmp0_done)
  );
  
  std_lt #(32) lt0 (
      .left(lt0_left),
      .right(lt0_right),
      .out(lt0_out)
  );
  
  std_reg #(32) i0 (
      .in(i0_in),
      .write_en(i0_write_en),
      .clk(clk),
      .out(i0_out),
      .done(i0_done)
  );
  
  std_const #(32, 1) const4 (
      .out(const4_out)
  );
  
  std_const #(32, 10) const3 (
      .out(const3_out)
  );
  
  std_const #(32, 1) const2 (
      .out(const2_out)
  );
  
  std_const #(32, 0) const1 (
      .out(const1_out)
  );
  
  std_const #(32, 1) const0 (
      .out(const0_out)
  );
  
  std_reg #(32) b0 (
      .in(b0_in),
      .write_en(b0_write_en),
      .clk(clk),
      .out(b0_out),
      .done(b0_done)
  );
  
  std_add #(32) add1 (
      .left(add1_left),
      .right(add1_right),
      .out(add1_out)
  );
  
  std_add #(32) add0 (
      .left(add0_left),
      .right(add0_right),
      .out(add0_out)
  );
  
  std_reg #(32) a0 (
      .in(a0_in),
      .write_en(a0_write_en),
      .clk(clk),
      .out(a0_out),
      .done(a0_done)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  std_add #(32) incr0 (
      .left(incr0_left),
      .right(incr0_right),
      .out(incr0_out)
  );
  
  std_reg #(32) fsm1 (
      .in(fsm1_in),
      .write_en(fsm1_write_en),
      .clk(clk),
      .out(fsm1_out),
      .done(fsm1_done)
  );
  
  std_add #(32) incr1 (
      .left(incr1_left),
      .right(incr1_right),
      .out(incr1_out)
  );
  
  std_reg #(32) fsm2 (
      .in(fsm2_in),
      .write_en(fsm2_write_en),
      .clk(clk),
      .out(fsm2_out),
      .done(fsm2_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      
  end
  
   final begin
      
  end
  
  // Input / output connections
  assign done = (fsm2_out == 32'd4) ? 1'd1 : '0;
  assign tmp0_in = (fsm0_out == 32'd0 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? b0_out : '0;
  assign tmp0_write_en = (fsm0_out == 32'd0 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? 1'd1 : '0;
  assign lt0_left = (fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? i0_out : '0;
  assign lt0_right = (fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? const3_out : '0;
  assign i0_in = (fsm2_out == 32'd1 & !i0_done & go) ? const1_out : (fsm0_out == 32'd1 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? add0_out : '0;
  assign i0_write_en = (fsm2_out == 32'd1 & !i0_done & go | fsm0_out == 32'd1 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? 1'd1 : '0;
  assign b0_in = (fsm2_out == 32'd2 & !b0_done & go) ? const2_out : (fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? add1_out : '0;
  assign b0_write_en = (fsm2_out == 32'd2 & !b0_done & go | fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? 1'd1 : '0;
  assign add1_left = (fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? a0_out : '0;
  assign add1_right = (fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? tmp0_out : '0;
  assign add0_left = (fsm0_out == 32'd1 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? i0_out : '0;
  assign add0_right = (fsm0_out == 32'd1 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? const4_out : '0;
  assign a0_in = (fsm0_out == 32'd3 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? tmp0_out : (fsm2_out == 32'd0 & !a0_done & go) ? const0_out : '0;
  assign a0_write_en = (fsm2_out == 32'd0 & !a0_done & go | fsm0_out == 32'd3 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? 1'd1 : '0;
  assign fsm0_in = (fsm0_out != 32'd4 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? incr0_out : (fsm0_out == 32'd4) ? 32'd0 : '0;
  assign fsm0_write_en = (fsm0_out != 32'd4 & fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go | fsm0_out == 32'd4) ? 1'd1 : '0;
  assign incr0_left = (fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? 32'd1 : '0;
  assign incr0_right = (fsm1_out > 32'd0 & fsm1_out < 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? fsm0_out : '0;
  assign fsm1_in = (fsm1_out != 32'd5 & fsm1_out != 32'd0 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? incr1_out : (fsm1_out == 32'd0 & !lt0_out & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go | fsm1_out == 32'd5 & !lt0_out & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? 32'd6 : (fsm1_out == 32'd0 & lt0_out & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go | fsm1_out == 32'd5 & lt0_out & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? 32'd1 : (fsm1_out == 32'd6) ? 32'd0 : '0;
  assign fsm1_write_en = (fsm1_out != 32'd5 & fsm1_out != 32'd0 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go | fsm1_out == 32'd0 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go | fsm1_out == 32'd5 & fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go | fsm1_out == 32'd6) ? 1'd1 : '0;
  assign incr1_left = (fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? fsm1_out : '0;
  assign incr1_right = (fsm2_out == 32'd3 & !(fsm1_out == 32'd6) & go) ? 32'd1 : '0;
  assign fsm2_in = (fsm2_out == 32'd3 & fsm1_out == 32'd6 & go) ? 32'd4 : (fsm2_out == 32'd2 & b0_done & go) ? 32'd3 : (fsm2_out == 32'd1 & i0_done & go) ? 32'd2 : (fsm2_out == 32'd0 & a0_done & go) ? 32'd1 : (fsm2_out == 32'd4) ? 32'd0 : '0;
  assign fsm2_write_en = (fsm2_out == 32'd0 & a0_done & go | fsm2_out == 32'd1 & i0_done & go | fsm2_out == 32'd2 & b0_done & go | fsm2_out == 32'd3 & fsm1_out == 32'd6 & go | fsm2_out == 32'd4) ? 1'd1 : '0;
endmodule // end main