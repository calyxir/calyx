/* verilator lint_off WIDTH */
module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (output logic [width - 1:0] out);
  assign out = value;
endmodule

module std_gt
  #(parameter width = 32)
  (input logic [width-1:0] left,
    input logic [width-1:0] right,
    output logic            out);
  assign out = left > right;
endmodule

module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

// Component Signature
module main (
      input logic go,
      input logic clk,
      output logic done
  );
  
  // Structure wire declarations
  logic [31:0] x_0_in;
  logic x_0_write_en;
  logic x_0_clk;
  logic [31:0] x_0_out;
  logic x_0_done;
  logic [31:0] gt0_left;
  logic [31:0] gt0_right;
  logic gt0_out;
  logic [31:0] const5_out;
  logic [31:0] const4_out;
  logic [31:0] const3_out;
  logic [31:0] const2_out;
  logic [31:0] const1_out;
  logic [31:0] const0_out;
  logic [31:0] fsm0_in;
  logic fsm0_write_en;
  logic fsm0_clk;
  logic [31:0] fsm0_out;
  logic fsm0_done;
  logic cond_stored0_in;
  logic cond_stored0_write_en;
  logic cond_stored0_clk;
  logic cond_stored0_out;
  logic cond_stored0_done;
  logic [31:0] incr0_left;
  logic [31:0] incr0_right;
  logic [31:0] incr0_out;
  logic [31:0] fsm1_in;
  logic fsm1_write_en;
  logic fsm1_clk;
  logic [31:0] fsm1_out;
  logic fsm1_done;
  logic [31:0] incr1_left;
  logic [31:0] incr1_right;
  logic [31:0] incr1_out;
  
  // Subcomponent Instances
  std_reg #(32) x_0 (
      .in(x_0_in),
      .write_en(x_0_write_en),
      .clk(clk),
      .out(x_0_out),
      .done(x_0_done)
  );
  
  std_gt #(32) gt0 (
      .left(gt0_left),
      .right(gt0_right),
      .out(gt0_out)
  );
  
  std_const #(32, 4) const5 (
      .out(const5_out)
  );
  
  std_const #(32, 2) const4 (
      .out(const4_out)
  );
  
  std_const #(32, 1) const3 (
      .out(const3_out)
  );
  
  std_const #(32, 2) const2 (
      .out(const2_out)
  );
  
  std_const #(32, 1) const1 (
      .out(const1_out)
  );
  
  std_const #(32, 0) const0 (
      .out(const0_out)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  std_reg #(1) cond_stored0 (
      .in(cond_stored0_in),
      .write_en(cond_stored0_write_en),
      .clk(clk),
      .out(cond_stored0_out),
      .done(cond_stored0_done)
  );
  
  std_add #(32) incr0 (
      .left(incr0_left),
      .right(incr0_right),
      .out(incr0_out)
  );
  
  std_reg #(32) fsm1 (
      .in(fsm1_in),
      .write_en(fsm1_write_en),
      .clk(clk),
      .out(fsm1_out),
      .done(fsm1_done)
  );
  
  std_add #(32) incr1 (
      .left(incr1_left),
      .right(incr1_right),
      .out(incr1_out)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      
  end
  
   final begin
      
  end
  
  // Input / output connections
  always_comb begin
    if ((fsm1_out == 32'd5))
      done = 1'd1;
    else 
      done = '0;
    
    if ((fsm0_out > 32'd0 & fsm0_out < 32'd2 & !cond_stored0_out & fsm1_out >= 32'd3 & fsm1_out < 32'd5 & go))
      x_0_in = const5_out;
    else if ((fsm0_out > 32'd0 & fsm0_out < 32'd2 & cond_stored0_out & fsm1_out >= 32'd3 & fsm1_out < 32'd5 & go))
      x_0_in = const4_out;
    else if ((fsm1_out == 32'd2 & go))
      x_0_in = const2_out;
    else if ((fsm1_out == 32'd1 & go))
      x_0_in = const1_out;
    else if ((fsm1_out == 32'd0 & go))
      x_0_in = const0_out;
    else 
      x_0_in = '0;
    
    if ((fsm1_out == 32'd0 & go | fsm1_out == 32'd1 & go | fsm1_out == 32'd2 & go | fsm0_out > 32'd0 & fsm0_out < 32'd2 & cond_stored0_out & fsm1_out >= 32'd3 & fsm1_out < 32'd5 & go | fsm0_out > 32'd0 & fsm0_out < 32'd2 & !cond_stored0_out & fsm1_out >= 32'd3 & fsm1_out < 32'd5 & go))
      x_0_write_en = 1'd1;
    else 
      x_0_write_en = '0;
    
    if ((fsm0_out == 32'd0 & fsm1_out >= 32'd3 & fsm1_out < 32'd5 & go))
      gt0_left = x_0_out;
    else 
      gt0_left = '0;
    
    if ((fsm0_out == 32'd0 & fsm1_out >= 32'd3 & fsm1_out < 32'd5 & go))
      gt0_right = const3_out;
    else 
      gt0_right = '0;
    
    if ((fsm0_out != 32'd2 & fsm1_out >= 32'd3 & fsm1_out < 32'd5 & go))
      fsm0_in = incr0_out;
    else if ((fsm0_out == 32'd2))
      fsm0_in = 32'd0;
    else 
      fsm0_in = '0;
    
    if ((fsm0_out != 32'd2 & fsm1_out >= 32'd3 & fsm1_out < 32'd5 & go | fsm0_out == 32'd2))
      fsm0_write_en = 1'd1;
    else 
      fsm0_write_en = '0;
    
    if ((fsm0_out == 32'd0 & fsm1_out >= 32'd3 & fsm1_out < 32'd5 & go))
      cond_stored0_in = gt0_out;
    else 
      cond_stored0_in = '0;
    
    if ((fsm0_out == 32'd0 & fsm1_out >= 32'd3 & fsm1_out < 32'd5 & go))
      cond_stored0_write_en = 1'd1;
    else 
      cond_stored0_write_en = '0;
    
    if ((fsm1_out >= 32'd3 & fsm1_out < 32'd5 & go))
      incr0_left = fsm0_out;
    else 
      incr0_left = '0;
    
    if ((fsm1_out >= 32'd3 & fsm1_out < 32'd5 & go))
      incr0_right = 32'd1;
    else 
      incr0_right = '0;
    
    if ((fsm1_out != 32'd5 & go))
      fsm1_in = incr1_out;
    else if ((fsm1_out == 32'd5))
      fsm1_in = 32'd0;
    else 
      fsm1_in = '0;
    
    if ((fsm1_out != 32'd5 & go | fsm1_out == 32'd5))
      fsm1_write_en = 1'd1;
    else 
      fsm1_write_en = '0;
    
    if (go)
      incr1_left = 32'd1;
    else 
      incr1_left = '0;
    
    if (go)
      incr1_right = fsm1_out;
    else 
      incr1_right = '0;
    
  end
endmodule // end main