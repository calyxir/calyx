/* verilator lint_off WIDTH */
module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (output logic [width - 1:0] out);
  assign out = value;
endmodule

module std_gt
  #(parameter width = 32)
  (input logic [width-1:0] left,
    input logic [width-1:0] right,
    output logic            out);
  assign out = left > right;
endmodule

module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

// Component Signature
module main (
      input logic go,
      input logic clk,
      output logic done
  );
  
  // Structure wire declarations
  logic [31:0] z_0_in;
  logic z_0_write_en;
  logic z_0_clk;
  logic [31:0] z_0_out;
  logic z_0_done;
  logic [31:0] y_0_in;
  logic y_0_write_en;
  logic y_0_clk;
  logic [31:0] y_0_out;
  logic y_0_done;
  logic [31:0] gt0_left;
  logic [31:0] gt0_right;
  logic gt0_out;
  logic [31:0] const4_out;
  logic [31:0] const3_out;
  logic [31:0] const2_out;
  logic [31:0] const1_out;
  logic [31:0] const0_out;
  logic [31:0] b_0_in;
  logic b_0_write_en;
  logic b_0_clk;
  logic [31:0] b_0_out;
  logic b_0_done;
  logic [31:0] a_0_in;
  logic a_0_write_en;
  logic a_0_clk;
  logic [31:0] a_0_out;
  logic a_0_done;
  logic [31:0] fsm0_in;
  logic fsm0_write_en;
  logic fsm0_clk;
  logic [31:0] fsm0_out;
  logic fsm0_done;
  logic [31:0] incr0_left;
  logic [31:0] incr0_right;
  logic [31:0] incr0_out;
  logic [31:0] fsm1_in;
  logic fsm1_write_en;
  logic fsm1_clk;
  logic [31:0] fsm1_out;
  logic fsm1_done;
  logic cond_stored0_in;
  logic cond_stored0_write_en;
  logic cond_stored0_clk;
  logic cond_stored0_out;
  logic cond_stored0_done;
  logic [31:0] incr1_left;
  logic [31:0] incr1_right;
  logic [31:0] incr1_out;
  logic [31:0] fsm2_in;
  logic fsm2_write_en;
  logic fsm2_clk;
  logic [31:0] fsm2_out;
  logic fsm2_done;
  logic [31:0] incr2_left;
  logic [31:0] incr2_right;
  logic [31:0] incr2_out;
  
  // Subcomponent Instances
  std_reg #(32) z_0 (
      .in(z_0_in),
      .write_en(z_0_write_en),
      .clk(clk),
      .out(z_0_out),
      .done(z_0_done)
  );
  
  std_reg #(32) y_0 (
      .in(y_0_in),
      .write_en(y_0_write_en),
      .clk(clk),
      .out(y_0_out),
      .done(y_0_done)
  );
  
  std_gt #(32) gt0 (
      .left(gt0_left),
      .right(gt0_right),
      .out(gt0_out)
  );
  
  std_const #(32, 40) const4 (
      .out(const4_out)
  );
  
  std_const #(32, 20) const3 (
      .out(const3_out)
  );
  
  std_const #(32, 5) const2 (
      .out(const2_out)
  );
  
  std_const #(32, 1) const1 (
      .out(const1_out)
  );
  
  std_const #(32, 10) const0 (
      .out(const0_out)
  );
  
  std_reg #(32) b_0 (
      .in(b_0_in),
      .write_en(b_0_write_en),
      .clk(clk),
      .out(b_0_out),
      .done(b_0_done)
  );
  
  std_reg #(32) a_0 (
      .in(a_0_in),
      .write_en(a_0_write_en),
      .clk(clk),
      .out(a_0_out),
      .done(a_0_done)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  std_add #(32) incr0 (
      .left(incr0_left),
      .right(incr0_right),
      .out(incr0_out)
  );
  
  std_reg #(32) fsm1 (
      .in(fsm1_in),
      .write_en(fsm1_write_en),
      .clk(clk),
      .out(fsm1_out),
      .done(fsm1_done)
  );
  
  std_reg #(1) cond_stored0 (
      .in(cond_stored0_in),
      .write_en(cond_stored0_write_en),
      .clk(clk),
      .out(cond_stored0_out),
      .done(cond_stored0_done)
  );
  
  std_add #(32) incr1 (
      .left(incr1_left),
      .right(incr1_right),
      .out(incr1_out)
  );
  
  std_reg #(32) fsm2 (
      .in(fsm2_in),
      .write_en(fsm2_write_en),
      .clk(clk),
      .out(fsm2_out),
      .done(fsm2_done)
  );
  
  std_add #(32) incr2 (
      .left(incr2_left),
      .right(incr2_right),
      .out(incr2_out)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      
  end
  
   final begin
      
  end
  
  // Input / output connections
  always_comb begin
    if ((fsm2_out == 32'd3))
      done = 1'd1;
    else 
      done = '0;
    
    if ((fsm1_out > 32'd0 & fsm1_out < 32'd2 & !cond_stored0_out & fsm2_out >= 32'd1 & fsm2_out < 32'd3 & go))
      z_0_in = const4_out;
    else 
      z_0_in = '0;
    
    if ((fsm1_out > 32'd0 & fsm1_out < 32'd2 & !cond_stored0_out & fsm2_out >= 32'd1 & fsm2_out < 32'd3 & go))
      z_0_write_en = 1'd1;
    else 
      z_0_write_en = '0;
    
    if ((fsm1_out > 32'd0 & fsm1_out < 32'd2 & cond_stored0_out & fsm2_out >= 32'd1 & fsm2_out < 32'd3 & go))
      y_0_in = const3_out;
    else 
      y_0_in = '0;
    
    if ((fsm1_out > 32'd0 & fsm1_out < 32'd2 & cond_stored0_out & fsm2_out >= 32'd1 & fsm2_out < 32'd3 & go))
      y_0_write_en = 1'd1;
    else 
      y_0_write_en = '0;
    
    if ((fsm1_out == 32'd0 & fsm2_out >= 32'd1 & fsm2_out < 32'd3 & go))
      gt0_left = a_0_out;
    else 
      gt0_left = '0;
    
    if ((fsm1_out == 32'd0 & fsm2_out >= 32'd1 & fsm2_out < 32'd3 & go))
      gt0_right = const2_out;
    else 
      gt0_right = '0;
    
    if ((fsm0_out <= 32'd1 & fsm2_out == 32'd0 & go))
      b_0_in = const1_out;
    else 
      b_0_in = '0;
    
    if ((fsm0_out <= 32'd1 & fsm2_out == 32'd0 & go))
      b_0_write_en = 1'd1;
    else 
      b_0_write_en = '0;
    
    if ((fsm0_out <= 32'd1 & fsm2_out == 32'd0 & go))
      a_0_in = const0_out;
    else 
      a_0_in = '0;
    
    if ((fsm0_out <= 32'd1 & fsm2_out == 32'd0 & go))
      a_0_write_en = 1'd1;
    else 
      a_0_write_en = '0;
    
    if ((fsm0_out != 32'd1 & fsm2_out == 32'd0 & go))
      fsm0_in = incr0_out;
    else if ((fsm0_out == 32'd1))
      fsm0_in = 32'd0;
    else 
      fsm0_in = '0;
    
    if ((fsm0_out != 32'd1 & fsm2_out == 32'd0 & go | fsm0_out == 32'd1))
      fsm0_write_en = 1'd1;
    else 
      fsm0_write_en = '0;
    
    if ((fsm2_out == 32'd0 & go))
      incr0_left = 32'd1;
    else 
      incr0_left = '0;
    
    if ((fsm2_out == 32'd0 & go))
      incr0_right = fsm0_out;
    else 
      incr0_right = '0;
    
    if ((fsm1_out != 32'd2 & fsm2_out >= 32'd1 & fsm2_out < 32'd3 & go))
      fsm1_in = incr1_out;
    else if ((fsm1_out == 32'd2))
      fsm1_in = 32'd0;
    else 
      fsm1_in = '0;
    
    if ((fsm1_out != 32'd2 & fsm2_out >= 32'd1 & fsm2_out < 32'd3 & go | fsm1_out == 32'd2))
      fsm1_write_en = 1'd1;
    else 
      fsm1_write_en = '0;
    
    if ((fsm1_out == 32'd0 & fsm2_out >= 32'd1 & fsm2_out < 32'd3 & go))
      cond_stored0_in = gt0_out;
    else 
      cond_stored0_in = '0;
    
    if ((fsm1_out == 32'd0 & fsm2_out >= 32'd1 & fsm2_out < 32'd3 & go))
      cond_stored0_write_en = 1'd1;
    else 
      cond_stored0_write_en = '0;
    
    if ((fsm2_out >= 32'd1 & fsm2_out < 32'd3 & go))
      incr1_left = fsm1_out;
    else 
      incr1_left = '0;
    
    if ((fsm2_out >= 32'd1 & fsm2_out < 32'd3 & go))
      incr1_right = 32'd1;
    else 
      incr1_right = '0;
    
    if ((fsm2_out != 32'd3 & go))
      fsm2_in = incr2_out;
    else if ((fsm2_out == 32'd3))
      fsm2_in = 32'd0;
    else 
      fsm2_in = '0;
    
    if ((fsm2_out != 32'd3 & go | fsm2_out == 32'd3))
      fsm2_write_en = 1'd1;
    else 
      fsm2_write_en = '0;
    
    if (go)
      incr2_left = 32'd1;
    else 
      incr2_left = '0;
    
    if (go)
      incr2_right = fsm2_out;
    else 
      incr2_right = '0;
    
  end
endmodule // end main