/* verilator lint_off WIDTH */
module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (output logic [width - 1:0] out);
  assign out = value;
endmodule

module std_lt
  #(parameter width = 32)
  (input logic [width-1:0] left,
    input logic [width-1:0] right,
    output logic            out);
  assign out = left < right;
endmodule

// Component Signature
module main (
      input logic go,
      input logic clk,
      output logic done
  );
  
  // Structure wire declarations
  logic [31:0] y0_in;
  logic y0_write_en;
  logic y0_clk;
  logic [31:0] y0_out;
  logic y0_done;
  logic [31:0] x0_in;
  logic x0_write_en;
  logic x0_clk;
  logic [31:0] x0_out;
  logic x0_done;
  logic [31:0] lt0_left;
  logic [31:0] lt0_right;
  logic lt0_out;
  logic [31:0] const4_out;
  logic [31:0] const3_out;
  logic [31:0] const2_out;
  logic [31:0] const1_out;
  logic [31:0] const0_out;
  logic [31:0] add1_left;
  logic [31:0] add1_right;
  logic [31:0] add1_out;
  logic [31:0] add0_left;
  logic [31:0] add0_right;
  logic [31:0] add0_out;
  logic [31:0] fsm0_in;
  logic fsm0_write_en;
  logic fsm0_clk;
  logic [31:0] fsm0_out;
  logic fsm0_done;
  logic [31:0] incr0_left;
  logic [31:0] incr0_right;
  logic [31:0] incr0_out;
  logic cond_computed0_in;
  logic cond_computed0_write_en;
  logic cond_computed0_clk;
  logic cond_computed0_out;
  logic cond_computed0_done;
  logic cond_stored0_in;
  logic cond_stored0_write_en;
  logic cond_stored0_clk;
  logic cond_stored0_out;
  logic cond_stored0_done;
  logic done_reg0_in;
  logic done_reg0_write_en;
  logic done_reg0_clk;
  logic done_reg0_out;
  logic done_reg0_done;
  logic [31:0] fsm1_in;
  logic fsm1_write_en;
  logic fsm1_clk;
  logic [31:0] fsm1_out;
  logic fsm1_done;
  
  // Subcomponent Instances
  std_reg #(32) y0 (
      .in(y0_in),
      .write_en(y0_write_en),
      .clk(clk),
      .out(y0_out),
      .done(y0_done)
  );
  
  std_reg #(32) x0 (
      .in(x0_in),
      .write_en(x0_write_en),
      .clk(clk),
      .out(x0_out),
      .done(x0_done)
  );
  
  std_lt #(32) lt0 (
      .left(lt0_left),
      .right(lt0_right),
      .out(lt0_out)
  );
  
  std_const #(32, 1) const4 (
      .out(const4_out)
  );
  
  std_const #(32, 1) const3 (
      .out(const3_out)
  );
  
  std_const #(32, 10) const2 (
      .out(const2_out)
  );
  
  std_const #(32, 0) const1 (
      .out(const1_out)
  );
  
  std_const #(32, 0) const0 (
      .out(const0_out)
  );
  
  std_add #(32) add1 (
      .left(add1_left),
      .right(add1_right),
      .out(add1_out)
  );
  
  std_add #(32) add0 (
      .left(add0_left),
      .right(add0_right),
      .out(add0_out)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  std_add #(32) incr0 (
      .left(incr0_left),
      .right(incr0_right),
      .out(incr0_out)
  );
  
  std_reg #(1) cond_computed0 (
      .in(cond_computed0_in),
      .write_en(cond_computed0_write_en),
      .clk(clk),
      .out(cond_computed0_out),
      .done(cond_computed0_done)
  );
  
  std_reg #(1) cond_stored0 (
      .in(cond_stored0_in),
      .write_en(cond_stored0_write_en),
      .clk(clk),
      .out(cond_stored0_out),
      .done(cond_stored0_done)
  );
  
  std_reg #(1) done_reg0 (
      .in(done_reg0_in),
      .write_en(done_reg0_write_en),
      .clk(clk),
      .out(done_reg0_out),
      .done(done_reg0_done)
  );
  
  std_reg #(32) fsm1 (
      .in(fsm1_in),
      .write_en(fsm1_write_en),
      .clk(clk),
      .out(fsm1_out),
      .done(fsm1_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      
  end
  
   final begin
      
  end
  
  // Input / output connections
  always_comb begin
    if ((fsm1_out == 32'd3))
      done = 1'd1;
    else 
      done = '0;
    
    if ((fsm1_out == 32'd1 & !y0_done & go))
      y0_in = const1_out;
    else if ((fsm0_out <= 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd1) & fsm1_out == 32'd2 & !done_reg0_out & go))
      y0_in = add1_out;
    else 
      y0_in = '0;
    
    if ((fsm1_out == 32'd1 & !y0_done & go | fsm0_out <= 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd1) & fsm1_out == 32'd2 & !done_reg0_out & go))
      y0_write_en = 1'd1;
    else 
      y0_write_en = '0;
    
    if ((fsm1_out == 32'd0 & !x0_done & go))
      x0_in = const0_out;
    else if ((fsm0_out <= 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd1) & fsm1_out == 32'd2 & !done_reg0_out & go))
      x0_in = add0_out;
    else 
      x0_in = '0;
    
    if ((fsm1_out == 32'd0 & !x0_done & go | fsm0_out <= 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd1) & fsm1_out == 32'd2 & !done_reg0_out & go))
      x0_write_en = 1'd1;
    else 
      x0_write_en = '0;
    
    if ((!cond_computed0_out & fsm1_out == 32'd2 & !done_reg0_out & go))
      lt0_left = x0_out;
    else 
      lt0_left = '0;
    
    if ((!cond_computed0_out & fsm1_out == 32'd2 & !done_reg0_out & go))
      lt0_right = const2_out;
    else 
      lt0_right = '0;
    
    if ((fsm0_out <= 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd1) & fsm1_out == 32'd2 & !done_reg0_out & go))
      add1_left = y0_out;
    else 
      add1_left = '0;
    
    if ((fsm0_out <= 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd1) & fsm1_out == 32'd2 & !done_reg0_out & go))
      add1_right = const4_out;
    else 
      add1_right = '0;
    
    if ((fsm0_out <= 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd1) & fsm1_out == 32'd2 & !done_reg0_out & go))
      add0_left = x0_out;
    else 
      add0_left = '0;
    
    if ((fsm0_out <= 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd1) & fsm1_out == 32'd2 & !done_reg0_out & go))
      add0_right = const3_out;
    else 
      add0_right = '0;
    
    if ((fsm0_out != 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd1) & fsm1_out == 32'd2 & !done_reg0_out & go))
      fsm0_in = incr0_out;
    else if ((fsm0_out == 32'd1))
      fsm0_in = 32'd0;
    else 
      fsm0_in = '0;
    
    if ((fsm0_out != 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd1) & fsm1_out == 32'd2 & !done_reg0_out & go | fsm0_out == 32'd1))
      fsm0_write_en = 1'd1;
    else 
      fsm0_write_en = '0;
    
    if ((cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd1) & fsm1_out == 32'd2 & !done_reg0_out & go))
      incr0_left = 32'd1;
    else 
      incr0_left = '0;
    
    if ((cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd1) & fsm1_out == 32'd2 & !done_reg0_out & go))
      incr0_right = fsm0_out;
    else 
      incr0_right = '0;
    
    if ((cond_stored0_out & cond_computed0_out & fsm0_out == 32'd1 & fsm1_out == 32'd2 & !done_reg0_out & go | cond_computed0_out & !cond_stored0_out & fsm1_out == 32'd2 & !done_reg0_out & go))
      cond_computed0_in = 1'd0;
    else if ((!cond_computed0_out & fsm1_out == 32'd2 & !done_reg0_out & go))
      cond_computed0_in = 1'd1;
    else 
      cond_computed0_in = '0;
    
    if ((!cond_computed0_out & fsm1_out == 32'd2 & !done_reg0_out & go | cond_stored0_out & cond_computed0_out & fsm0_out == 32'd1 & fsm1_out == 32'd2 & !done_reg0_out & go | cond_computed0_out & !cond_stored0_out & fsm1_out == 32'd2 & !done_reg0_out & go))
      cond_computed0_write_en = 1'd1;
    else 
      cond_computed0_write_en = '0;
    
    if ((!cond_computed0_out & fsm1_out == 32'd2 & !done_reg0_out & go))
      cond_stored0_in = lt0_out;
    else 
      cond_stored0_in = '0;
    
    if ((!cond_computed0_out & fsm1_out == 32'd2 & !done_reg0_out & go))
      cond_stored0_write_en = 1'd1;
    else 
      cond_stored0_write_en = '0;
    
    if (done_reg0_out)
      done_reg0_in = 1'd0;
    else if ((cond_computed0_out & !cond_stored0_out & fsm1_out == 32'd2 & !done_reg0_out & go))
      done_reg0_in = 1'd1;
    else 
      done_reg0_in = '0;
    
    if ((cond_computed0_out & !cond_stored0_out & fsm1_out == 32'd2 & !done_reg0_out & go | done_reg0_out))
      done_reg0_write_en = 1'd1;
    else 
      done_reg0_write_en = '0;
    
    if ((fsm1_out == 32'd2 & done_reg0_out & go))
      fsm1_in = 32'd3;
    else if ((fsm1_out == 32'd1 & y0_done & go))
      fsm1_in = 32'd2;
    else if ((fsm1_out == 32'd3))
      fsm1_in = 32'd0;
    else if ((fsm1_out == 32'd0 & x0_done & go))
      fsm1_in = 32'd1;
    else 
      fsm1_in = '0;
    
    if ((fsm1_out == 32'd0 & x0_done & go | fsm1_out == 32'd1 & y0_done & go | fsm1_out == 32'd2 & done_reg0_out & go | fsm1_out == 32'd3))
      fsm1_write_en = 1'd1;
    else 
      fsm1_write_en = '0;
    
  end
endmodule // end main