/* verilator lint_off WIDTH */
module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (output logic [width - 1:0] out);
  assign out = value;
endmodule

module std_lt
  #(parameter width = 32)
  (input logic [width-1:0] left,
    input logic [width-1:0] right,
    output logic            out);
  assign out = left < right;
endmodule

// Component Signature
module main (
      input wire go,
      input wire clk,
      output wire done
  );
  
  // Structure wire declarations
  wire [31:0] y0_in;
  wire y0_write_en;
  wire y0_clk;
  wire [31:0] y0_out;
  wire y0_done;
  wire [31:0] x0_in;
  wire x0_write_en;
  wire x0_clk;
  wire [31:0] x0_out;
  wire x0_done;
  wire [31:0] lt1_left;
  wire [31:0] lt1_right;
  wire lt1_out;
  wire [31:0] lt0_left;
  wire [31:0] lt0_right;
  wire lt0_out;
  wire [31:0] const5_out;
  wire [31:0] const4_out;
  wire [31:0] const3_out;
  wire [31:0] const2_out;
  wire [31:0] const1_out;
  wire [31:0] const0_out;
  wire [31:0] add1_left;
  wire [31:0] add1_right;
  wire [31:0] add1_out;
  wire [31:0] add0_left;
  wire [31:0] add0_right;
  wire [31:0] add0_out;
  wire cond_computed0_in;
  wire cond_computed0_write_en;
  wire cond_computed0_clk;
  wire cond_computed0_out;
  wire cond_computed0_done;
  wire cond_stored0_in;
  wire cond_stored0_write_en;
  wire cond_stored0_clk;
  wire cond_stored0_out;
  wire cond_stored0_done;
  wire done_reg0_in;
  wire done_reg0_write_en;
  wire done_reg0_clk;
  wire done_reg0_out;
  wire done_reg0_done;
  wire cond_computed1_in;
  wire cond_computed1_write_en;
  wire cond_computed1_clk;
  wire cond_computed1_out;
  wire cond_computed1_done;
  wire cond_stored1_in;
  wire cond_stored1_write_en;
  wire cond_stored1_clk;
  wire cond_stored1_out;
  wire cond_stored1_done;
  wire done_reg1_in;
  wire done_reg1_write_en;
  wire done_reg1_clk;
  wire done_reg1_out;
  wire done_reg1_done;
  wire par_reset0_in;
  wire par_reset0_write_en;
  wire par_reset0_clk;
  wire par_reset0_out;
  wire par_reset0_done;
  wire par_done_reg0_in;
  wire par_done_reg0_write_en;
  wire par_done_reg0_clk;
  wire par_done_reg0_out;
  wire par_done_reg0_done;
  wire par_done_reg1_in;
  wire par_done_reg1_write_en;
  wire par_done_reg1_clk;
  wire par_done_reg1_out;
  wire par_done_reg1_done;
  wire [31:0] fsm0_in;
  wire fsm0_write_en;
  wire fsm0_clk;
  wire [31:0] fsm0_out;
  wire fsm0_done;
  
  // Subcomponent Instances
  std_reg #(32) y0 (
      .in(y0_in),
      .write_en(y0_write_en),
      .clk(clk),
      .out(y0_out),
      .done(y0_done)
  );
  
  std_reg #(32) x0 (
      .in(x0_in),
      .write_en(x0_write_en),
      .clk(clk),
      .out(x0_out),
      .done(x0_done)
  );
  
  std_lt #(32) lt1 (
      .left(lt1_left),
      .right(lt1_right),
      .out(lt1_out)
  );
  
  std_lt #(32) lt0 (
      .left(lt0_left),
      .right(lt0_right),
      .out(lt0_out)
  );
  
  std_const #(32, 1) const5 (
      .out(const5_out)
  );
  
  std_const #(32, 10) const4 (
      .out(const4_out)
  );
  
  std_const #(32, 1) const3 (
      .out(const3_out)
  );
  
  std_const #(32, 10) const2 (
      .out(const2_out)
  );
  
  std_const #(32, 0) const1 (
      .out(const1_out)
  );
  
  std_const #(32, 0) const0 (
      .out(const0_out)
  );
  
  std_add #(32) add1 (
      .left(add1_left),
      .right(add1_right),
      .out(add1_out)
  );
  
  std_add #(32) add0 (
      .left(add0_left),
      .right(add0_right),
      .out(add0_out)
  );
  
  std_reg #(1) cond_computed0 (
      .in(cond_computed0_in),
      .write_en(cond_computed0_write_en),
      .clk(clk),
      .out(cond_computed0_out),
      .done(cond_computed0_done)
  );
  
  std_reg #(1) cond_stored0 (
      .in(cond_stored0_in),
      .write_en(cond_stored0_write_en),
      .clk(clk),
      .out(cond_stored0_out),
      .done(cond_stored0_done)
  );
  
  std_reg #(1) done_reg0 (
      .in(done_reg0_in),
      .write_en(done_reg0_write_en),
      .clk(clk),
      .out(done_reg0_out),
      .done(done_reg0_done)
  );
  
  std_reg #(1) cond_computed1 (
      .in(cond_computed1_in),
      .write_en(cond_computed1_write_en),
      .clk(clk),
      .out(cond_computed1_out),
      .done(cond_computed1_done)
  );
  
  std_reg #(1) cond_stored1 (
      .in(cond_stored1_in),
      .write_en(cond_stored1_write_en),
      .clk(clk),
      .out(cond_stored1_out),
      .done(cond_stored1_done)
  );
  
  std_reg #(1) done_reg1 (
      .in(done_reg1_in),
      .write_en(done_reg1_write_en),
      .clk(clk),
      .out(done_reg1_out),
      .done(done_reg1_done)
  );
  
  std_reg #(1) par_reset0 (
      .in(par_reset0_in),
      .write_en(par_reset0_write_en),
      .clk(clk),
      .out(par_reset0_out),
      .done(par_reset0_done)
  );
  
  std_reg #(1) par_done_reg0 (
      .in(par_done_reg0_in),
      .write_en(par_done_reg0_write_en),
      .clk(clk),
      .out(par_done_reg0_out),
      .done(par_done_reg0_done)
  );
  
  std_reg #(1) par_done_reg1 (
      .in(par_done_reg1_in),
      .write_en(par_done_reg1_write_en),
      .clk(clk),
      .out(par_done_reg1_out),
      .done(par_done_reg1_done)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      
  end
  
   final begin
      
  end
  
  // Input / output connections
  assign done = (fsm0_out == 32'd3) ? 1'd1 : '0;
  assign y0_in = (fsm0_out == 32'd1 & !y0_done & go) ? const1_out : (cond_stored1_out & cond_computed1_out & !y0_done & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? add1_out : '0;
  assign y0_write_en = (fsm0_out == 32'd1 & !y0_done & go | cond_stored1_out & cond_computed1_out & !y0_done & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd1 : '0;
  assign x0_in = (fsm0_out == 32'd0 & !x0_done & go) ? const0_out : (cond_stored0_out & cond_computed0_out & !x0_done & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? add0_out : '0;
  assign x0_write_en = (fsm0_out == 32'd0 & !x0_done & go | cond_stored0_out & cond_computed0_out & !x0_done & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd1 : '0;
  assign lt1_left = (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? y0_out : '0;
  assign lt1_right = (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? const4_out : '0;
  assign lt0_left = (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? x0_out : '0;
  assign lt0_right = (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? const2_out : '0;
  assign add1_left = (cond_stored1_out & cond_computed1_out & !y0_done & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? y0_out : '0;
  assign add1_right = (cond_stored1_out & cond_computed1_out & !y0_done & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? const5_out : '0;
  assign add0_left = (cond_stored0_out & cond_computed0_out & !x0_done & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? x0_out : '0;
  assign add0_right = (cond_stored0_out & cond_computed0_out & !x0_done & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? const3_out : '0;
  assign cond_computed0_in = (cond_stored0_out & cond_computed0_out & x0_done & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go | cond_computed0_out & !cond_stored0_out & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd0 : (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd1 : '0;
  assign cond_computed0_write_en = (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go | cond_stored0_out & cond_computed0_out & x0_done & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go | cond_computed0_out & !cond_stored0_out & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd1 : '0;
  assign cond_stored0_in = (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? lt0_out : '0;
  assign cond_stored0_write_en = (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd1 : '0;
  assign done_reg0_in = done_reg0_out ? 1'd0 : (cond_computed0_out & !cond_stored0_out & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd1 : '0;
  assign done_reg0_write_en = (cond_computed0_out & !cond_stored0_out & !(par_done_reg0_out | done_reg0_out) & fsm0_out == 32'd2 & !par_reset0_out & go | done_reg0_out) ? 1'd1 : '0;
  assign cond_computed1_in = (cond_stored1_out & cond_computed1_out & y0_done & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go | cond_computed1_out & !cond_stored1_out & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd0 : (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd1 : '0;
  assign cond_computed1_write_en = (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go | cond_stored1_out & cond_computed1_out & y0_done & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go | cond_computed1_out & !cond_stored1_out & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd1 : '0;
  assign cond_stored1_in = (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? lt1_out : '0;
  assign cond_stored1_write_en = (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd1 : '0;
  assign done_reg1_in = done_reg1_out ? 1'd0 : (cond_computed1_out & !cond_stored1_out & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd1 : '0;
  assign done_reg1_write_en = (cond_computed1_out & !cond_stored1_out & !(par_done_reg1_out | done_reg1_out) & fsm0_out == 32'd2 & !par_reset0_out & go | done_reg1_out) ? 1'd1 : '0;
  assign par_reset0_in = par_reset0_out ? 1'd0 : (par_done_reg0_out & par_done_reg1_out & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd1 : '0;
  assign par_reset0_write_en = (par_done_reg0_out & par_done_reg1_out & fsm0_out == 32'd2 & !par_reset0_out & go | par_reset0_out) ? 1'd1 : '0;
  assign par_done_reg0_in = par_reset0_out ? 1'd0 : (done_reg0_out & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd1 : '0;
  assign par_done_reg0_write_en = (done_reg0_out & fsm0_out == 32'd2 & !par_reset0_out & go | par_reset0_out) ? 1'd1 : '0;
  assign par_done_reg1_in = par_reset0_out ? 1'd0 : (done_reg1_out & fsm0_out == 32'd2 & !par_reset0_out & go) ? 1'd1 : '0;
  assign par_done_reg1_write_en = (done_reg1_out & fsm0_out == 32'd2 & !par_reset0_out & go | par_reset0_out) ? 1'd1 : '0;
  assign fsm0_in = (fsm0_out == 32'd2 & par_reset0_out & go) ? 32'd3 : (fsm0_out == 32'd1 & y0_done & go) ? 32'd2 : (fsm0_out == 32'd0 & x0_done & go) ? 32'd1 : (fsm0_out == 32'd3) ? 32'd0 : '0;
  assign fsm0_write_en = (fsm0_out == 32'd0 & x0_done & go | fsm0_out == 32'd1 & y0_done & go | fsm0_out == 32'd2 & par_reset0_out & go | fsm0_out == 32'd3) ? 1'd1 : '0;
endmodule // end main