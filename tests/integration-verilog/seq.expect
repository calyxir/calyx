/* verilator lint_off PINMISSING */
module std_reg
  #(parameter width = 32,
    parameter reset_val = 0)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (input logic                valid,
    output logic               ready,
    output logic [width - 1:0] out,
    output logic               out_read_out);
  assign out = value;
  assign ready = valid;
  assign out_read_out = valid;
endmodule

// Component Signature
module main (
      input wire clk,
      input wire go,
      output wire done
  );
  
  // Structure wire declarations
  wire [31:0] a_in;
  wire a_write_en;
  wire a_clk;
  wire [31:0] a_out;
  wire a_done;
  wire const0_valid;
  wire [31:0] const0_out;
  wire const0_out_read_out;
  wire const0_ready;
  wire const1_valid;
  wire [31:0] const1_out;
  wire const1_out_read_out;
  wire const1_ready;
  wire const2_valid;
  wire [31:0] const2_out;
  wire const2_out_read_out;
  wire const2_ready;
  wire const3_valid;
  wire [31:0] const3_out;
  wire const3_out_read_out;
  wire const3_ready;
  wire [31:0] x_in;
  wire x_write_en;
  wire x_clk;
  wire [31:0] x_out;
  wire x_done;
  wire [31:0] y_in;
  wire y_write_en;
  wire y_clk;
  wire [31:0] y_out;
  wire y_done;
  wire [31:0] z_in;
  wire z_write_en;
  wire z_clk;
  wire [31:0] z_out;
  wire z_done;
  wire [31:0] fsm0_in;
  wire fsm0_write_en;
  wire fsm0_clk;
  wire [31:0] fsm0_out;
  wire fsm0_done;
  
  // Subcomponent Instances
  std_reg #(32) a (
      .in(a_in),
      .write_en(a_write_en),
      .clk(clk),
      .out(a_out),
      .done(a_done)
  );
  
  std_const #(32, 1) const0 (
      .out(const0_out),
      .out_read_out(const0_out_read_out),
      .ready(const0_ready)
  );
  
  std_const #(32, 2) const1 (
      .out(const1_out),
      .out_read_out(const1_out_read_out),
      .ready(const1_ready)
  );
  
  std_const #(32, 3) const2 (
      .out(const2_out),
      .out_read_out(const2_out_read_out),
      .ready(const2_ready)
  );
  
  std_const #(32, 4) const3 (
      .out(const3_out),
      .out_read_out(const3_out_read_out),
      .ready(const3_ready)
  );
  
  std_reg #(32) x (
      .in(x_in),
      .write_en(x_write_en),
      .clk(clk),
      .out(x_out),
      .done(x_done)
  );
  
  std_reg #(32) y (
      .in(y_in),
      .write_en(y_write_en),
      .clk(clk),
      .out(y_out),
      .done(y_done)
  );
  
  std_reg #(32) z (
      .in(z_in),
      .write_en(z_write_en),
      .clk(clk),
      .out(z_out),
      .done(z_done)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  // Input / output connections
  assign done = (((fsm0_out == 32'd4) & 1'd1) ? 1'd1 : '0);
  assign a_in = (((((fsm0_out == 32'd3) & !a_done) & go) & 1'd1) ? const3_out : '0);
  assign a_write_en = (((((fsm0_out == 32'd3) & !a_done) & go) & 1'd1) ? 1'd1 : '0);
  assign x_in = (((((fsm0_out == 32'd0) & !x_done) & go) & 1'd1) ? const0_out : '0);
  assign x_write_en = (((((fsm0_out == 32'd0) & !x_done) & go) & 1'd1) ? 1'd1 : '0);
  assign y_in = (((((fsm0_out == 32'd1) & !y_done) & go) & 1'd1) ? const1_out : '0);
  assign y_write_en = (((((fsm0_out == 32'd1) & !y_done) & go) & 1'd1) ? 1'd1 : '0);
  assign z_in = (((((fsm0_out == 32'd2) & !z_done) & go) & 1'd1) ? const2_out : '0);
  assign z_write_en = (((((fsm0_out == 32'd2) & !z_done) & go) & 1'd1) ? 1'd1 : '0);
  assign fsm0_in = ((((fsm0_out == 32'd0) & x_done) & go) ? 32'd1 : ((((fsm0_out == 32'd1) & y_done) & go) ? 32'd2 : ((((fsm0_out == 32'd2) & z_done) & go) ? 32'd3 : ((((fsm0_out == 32'd3) & a_done) & go) ? 32'd4 : ((fsm0_out == 32'd4) ? 32'd0 : '0)))));
  assign fsm0_write_en = ((((fsm0_out == 32'd0) & x_done) & go) ? 1'd1 : ((((fsm0_out == 32'd1) & y_done) & go) ? 1'd1 : ((((fsm0_out == 32'd2) & z_done) & go) ? 1'd1 : ((((fsm0_out == 32'd3) & a_done) & go) ? 1'd1 : ((fsm0_out == 32'd4) ? 1'd1 : '0)))));
endmodule // end main