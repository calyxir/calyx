import "primitives/core.futil";
import "primitives/binary_operators.futil";
import "primitives/memories/seq.futil";
component exp<"pos"={0}>(x: 32) -> (out: 32) {
  cells {
    @pos{1} exponent_value = std_reg(32);
    @pos{2} int_x = std_reg(32);
    @pos{3} frac_x = std_reg(32);
    @pos{4} m = std_reg(32);
    @pos{5} and0 = std_and(32);
    @pos{6} and1 = std_and(32);
    @pos{7} rsh = std_rsh(32);
    @pos{8} c2 = std_const(32, 2);
    @pos{9} one = std_const(32, 65536);
    @pos{10} e = std_const(32, 178145);
    @pos{11} product2 = std_reg(32);
    @pos{12} p2 = std_reg(32);
    @pos{13} sum1 = std_reg(32);
    @pos{14} add1 = std_fp_add(32, 16, 16);
    @pos{15} mult_pipe1 = std_fp_mult_pipe(32, 16, 16);
    @pos{15} mult_pipe2 = std_fp_mult_pipe(32, 16, 16);
    @pos{16} reciprocal_factorial2 = std_const(32, 32768);
    @pos{17} pow1 = fp_pow();
    @pos{17} pow2 = fp_pow();
  }
  wires {
    group init<"pos"={18}, "promotable"=1> {
      exponent_value.write_en = 1'd1;
      exponent_value.in = x;
      init[done] = exponent_value.done;
    }
    group split_bits_int_x<"pos"={19}> {
      and0.left = exponent_value.out;
      and0.right = 32'd4294901760;
      rsh.left = and0.out;
      rsh.right = 32'd16;
      int_x.write_en = 1'd1;
      int_x.in = rsh.out;
      split_bits_int_x[done] = int_x.done;
    }
    group split_bits_frac_x<"pos"={20}> {
      and1.left = exponent_value.out;
      and1.right = 32'd65535;
      frac_x.write_en = 1'd1;
      frac_x.in = and1.out;
      split_bits_frac_x[done] = frac_x.done;
    }
    group consume_pow2<"pos"={21}, "promotable"=1> {
      p2.write_en = 1'd1;
      p2.in = pow2.out;
      consume_pow2[done] = p2.done ? 1'd1;
    }
    group mult_by_reciprocal_factorial2<"pos"={22}> {
      mult_pipe2.left = p2.out;
      mult_pipe2.right = reciprocal_factorial2.out;
      mult_pipe2.go = !mult_pipe2.done ? 1'd1;
      product2.write_en = mult_pipe2.done;
      product2.in = mult_pipe2.out;
      mult_by_reciprocal_factorial2[done] = product2.done;
    }
    group sum_round1_1<"pos"={23}, "promotable"=1> {
      add1.left = frac_x.out;
      add1.right = product2.out;
      sum1.write_en = 1'd1;
      sum1.in = add1.out;
      sum_round1_1[done] = sum1.done;
    }
    group add_degree_zero<"pos"={24}, "promotable"=1> {
      add1.left = sum1.out;
      add1.right = one.out;
      sum1.write_en = 1'd1;
      sum1.in = add1.out;
      add_degree_zero[done] = sum1.done;
    }
    group final_multiply<"pos"={25}> {
      mult_pipe1.left = pow1.out;
      mult_pipe1.right = sum1.out;
      mult_pipe1.go = !mult_pipe1.done ? 1'd1;
      m.write_en = mult_pipe1.done;
      m.in = mult_pipe1.out;
      final_multiply[done] = m.done;
    }
    out = m.out;
  }
  control {
    @pos{33} seq {
      @pos{33} init;
      @pos{32} par {
        @pos{32} split_bits_int_x;
        @pos{32} split_bits_frac_x;
      }
      @pos{28} par {
        @pos{26} invoke pow1(base=e.out, integer_exp=int_x.out)();
        @pos{27} invoke pow2(base=frac_x.out, integer_exp=c2.out)();
      }
      @pos{29} par {
        @pos{29} consume_pow2;
      }
      @pos{30} par {
        @pos{30} mult_by_reciprocal_factorial2;
      }
      @pos{31} par {
        @pos{31} sum_round1_1;
      }
      @pos{33} add_degree_zero;
      @pos{33} final_multiply;
    }
  }
}
component fp_pow<"pos"={34}>(base: 32, integer_exp: 32) -> (out: 32) {
  cells {
    @pos{35} pow = std_reg(32);
    @pos{36} count = std_reg(32);
    @pos{37} mul = std_fp_mult_pipe(32, 16, 16);
    @pos{41} count_incr_1_1 = std_add(32);
    @pos{42} lt_2 = std_lt(32);
  }
  wires {
    group init_pow<"pos"={38}> {
      pow.in = 32'd65536;
      pow.write_en = 1'd1;
      init_pow[done] = pow.done;
    }
    group init_count<"pos"={39}> {
      count.in = 32'd0;
      count.write_en = 1'd1;
      init_count[done] = count.done;
    }
    group execute_mul<"pos"={40}> {
      mul.left = base;
      mul.right = pow.out;
      mul.go = !mul.done ? 1'd1;
      pow.write_en = mul.done;
      pow.in = mul.out;
      execute_mul[done] = pow.done;
    }
    group count_incr_1_1_group<"pos"={41}> {
      count_incr_1_1.left = count.out;
      count_incr_1_1.right = 32'd1;
      count.write_en = 1'd1;
      count.in = count_incr_1_1.out;
      count_incr_1_1_group[done] = count.done;
    }
    comb group lt_2_group {
      lt_2.left = count.out;
      lt_2.right = integer_exp;
    }
    out = pow.out;
  }
  control {
    @pos{45} seq {
      @pos{43} par {
        @pos{43} init_pow;
        @pos{43} init_count;
      }
      @pos{44} while lt_2.out with lt_2_group {
        @pos{44} par {
          @pos{44} execute_mul;
          @pos{44} count_incr_1_1_group;
        }
      }
    }
  }
}
component main<"pos"={46}>() -> () {
  cells {
    @pos{47} t = std_reg(32);
    @external @pos{48} x = seq_mem_d1(32, 1, 1);
    @external @pos{49} ret = seq_mem_d1(32, 1, 1);
    @pos{50} e = exp();
  }
  wires {
    group init<"pos"={51}> {
      x.addr0 = 1'd0;
      x.content_en = 1'd1;
      t.in = x.done ? x.read_data;
      t.write_en = x.done ? 1'd1;
      init[done] = t.done;
    }
    group write_to_memory<"pos"={52}> {
      ret.addr0 = 1'd0;
      ret.write_en = 1'd1;
      ret.write_data = e.out;
      write_to_memory[done] = ret.done;
      ret.content_en = 1'd1;
    }
  }
  control {
    @pos{54} seq {
      @pos{54} init;
      @pos{53} invoke e(x=t.out)();
      @pos{54} write_to_memory;
    }
  }
}

sourceinfo #{
FILES 
  0: gen_exp.py
POSITIONS 
  0: 0 488
  1: 0 93
  2: 0 94
  3: 0 95
  4: 0 96
  5: 0 98
  6: 0 99
  7: 0 100
  8: 0 106
  9: 0 109
  10: 0 114
  11: 0 136
  12: 0 139
  13: 0 143
  14: 0 146
  15: 0 155
  16: 0 176
  17: 0 180
  18: 0 308
  19: 0 321
  20: 0 329
  21: 0 259
  22: 0 271
  23: 0 224
  24: 0 247
  25: 0 293
  26: 0 379
  27: 0 385
  28: 0 378
  29: 0 397
  30: 0 400
  31: 0 411
  32: 0 442
  33: 0 427
  34: 0 36
  35: 0 42
  36: 0 43
  37: 0 44
  38: 0 52
  39: 0 59
  40: 0 64
  41: 0 72
  42: 0 74
  43: 0 80
  44: 0 81
  45: 0 79
  46: 0 740
  47: 0 742
  48: 0 743
  49: 0 744
  50: 0 745
  51: 0 747
  52: 0 754
  53: 0 758
  54: 0 756
}#
