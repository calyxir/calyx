import "primitives/core.futil";
import "primitives/binary_operators.futil";
import "primitives/pipelined.futil";
static<1> component mac_pe(top: 32, left: 32, mul_ready: 1) -> (out: 32) {
  cells {
    acc = std_reg(32);
    adder = std_fp_sadd(32, 16, 16);
    mul = pipelined_fp_smult(32, 16, 16);
  }
  wires {
    static<1> group do_add {
      adder.left = acc.out;
      adder.right = mul.out;
      acc.in = adder.out;
      acc.write_en = mul_ready;
    }
    static<1> group do_mul {
      mul.left = top;
      mul.right = left;
    }
    out = acc.out;
  }
  control {
    static par {
      do_add;
      do_mul;
    }
  }
}
component systolic_array_comp(depth: 32, t0_read_data: 32, l0_read_data: 32) -> (t0_addr0: 32, l0_addr0: 32, r0_valid: 1, r0_value: 32, r0_idx: 32) {
  cells {
    min_depth_4 = std_reg(32);
    lt_depth_4 = std_lt(32);
    iter_limit = std_reg(32);
    iter_limit_add = std_add(32);
    depth_plus_5 = std_add(32);
    depth_plus_0 = std_add(32);
    depth_plus_1 = std_add(32);
    min_depth_4_plus_1 = std_add(32);
    depth_plus_6 = std_add(32);
    pe_0_0 = mac_pe();
    top_0_0 = std_reg(32);
    left_0_0 = std_reg(32);
    t0_idx = std_reg(32);
    t0_add = std_add(32);
    l0_idx = std_reg(32);
    l0_add = std_add(32);
    idx = std_reg(32);
    idx_add = std_add(32);
    cond_reg = std_reg(1);
    lt_iter_limit = std_lt(32);
    idx_between_5_depth_plus_5_reg = std_reg(1);
    index_lt_depth_plus_5 = std_lt(32);
    index_ge_5 = std_ge(32);
    idx_between_5_depth_plus_5_comb = std_and(1);
    idx_between_0_depth_plus_0_reg = std_reg(1);
    index_lt_depth_plus_0 = std_lt(32);
    idx_between_1_depth_plus_1_reg = std_reg(1);
    index_lt_depth_plus_1 = std_lt(32);
    index_ge_1 = std_ge(32);
    idx_between_1_depth_plus_1_comb = std_and(1);
    idx_between_1_min_depth_4_plus_1_reg = std_reg(1);
    index_lt_min_depth_4_plus_1 = std_lt(32);
    idx_between_1_min_depth_4_plus_1_comb = std_and(1);
    idx_between_depth_plus_5_depth_plus_6_reg = std_reg(1);
    index_lt_depth_plus_6 = std_lt(32);
    index_ge_depth_plus_5 = std_ge(32);
    idx_between_depth_plus_5_depth_plus_6_comb = std_and(1);
  }
  wires {
    static<1> group init_min_depth {
      lt_depth_4.left = depth;
      lt_depth_4.right = 32'd4;
      min_depth_4.in = lt_depth_4.out ? depth;
      min_depth_4.in = !lt_depth_4.out ? 32'd4;
      min_depth_4.write_en = 1'd1;
    }
    static<1> group init_iter_limit {
      iter_limit_add.left = 32'd6;
      iter_limit_add.right = depth;
      iter_limit.in = iter_limit_add.out;
      iter_limit.write_en = 1'd1;
    }
    static<1> group depth_plus_5_group {
      depth_plus_5.left = depth;
      depth_plus_5.right = 32'd5;
    }
    static<1> group depth_plus_0_group {
      depth_plus_0.left = depth;
      depth_plus_0.right = 32'd0;
    }
    static<1> group depth_plus_1_group {
      depth_plus_1.left = depth;
      depth_plus_1.right = 32'd1;
    }
    static<1> group min_depth_4_plus_1_group {
      min_depth_4_plus_1.left = min_depth_4.out;
      min_depth_4_plus_1.right = 32'd1;
    }
    static<1> group depth_plus_6_group {
      depth_plus_6.left = depth;
      depth_plus_6.right = 32'd6;
    }
    static<1> group t0_idx_init {
      t0_idx.in = 32'd0;
      t0_idx.write_en = 1'd1;
    }
    static<1> group t0_idx_update {
      t0_add.left = 32'd1;
      t0_add.right = t0_idx.out;
      t0_idx.in = t0_add.out;
      t0_idx.write_en = 1'd1;
    }
    static<1> group t0_move {
      t0_addr0 = t0_idx.out;
      top_0_0.in = t0_read_data;
      top_0_0.write_en = 1'd1;
    }
    static<1> group l0_idx_init {
      l0_idx.in = 32'd0;
      l0_idx.write_en = 1'd1;
    }
    static<1> group l0_idx_update {
      l0_add.left = 32'd1;
      l0_add.right = l0_idx.out;
      l0_idx.in = l0_add.out;
      l0_idx.write_en = 1'd1;
    }
    static<1> group l0_move {
      l0_addr0 = l0_idx.out;
      left_0_0.in = l0_read_data;
      left_0_0.write_en = 1'd1;
    }
    static<1> group pe_0_0_out_write {
      r0_valid = 1'd1;
      r0_value = pe_0_0.out;
      r0_idx = 32'd0;
    }
    static<1> group init_idx {
      idx.in = 32'd0;
      idx.write_en = 1'd1;
    }
    static<1> group incr_idx {
      idx_add.left = idx.out;
      idx_add.right = 32'd1;
      idx.in = idx_add.out;
      idx.write_en = 1'd1;
    }
    static<1> group init_cond_reg {
      cond_reg.in = 1'd1;
      cond_reg.write_en = 1'd1;
    }
    static<1> group write_cond_reg {
      lt_iter_limit.left = idx_add.out;
      lt_iter_limit.right = iter_limit.out;
      cond_reg.in = lt_iter_limit.out;
      cond_reg.write_en = 1'd1;
    }
    static<1> group idx_between_5_depth_plus_5_group {
      index_ge_5.left = idx_add.out;
      index_ge_5.right = 32'd5;
      index_lt_depth_plus_5.left = idx_add.out;
      index_lt_depth_plus_5.right = depth_plus_5.out;
      idx_between_5_depth_plus_5_comb.left = index_ge_5.out;
      idx_between_5_depth_plus_5_comb.right = index_lt_depth_plus_5.out;
      idx_between_5_depth_plus_5_reg.in = idx_between_5_depth_plus_5_comb.out;
      idx_between_5_depth_plus_5_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_5_depth_plus_5 {
      idx_between_5_depth_plus_5_reg.in = 1'd0;
      idx_between_5_depth_plus_5_reg.write_en = 1'd1;
    }
    static<1> group idx_between_0_depth_plus_0_group {
      index_lt_depth_plus_0.left = idx_add.out;
      index_lt_depth_plus_0.right = depth_plus_0.out;
      idx_between_0_depth_plus_0_reg.in = index_lt_depth_plus_0.out;
      idx_between_0_depth_plus_0_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_0_depth_plus_0 {
      idx_between_0_depth_plus_0_reg.in = 1'd1;
      idx_between_0_depth_plus_0_reg.write_en = 1'd1;
    }
    static<1> group idx_between_1_depth_plus_1_group {
      index_ge_1.left = idx_add.out;
      index_ge_1.right = 32'd1;
      index_lt_depth_plus_1.left = idx_add.out;
      index_lt_depth_plus_1.right = depth_plus_1.out;
      idx_between_1_depth_plus_1_comb.left = index_ge_1.out;
      idx_between_1_depth_plus_1_comb.right = index_lt_depth_plus_1.out;
      idx_between_1_depth_plus_1_reg.in = idx_between_1_depth_plus_1_comb.out;
      idx_between_1_depth_plus_1_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_1_depth_plus_1 {
      idx_between_1_depth_plus_1_reg.in = 1'd0;
      idx_between_1_depth_plus_1_reg.write_en = 1'd1;
    }
    static<1> group idx_between_1_min_depth_4_plus_1_group {
      index_ge_1.left = idx_add.out;
      index_ge_1.right = 32'd1;
      index_lt_min_depth_4_plus_1.left = idx_add.out;
      index_lt_min_depth_4_plus_1.right = min_depth_4_plus_1.out;
      idx_between_1_min_depth_4_plus_1_comb.left = index_ge_1.out;
      idx_between_1_min_depth_4_plus_1_comb.right = index_lt_min_depth_4_plus_1.out;
      idx_between_1_min_depth_4_plus_1_reg.in = idx_between_1_min_depth_4_plus_1_comb.out;
      idx_between_1_min_depth_4_plus_1_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_1_min_depth_4_plus_1 {
      idx_between_1_min_depth_4_plus_1_reg.in = 1'd0;
      idx_between_1_min_depth_4_plus_1_reg.write_en = 1'd1;
    }
    static<1> group idx_between_depth_plus_5_depth_plus_6_group {
      index_ge_depth_plus_5.left = idx_add.out;
      index_ge_depth_plus_5.right = depth_plus_5.out;
      index_lt_depth_plus_6.left = idx_add.out;
      index_lt_depth_plus_6.right = depth_plus_6.out;
      idx_between_depth_plus_5_depth_plus_6_comb.left = index_ge_depth_plus_5.out;
      idx_between_depth_plus_5_depth_plus_6_comb.right = index_lt_depth_plus_6.out;
      idx_between_depth_plus_5_depth_plus_6_reg.in = idx_between_depth_plus_5_depth_plus_6_comb.out;
      idx_between_depth_plus_5_depth_plus_6_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_depth_plus_5_depth_plus_6 {
      idx_between_depth_plus_5_depth_plus_6_reg.in = 1'd0;
      idx_between_depth_plus_5_depth_plus_6_reg.write_en = 1'd1;
    }
  }
  control {
    seq {
      static par {
        t0_idx_init;
        l0_idx_init;
        init_idx;
        init_min_depth;
        init_cond_reg;
        init_iter_limit;
        init_idx_between_5_depth_plus_5;
        init_idx_between_0_depth_plus_0;
        init_idx_between_1_depth_plus_1;
        init_idx_between_1_min_depth_4_plus_1;
        init_idx_between_depth_plus_5_depth_plus_6;
      }
      while cond_reg.out {
        static par {
          static par {
            static par {
              static if idx_between_0_depth_plus_0_reg.out {
                static par {
                  l0_move;
                  l0_idx_update;
                  t0_move;
                  t0_idx_update;
                }
              }
              static if idx_between_1_min_depth_4_plus_1_reg.out {
                static par {
                  static invoke pe_0_0(top=top_0_0.out, left=left_0_0.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_5_depth_plus_5_reg.out {
                static par {
                  static invoke pe_0_0(top=top_0_0.out, left=left_0_0.out, mul_ready=1'd1)();
                }
              }
              static if idx_between_depth_plus_5_depth_plus_6_reg.out {
                static par {
                  pe_0_0_out_write;
                }
              }
            }
          }
          static par {
            incr_idx;
            write_cond_reg;
            idx_between_5_depth_plus_5_group;
            idx_between_0_depth_plus_0_group;
            idx_between_1_depth_plus_1_group;
            idx_between_1_min_depth_4_plus_1_group;
            idx_between_depth_plus_5_depth_plus_6_group;
            depth_plus_0_group;
            depth_plus_1_group;
            depth_plus_5_group;
            depth_plus_6_group;
            min_depth_4_plus_1_group;
          }
        }
      }
    }
  }
}
component default_post_op(out_mem_0_done: 1, r0_valid: 1, r0_value: 32, r0_idx: 32) -> (computation_done: 1, out_mem_0_addr0: 32, out_mem_0_write_data: 32, out_mem_0_write_en: 1) {
  cells {
    delay_reg = std_reg(1);
  }
  wires {
    static<1> group write_r0 {
      out_mem_0_write_en = r0_valid;
      out_mem_0_write_data = r0_value;
      out_mem_0_addr0 = r0_idx;
    }
    static<1> group write_done_cond {
      delay_reg.in = 1'd1;
      delay_reg.write_en = r0_valid & r0_idx == 32'd0 ? 1'd1;
      computation_done = delay_reg.done ? 1'd1;
    }
  }
  control {
    static par {
      write_done_cond;
      write_r0;
    }
  }
}
component main() -> () {
  cells {
    systolic_array_component = systolic_array_comp();
    post_op_component = default_post_op();
    @external t0 = std_mem_d1(32, 3, 32);
    @external l0 = std_mem_d1(32, 3, 32);
    @external out_mem_0 = std_mem_d1(32, 1, 32);
    systolic_done = std_reg(1);
    systolic_done_wire = std_wire(1);
  }
  wires {
    group perform_computation {
      t0.addr0 = systolic_array_component.t0_addr0;
      systolic_array_component.t0_read_data = t0.read_data;
      l0.addr0 = systolic_array_component.l0_addr0;
      systolic_array_component.l0_read_data = l0.read_data;
      out_mem_0.write_data = post_op_component.out_mem_0_write_data;
      out_mem_0.write_en = post_op_component.out_mem_0_write_en;
      out_mem_0.addr0 = post_op_component.out_mem_0_addr0;
      post_op_component.out_mem_0_done = out_mem_0.done;
      post_op_component.r0_valid = systolic_array_component.r0_valid;
      post_op_component.r0_value = systolic_array_component.r0_value;
      post_op_component.r0_idx = systolic_array_component.r0_idx;
      systolic_done.write_en = systolic_array_component.done ? 1'd1;
      systolic_done.in = systolic_array_component.done ? 1'd1;
      systolic_done_wire.in = systolic_array_component.done | systolic_done.out ? 1'd1;
      systolic_array_component.go = !systolic_done_wire.out ? 1'd1;
      systolic_array_component.depth = 32'd3;
      post_op_component.go = 1'd1;
      perform_computation[done] = post_op_component.computation_done;
    }
  }
  control {
    perform_computation;
  }
}
metadata #{
0: pe_0_0 filling: [1,min_depth_4_plus_1), accumulating: [5 depth_plus_5), writing: [depth_plus_5 depth_plus_6)
}#
