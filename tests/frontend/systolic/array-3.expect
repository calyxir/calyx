import "primitives/std.lib";
component main() -> () {
  cells {
    t0_idx = std_reg(2);
    t0_add = std_add(2);
    @external(1) t0 = std_mem_d1(32, 3, 2);
    t1_idx = std_reg(2);
    t1_add = std_add(2);
    @external(1) t1 = std_mem_d1(32, 3, 2);
    t2_idx = std_reg(2);
    t2_add = std_add(2);
    @external(1) t2 = std_mem_d1(32, 3, 2);
    l0_idx = std_reg(2);
    l0_add = std_add(2);
    @external(1) l0 = std_mem_d1(32, 3, 2);
    l1_idx = std_reg(2);
    l1_add = std_add(2);
    @external(1) l1 = std_mem_d1(32, 3, 2);
    l2_idx = std_reg(2);
    l2_add = std_add(2);
    @external(1) l2 = std_mem_d1(32, 3, 2);
    @external(1) out_mem = std_mem_d2(32, 3, 3, 2, 2);
    pe_0_0 = mac_pe();
    top_0_0 = std_reg(32);
    left_0_0 = std_reg(32);
    pe_0_1 = mac_pe();
    top_0_1 = std_reg(32);
    left_0_1 = std_reg(32);
    pe_0_2 = mac_pe();
    top_0_2 = std_reg(32);
    left_0_2 = std_reg(32);
    pe_1_0 = mac_pe();
    top_1_0 = std_reg(32);
    left_1_0 = std_reg(32);
    pe_1_1 = mac_pe();
    top_1_1 = std_reg(32);
    left_1_1 = std_reg(32);
    pe_1_2 = mac_pe();
    top_1_2 = std_reg(32);
    left_1_2 = std_reg(32);
    pe_2_0 = mac_pe();
    top_2_0 = std_reg(32);
    left_2_0 = std_reg(32);
    pe_2_1 = mac_pe();
    top_2_1 = std_reg(32);
    left_2_1 = std_reg(32);
    pe_2_2 = mac_pe();
    top_2_2 = std_reg(32);
    left_2_2 = std_reg(32);
  }
  wires {
    group t0_idx_init {
      t0_idx.in = 2'd3;
      t0_idx.write_en = 1'd1;
      t0_idx_init[done] = t0_idx.done;
    }
    group t0_idx_update {
      t0_add.left = 2'd1;
      t0_add.right = t0_idx.out;
      t0_idx.in = t0_add.out;
      t0_idx.write_en = 1'd1;
      t0_idx_update[done] = t0_idx.done;
    }
    group t0_move {
      t0.addr0 = t0_idx.out;
      top_0_0.in = t0.read_data;
      top_0_0.write_en = 1'd1;
      t0_move[done] = top_0_0.done;
    }
    group t1_idx_init {
      t1_idx.in = 2'd3;
      t1_idx.write_en = 1'd1;
      t1_idx_init[done] = t1_idx.done;
    }
    group t1_idx_update {
      t1_add.left = 2'd1;
      t1_add.right = t1_idx.out;
      t1_idx.in = t1_add.out;
      t1_idx.write_en = 1'd1;
      t1_idx_update[done] = t1_idx.done;
    }
    group t1_move {
      t1.addr0 = t1_idx.out;
      top_0_1.in = t1.read_data;
      top_0_1.write_en = 1'd1;
      t1_move[done] = top_0_1.done;
    }
    group t2_idx_init {
      t2_idx.in = 2'd3;
      t2_idx.write_en = 1'd1;
      t2_idx_init[done] = t2_idx.done;
    }
    group t2_idx_update {
      t2_add.left = 2'd1;
      t2_add.right = t2_idx.out;
      t2_idx.in = t2_add.out;
      t2_idx.write_en = 1'd1;
      t2_idx_update[done] = t2_idx.done;
    }
    group t2_move {
      t2.addr0 = t2_idx.out;
      top_0_2.in = t2.read_data;
      top_0_2.write_en = 1'd1;
      t2_move[done] = top_0_2.done;
    }
    group l0_idx_init {
      l0_idx.in = 2'd3;
      l0_idx.write_en = 1'd1;
      l0_idx_init[done] = l0_idx.done;
    }
    group l0_idx_update {
      l0_add.left = 2'd1;
      l0_add.right = l0_idx.out;
      l0_idx.in = l0_add.out;
      l0_idx.write_en = 1'd1;
      l0_idx_update[done] = l0_idx.done;
    }
    group l0_move {
      l0.addr0 = l0_idx.out;
      left_0_0.in = l0.read_data;
      left_0_0.write_en = 1'd1;
      l0_move[done] = left_0_0.done;
    }
    group l1_idx_init {
      l1_idx.in = 2'd3;
      l1_idx.write_en = 1'd1;
      l1_idx_init[done] = l1_idx.done;
    }
    group l1_idx_update {
      l1_add.left = 2'd1;
      l1_add.right = l1_idx.out;
      l1_idx.in = l1_add.out;
      l1_idx.write_en = 1'd1;
      l1_idx_update[done] = l1_idx.done;
    }
    group l1_move {
      l1.addr0 = l1_idx.out;
      left_1_0.in = l1.read_data;
      left_1_0.write_en = 1'd1;
      l1_move[done] = left_1_0.done;
    }
    group l2_idx_init {
      l2_idx.in = 2'd3;
      l2_idx.write_en = 1'd1;
      l2_idx_init[done] = l2_idx.done;
    }
    group l2_idx_update {
      l2_add.left = 2'd1;
      l2_add.right = l2_idx.out;
      l2_idx.in = l2_add.out;
      l2_idx.write_en = 1'd1;
      l2_idx_update[done] = l2_idx.done;
    }
    group l2_move {
      l2.addr0 = l2_idx.out;
      left_2_0.in = l2.read_data;
      left_2_0.write_en = 1'd1;
      l2_move[done] = left_2_0.done;
    }
    group pe_0_0_right_move {
      left_0_1.in = left_0_0.out;
      left_0_1.write_en = 1'd1;
      pe_0_0_right_move[done] = left_0_1.done;
    }
    group pe_0_0_down_move {
      top_1_0.in = top_0_0.out;
      top_1_0.write_en = 1'd1;
      pe_0_0_down_move[done] = top_1_0.done;
    }
    group pe_0_0_out_write {
      out_mem.addr0 = 2'd0;
      out_mem.addr1 = 2'd0;
      out_mem.write_data = pe_0_0.out;
      out_mem.write_en = 1'd1;
      pe_0_0_out_write[done] = out_mem.done;
    }
    group pe_0_1_right_move {
      left_0_2.in = left_0_1.out;
      left_0_2.write_en = 1'd1;
      pe_0_1_right_move[done] = left_0_2.done;
    }
    group pe_0_1_down_move {
      top_1_1.in = top_0_1.out;
      top_1_1.write_en = 1'd1;
      pe_0_1_down_move[done] = top_1_1.done;
    }
    group pe_0_1_out_write {
      out_mem.addr0 = 2'd0;
      out_mem.addr1 = 2'd1;
      out_mem.write_data = pe_0_1.out;
      out_mem.write_en = 1'd1;
      pe_0_1_out_write[done] = out_mem.done;
    }
    group pe_0_2_down_move {
      top_1_2.in = top_0_2.out;
      top_1_2.write_en = 1'd1;
      pe_0_2_down_move[done] = top_1_2.done;
    }
    group pe_0_2_out_write {
      out_mem.addr0 = 2'd0;
      out_mem.addr1 = 2'd2;
      out_mem.write_data = pe_0_2.out;
      out_mem.write_en = 1'd1;
      pe_0_2_out_write[done] = out_mem.done;
    }
    group pe_1_0_right_move {
      left_1_1.in = left_1_0.out;
      left_1_1.write_en = 1'd1;
      pe_1_0_right_move[done] = left_1_1.done;
    }
    group pe_1_0_down_move {
      top_2_0.in = top_1_0.out;
      top_2_0.write_en = 1'd1;
      pe_1_0_down_move[done] = top_2_0.done;
    }
    group pe_1_0_out_write {
      out_mem.addr0 = 2'd1;
      out_mem.addr1 = 2'd0;
      out_mem.write_data = pe_1_0.out;
      out_mem.write_en = 1'd1;
      pe_1_0_out_write[done] = out_mem.done;
    }
    group pe_1_1_right_move {
      left_1_2.in = left_1_1.out;
      left_1_2.write_en = 1'd1;
      pe_1_1_right_move[done] = left_1_2.done;
    }
    group pe_1_1_down_move {
      top_2_1.in = top_1_1.out;
      top_2_1.write_en = 1'd1;
      pe_1_1_down_move[done] = top_2_1.done;
    }
    group pe_1_1_out_write {
      out_mem.addr0 = 2'd1;
      out_mem.addr1 = 2'd1;
      out_mem.write_data = pe_1_1.out;
      out_mem.write_en = 1'd1;
      pe_1_1_out_write[done] = out_mem.done;
    }
    group pe_1_2_down_move {
      top_2_2.in = top_1_2.out;
      top_2_2.write_en = 1'd1;
      pe_1_2_down_move[done] = top_2_2.done;
    }
    group pe_1_2_out_write {
      out_mem.addr0 = 2'd1;
      out_mem.addr1 = 2'd2;
      out_mem.write_data = pe_1_2.out;
      out_mem.write_en = 1'd1;
      pe_1_2_out_write[done] = out_mem.done;
    }
    group pe_2_0_right_move {
      left_2_1.in = left_2_0.out;
      left_2_1.write_en = 1'd1;
      pe_2_0_right_move[done] = left_2_1.done;
    }
    group pe_2_0_out_write {
      out_mem.addr0 = 2'd2;
      out_mem.addr1 = 2'd0;
      out_mem.write_data = pe_2_0.out;
      out_mem.write_en = 1'd1;
      pe_2_0_out_write[done] = out_mem.done;
    }
    group pe_2_1_right_move {
      left_2_2.in = left_2_1.out;
      left_2_2.write_en = 1'd1;
      pe_2_1_right_move[done] = left_2_2.done;
    }
    group pe_2_1_out_write {
      out_mem.addr0 = 2'd2;
      out_mem.addr1 = 2'd1;
      out_mem.write_data = pe_2_1.out;
      out_mem.write_en = 1'd1;
      pe_2_1_out_write[done] = out_mem.done;
    }
    group pe_2_2_out_write {
      out_mem.addr0 = 2'd2;
      out_mem.addr1 = 2'd2;
      out_mem.write_data = pe_2_2.out;
      out_mem.write_en = 1'd1;
      pe_2_2_out_write[done] = out_mem.done;
    }
  }
  control {
    seq {
      par {
        t0_idx_init;
        t1_idx_init;
        t2_idx_init;
        l0_idx_init;
        l1_idx_init;
        l2_idx_init;
      }
      par {
        t0_idx_update;
        l0_idx_update;
      }
      par {
        t0_move;
        l0_move;
      }
      par {
        t0_idx_update;
        l0_idx_update;
        t1_idx_update;
        l1_idx_update;
        invoke pe_0_0(top=top_0_0.out, left=left_0_0.out)();
      }
      par {
        t0_move;
        t1_move;
        pe_0_0_down_move;
        l0_move;
        pe_0_0_right_move;
        l1_move;
      }
      par {
        t0_idx_update;
        l0_idx_update;
        t1_idx_update;
        t2_idx_update;
        l1_idx_update;
        l2_idx_update;
        invoke pe_0_0(top=top_0_0.out, left=left_0_0.out)();
        invoke pe_0_1(top=top_0_1.out, left=left_0_1.out)();
        invoke pe_1_0(top=top_1_0.out, left=left_1_0.out)();
      }
      par {
        t0_move;
        t1_move;
        t2_move;
        pe_0_0_down_move;
        pe_0_1_down_move;
        pe_1_0_down_move;
        l0_move;
        pe_0_0_right_move;
        pe_0_1_right_move;
        l1_move;
        pe_1_0_right_move;
        l2_move;
      }
      par {
        t1_idx_update;
        t2_idx_update;
        l1_idx_update;
        l2_idx_update;
        invoke pe_0_0(top=top_0_0.out, left=left_0_0.out)();
        invoke pe_0_1(top=top_0_1.out, left=left_0_1.out)();
        invoke pe_0_2(top=top_0_2.out, left=left_0_2.out)();
        invoke pe_1_0(top=top_1_0.out, left=left_1_0.out)();
        invoke pe_1_1(top=top_1_1.out, left=left_1_1.out)();
        invoke pe_2_0(top=top_2_0.out, left=left_2_0.out)();
      }
      par {
        t1_move;
        t2_move;
        pe_0_0_down_move;
        pe_0_1_down_move;
        pe_0_2_down_move;
        pe_1_0_down_move;
        pe_1_1_down_move;
        pe_0_0_right_move;
        pe_0_1_right_move;
        l1_move;
        pe_1_0_right_move;
        pe_1_1_right_move;
        l2_move;
        pe_2_0_right_move;
      }
      par {
        t2_idx_update;
        l2_idx_update;
        invoke pe_0_1(top=top_0_1.out, left=left_0_1.out)();
        invoke pe_0_2(top=top_0_2.out, left=left_0_2.out)();
        invoke pe_1_0(top=top_1_0.out, left=left_1_0.out)();
        invoke pe_1_1(top=top_1_1.out, left=left_1_1.out)();
        invoke pe_1_2(top=top_1_2.out, left=left_1_2.out)();
        invoke pe_2_0(top=top_2_0.out, left=left_2_0.out)();
        invoke pe_2_1(top=top_2_1.out, left=left_2_1.out)();
      }
      par {
        t2_move;
        pe_0_1_down_move;
        pe_0_2_down_move;
        pe_1_0_down_move;
        pe_1_1_down_move;
        pe_1_2_down_move;
        pe_0_1_right_move;
        pe_1_0_right_move;
        pe_1_1_right_move;
        l2_move;
        pe_2_0_right_move;
        pe_2_1_right_move;
      }
      par {
        invoke pe_0_2(top=top_0_2.out, left=left_0_2.out)();
        invoke pe_1_1(top=top_1_1.out, left=left_1_1.out)();
        invoke pe_1_2(top=top_1_2.out, left=left_1_2.out)();
        invoke pe_2_0(top=top_2_0.out, left=left_2_0.out)();
        invoke pe_2_1(top=top_2_1.out, left=left_2_1.out)();
        invoke pe_2_2(top=top_2_2.out, left=left_2_2.out)();
      }
      par {
        pe_0_2_down_move;
        pe_1_1_down_move;
        pe_1_2_down_move;
        pe_1_1_right_move;
        pe_2_0_right_move;
        pe_2_1_right_move;
      }
      par {
        invoke pe_1_2(top=top_1_2.out, left=left_1_2.out)();
        invoke pe_2_1(top=top_2_1.out, left=left_2_1.out)();
        invoke pe_2_2(top=top_2_2.out, left=left_2_2.out)();
      }
      par {
        pe_1_2_down_move;
        pe_2_1_right_move;
      }
      par {
        invoke pe_2_2(top=top_2_2.out, left=left_2_2.out)();
      }
      seq {
        pe_0_0_out_write;
        pe_0_1_out_write;
        pe_0_2_out_write;
        pe_1_0_out_write;
        pe_1_1_out_write;
        pe_1_2_out_write;
        pe_2_0_out_write;
        pe_2_1_out_write;
        pe_2_2_out_write;
      }
    }
  }
}

component mac_pe(top: 32, left: 32) -> (out: 32) {
  cells {
    // Storage
    acc = std_reg(32);
    mul_reg = std_reg(32);
    // Computation
    add = std_add(32);
    mul = std_mult_pipe(32);
  }
  wires {
    group do_mul<"static"=4> {
      mul.left = top;
      mul.right = left;
      mul.go = !mul.done ? 1'd1;
      mul_reg.in = mul.done ? mul.out;
      mul_reg.write_en = mul.done ? 1'd1;
      do_mul[done] = mul_reg.done;
    }
    group do_add {
      add.left = acc.out;
      add.right = mul_reg.out;
      acc.in = add.out;
      acc.write_en = 1'd1;
      do_add[done] = acc.done;
    }
    out = acc.out;
  }
  control {
    seq { do_mul; do_add; }
  }
}
