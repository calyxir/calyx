import "primitives/std.lib";
import "primitives/bitnum/math.futil";
component main() -> () {
  cells {
    x = std_mem_d2(32, 1, 10, 1, 4);
    x1 = std_mem_d2(32, 1, 10, 1, 4);
    nn_softmax_ = nn_softmax();
  }
  wires {

  }
  control {
    seq {
      invoke nn_softmax_(x0_0_read_data=x.read_data, x10_0_done=x1.done, x10_0_read_data=x1.read_data)(x0_0_addr0=x.addr0, x0_0_addr1=x.addr1, x10_0_write_data=x1.write_data, x10_0_write_en=x1.write_en, x10_0_addr0=x1.addr0, x10_0_addr1=x1.addr1);
    }
  }
}
component nn_softmax(x0_0_read_data: 32, x0_0_done: 1, x10_0_read_data: 32, x10_0_done: 1) -> (x0_0_write_data: 32, x0_0_write_en: 1, x0_0_addr0: 1, x0_0_addr1: 4, x10_0_write_data: 32, x10_0_write_en: 1, x10_0_addr0: 1, x10_0_addr1: 4) {
  cells {
    add0 = std_sadd(32);
    add1 = std_add(4);
    add2 = std_add(4);
    add3 = std_add(1);
    bin_read0_0 = std_reg(32);
    const0 = std_const(1,0);
    const1 = std_const(1,0);
    const2 = std_const(32,0);
    const3 = std_const(4,0);
    const4 = std_const(4,9);
    const5 = std_const(4,1);
    const6 = std_const(4,0);
    const7 = std_const(4,9);
    const8 = std_const(4,1);
    const9 = std_const(1,1);
    div_pipe0 = std_sdiv_pipe(32);
    i0 = std_reg(1);
    j0 = std_reg(4);
    k0 = std_reg(4);
    le0 = std_le(1);
    le1 = std_le(4);
    le2 = std_le(4);
    std_exp0 = std_exp();
    std_exp1 = std_exp();
    tmp1_0 = std_reg(32);
    tmp2_0 = std_reg(32);
    x1_read0_0 = std_reg(32);
    x_expsum_0 = std_reg(32);
    x_read0_0 = std_reg(32);
    x_read1_0 = std_reg(32);
  }
  wires {
    group cond0<"static"=0> {
      cond0[done] = 1'd1;
      le0.left = i0.out;
      le0.right = const1.out;
    }
    group cond1<"static"=0> {
      cond1[done] = 1'd1;
      le1.left = j0.out;
      le1.right = const4.out;
    }
    group cond2<"static"=0> {
      cond2[done] = 1'd1;
      le2.left = k0.out;
      le2.right = const7.out;
    }
    group let0<"static"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"static"=1> {
      x_expsum_0.in = const2.out;
      x_expsum_0.write_en = 1'd1;
      let1[done] = x_expsum_0.done;
    }
    group let2<"static"=1> {
      j0.in = const3.out;
      j0.write_en = 1'd1;
      let2[done] = j0.done;
    }
    group let3 {
      tmp1_0.in = std_exp0.out;
      tmp1_0.write_en = 1'd1;
      let3[done] = tmp1_0.done;
    }
    group let4<"static"=1> {
      k0.in = const6.out;
      k0.write_en = 1'd1;
      let4[done] = k0.done;
    }
    group let5 {
      tmp2_0.in = std_exp1.out;
      tmp2_0.write_en = 1'd1;
      let5[done] = tmp2_0.done;
    }
    group let6 {
      bin_read0_0.in = div_pipe0.out;
      bin_read0_0.write_en = div_pipe0.done;
      let6[done] = bin_read0_0.done;
      div_pipe0.left = x1_read0_0.out;
      div_pipe0.right = x_expsum_0.out;
      div_pipe0.go = !div_pipe0.done ? 1'd1;
    }
    group upd0<"static"=1> {
      x_read0_0.write_en = 1'd1;
      x0_0_addr1 = j0.out;
      x0_0_addr0 = i0.out;
      x_read0_0.in = 1'd1 ? x0_0_read_data;
      upd0[done] = x_read0_0.done ? 1'd1;
    }
    group upd1<"static"=1> {
      x_expsum_0.write_en = 1'd1;
      add0.left = x_expsum_0.out;
      add0.right = tmp1_0.out;
      x_expsum_0.in = 1'd1 ? add0.out;
      upd1[done] = x_expsum_0.done ? 1'd1;
    }
    group upd2<"static"=1> {
      j0.write_en = 1'd1;
      add1.left = j0.out;
      add1.right = const5.out;
      j0.in = 1'd1 ? add1.out;
      upd2[done] = j0.done ? 1'd1;
    }
    group upd3<"static"=1> {
      x_read1_0.write_en = 1'd1;
      x0_0_addr1 = k0.out;
      x0_0_addr0 = i0.out;
      x_read1_0.in = 1'd1 ? x0_0_read_data;
      upd3[done] = x_read1_0.done ? 1'd1;
    }
    group upd4<"static"=1> {
      x10_0_addr1 = k0.out;
      x10_0_addr0 = i0.out;
      x10_0_write_en = 1'd1;
      x10_0_write_data = 1'd1 ? tmp2_0.out;
      upd4[done] = x10_0_done ? 1'd1;
    }
    group upd5<"static"=1> {
      x1_read0_0.write_en = 1'd1;
      x10_0_addr1 = k0.out;
      x10_0_addr0 = i0.out;
      x1_read0_0.in = 1'd1 ? x10_0_read_data;
      upd5[done] = x1_read0_0.done ? 1'd1;
    }
    group upd6<"static"=1> {
      x10_0_addr1 = k0.out;
      x10_0_addr0 = i0.out;
      x10_0_write_en = 1'd1;
      x10_0_write_data = 1'd1 ? bin_read0_0.out;
      upd6[done] = x10_0_done ? 1'd1;
    }
    group upd7<"static"=1> {
      k0.write_en = 1'd1;
      add2.left = k0.out;
      add2.right = const8.out;
      k0.in = 1'd1 ? add2.out;
      upd7[done] = k0.done ? 1'd1;
    }
    group upd8<"static"=1> {
      i0.write_en = 1'd1;
      add3.left = i0.out;
      add3.right = const9.out;
      i0.in = 1'd1 ? add3.out;
      upd8[done] = i0.done ? 1'd1;
    }
  }
  control {
    seq {
      let0;
      while le0.out with cond0 {
        seq {
          par {
            let1;
            seq {
              let2;
              while le1.out with cond1 {
                seq {
                  upd0;
                  invoke std_exp0(in=x_read0_0.out)();
                  let3;
                  upd1;
                  upd2;
                }
              }
            }
          }
          let4;
          while le2.out with cond2 {
            seq {
              upd3;
              invoke std_exp1(in=x_read1_0.out)();
              let5;
              upd4;
              upd5;
              let6;
              upd6;
              upd7;
            }
          }
          upd8;
        }
      }
    }
  }
}

