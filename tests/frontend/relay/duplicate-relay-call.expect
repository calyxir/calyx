import "primitives/core.futil";
import "primitives/memories.futil";
import "primitives/binary_operators.futil";
import "primitives/math.futil";
component negative_2x2() -> () {
  cells {
    ref x0_0 = seq_mem_d2(32,2,2,2,2);
    ref x10_0 = seq_mem_d2(32,2,2,2,2);
    __i0 = std_reg(2);
    __j0 = std_reg(2);
    add0 = std_add(2);
    add1 = std_add(2);
    const0 = std_const(2,0);
    const1 = std_const(2,1);
    const2 = std_const(2,0);
    const3 = std_const(2,1);
    const4 = std_const(32,0);
    const5 = std_const(2,1);
    const6 = std_const(2,1);
    le0 = std_le(2);
    le1 = std_le(2);
    sub0 = std_ssub(32);
    x_read0_0 = std_reg(32);
  }
  wires {
    comb group cond0 {
      le0.left = __i0.out;
      le0.right = const1.out;
    }
    comb group cond1 {
      le1.left = __j0.out;
      le1.right = const3.out;
    }
    group let0<"static"=1> {
      __i0.in = const0.out;
      __i0.write_en = 1'd1;
      let0[done] = __i0.done;
    }
    group let1<"static"=1> {
      __j0.in = const2.out;
      __j0.write_en = 1'd1;
      let1[done] = __j0.done;
    }
    group upd0<"static"=2> {
      x_read0_0.write_en = x0_0.read_done;
      x0_0.addr1 = __j0.out;
      x0_0.addr0 = __i0.out;
      x0_0.read_en = 1'd1;
      x_read0_0.in = x0_0.out;
      upd0[done] = x_read0_0.done;
    }
    group upd1<"static"=1> {
      x10_0.addr1 = __j0.out;
      x10_0.addr0 = __i0.out;
      x10_0.write_en = 1'd1;
      sub0.left = const4.out;
      sub0.right = x_read0_0.out;
      x10_0.in = sub0.out;
      upd1[done] = x10_0.write_done;
    }
    group upd2<"static"=1> {
      __j0.write_en = 1'd1;
      add0.left = __j0.out;
      add0.right = const5.out;
      __j0.in = add0.out;
      upd2[done] = __j0.done;
    }
    group upd3<"static"=1> {
      __i0.write_en = 1'd1;
      add1.left = __i0.out;
      add1.right = const6.out;
      __i0.in = add1.out;
      upd3[done] = __i0.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      @bound(2) while le0.out with cond0 {
        seq {
          @pos(1) let1;
          @bound(2) while le1.out with cond1 {
            seq {
              @pos(2) upd0;
              @pos(3) upd1;
              @pos(1) upd2;
            }
          }
          @pos(0) upd3;
        }
      }
    }
  }
}

component main() -> () {
  cells {
    @external x = seq_mem_d2(32, 2, 2, 2, 2);
    @external x1 = seq_mem_d2(32, 2, 2, 2, 2);
    negative_2x2_ = negative_2x2();
    @external x2 = seq_mem_d2(32, 2, 2, 2, 2);
    negative_2x2_1 = negative_2x2();
  }
  wires {

  }
  control {
    seq {
      @pos(0) invoke negative_2x2_[x0_0=x, x10_0=x1]()();
      @pos(1) invoke negative_2x2_1[x0_0=x1, x10_0=x2]()();
    }
  }
}
metadata #{
0: let %x1: Tensor[(2, 2), int32] /* ty=Tensor[(2, 2), int32] span=from_string:4:22 */ = negative(%x) /* ty=Tensor[(2, 2), int32] span=from_string:3:13 */;
1: let %x2: Tensor[(2, 2), int32] /* ty=Tensor[(2, 2), int32] span=from_string:5:3 */ = negative(%x1) /* ty=Tensor[(2, 2), int32] span=from_string:4:13 */;
}#
