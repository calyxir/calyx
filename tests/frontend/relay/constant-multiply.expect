import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
import "primitives/math.futil";
component multiply_1(x1: 32) -> () {
  cells {
    ref x = seq_mem_d1(32,1,1);
    ref x2 = seq_mem_d1(32,1,1);
    __i0 = std_reg(1);
    add0 = std_add(1);
    bin_read0_0 = std_reg(32);
    const0 = std_const(1,0);
    const1 = std_const(1,0);
    const2 = std_const(1,1);
    le0 = std_le(1);
    mult_pipe0 = std_smult_pipe(32);
    x_read0_0 = std_reg(32);
  }
  wires {
    comb group cond0 {
      le0.left = __i0.out;
      le0.right = const1.out;
    }
    group let0<"promotable"=1> {
      __i0.in = const0.out;
      __i0.write_en = 1'd1;
      let0[done] = __i0.done;
    }
    group let1<"promotable"=2> {
      x_read0_0.in = x.read_data;
      x_read0_0.write_en = x.done;
      let1[done] = x_read0_0.done;
      x.content_en = 1'd1;
      x.addr0 = __i0.out;
    }
    group let2<"promotable"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let2[done] = bin_read0_0.done;
      mult_pipe0.left = x_read0_0.out;
      mult_pipe0.right = x1;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group upd0<"promotable"=1> {
      x2.content_en = 1'd1;
      x2.addr0 = __i0.out;
      x2.write_en = 1'd1;
      x2.write_data = bin_read0_0.out;
      upd0[done] = x2.done;
    }
    group upd1<"promotable"=1> {
      __i0.write_en = 1'd1;
      add0.left = __i0.out;
      add0.right = const2.out;
      __i0.in = add0.out;
      upd1[done] = __i0.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      @bound(1) while le0.out with cond0 {
        seq {
          @pos(1) let1;
          let2;
          upd0;
          @pos(0) upd1;
        }
      }
    }
  }
}

component main() -> () {
  cells {
    @external x = seq_mem_d1(32, 1, 1);
    x1 = std_const(32, 0);
    @external x2 = seq_mem_d1(32, 1, 1);
    multiply_1_ = multiply_1();
  }
  wires {

  }
  control {
    seq {
      @pos(0) invoke multiply_1_[x=x, x2=x2](x1=x1.out)();
    }
  }
}
metadata #{
0: let %x2: Tensor[(1), int32] /* ty=Tensor[(1), int32] span=from_string:5:3 */ = multiply(%x, %x1) /* ty=Tensor[(1), int32] span=from_string:4:36 */;
}#
