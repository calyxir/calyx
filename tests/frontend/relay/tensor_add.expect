import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
import "primitives/math.futil";
component add_2x4() -> () {
  cells {
    ref x = seq_mem_d2(32,2,4,2,3);
    ref y = seq_mem_d2(32,2,4,2,3);
    ref x1 = seq_mem_d2(32,2,4,2,3);
    __i0 = std_reg(2);
    __j0 = std_reg(3);
    add0 = std_sadd(32);
    add1 = std_add(3);
    add2 = std_add(2);
    const0 = std_const(2,0);
    const1 = std_const(2,1);
    const2 = std_const(3,0);
    const3 = std_const(3,3);
    const4 = std_const(3,1);
    const5 = std_const(2,1);
    le0 = std_le(2);
    le1 = std_le(3);
    x_read0_0 = std_reg(32);
    y_read0_0 = std_reg(32);
  }
  wires {
    comb group cond0 {
      le0.left = __i0.out;
      le0.right = const1.out;
    }
    comb group cond1 {
      le1.left = __j0.out;
      le1.right = const3.out;
    }
    group let0<"promotable"=1> {
      __i0.in = const0.out;
      __i0.write_en = 1'd1;
      let0[done] = __i0.done;
    }
    group let1<"promotable"=1> {
      __j0.in = const2.out;
      __j0.write_en = 1'd1;
      let1[done] = __j0.done;
    }
    group let2<"promotable"=2> {
      x_read0_0.in = x.read_data;
      x_read0_0.write_en = x.done;
      let2[done] = x_read0_0.done;
      x.content_en = 1'd1;
      x.addr1 = __j0.out;
      x.addr0 = __i0.out;
    }
    group let3<"promotable"=2> {
      y_read0_0.in = y.read_data;
      y_read0_0.write_en = y.done;
      let3[done] = y_read0_0.done;
      y.content_en = 1'd1;
      y.addr1 = __j0.out;
      y.addr0 = __i0.out;
    }
    group upd0<"promotable"=1> {
      x1.content_en = 1'd1;
      x1.addr1 = __j0.out;
      x1.addr0 = __i0.out;
      x1.write_en = 1'd1;
      add0.left = x_read0_0.out;
      add0.right = y_read0_0.out;
      x1.write_data = add0.out;
      upd0[done] = x1.done;
    }
    group upd1<"promotable"=1> {
      __j0.write_en = 1'd1;
      add1.left = __j0.out;
      add1.right = const4.out;
      __j0.in = add1.out;
      upd1[done] = __j0.done;
    }
    group upd2<"promotable"=1> {
      __i0.write_en = 1'd1;
      add2.left = __i0.out;
      add2.right = const5.out;
      __i0.in = add2.out;
      upd2[done] = __i0.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      @bound(2) while le0.out with cond0 {
        seq {
          @pos(1) let1;
          @bound(4) while le1.out with cond1 {
            seq {
              par {
                @pos(2) let2;
                @pos(3) let3;
              }
              @pos(4) upd0;
              @pos(1) upd1;
            }
          }
          @pos(0) upd2;
        }
      }
    }
  }
}

component main() -> () {
  cells {
    @external x = seq_mem_d2(32, 2, 4, 2, 3);
    @external y = seq_mem_d2(32, 2, 4, 2, 3);
    @external x1 = seq_mem_d2(32, 2, 4, 2, 3);
    add_2x4_ = add_2x4();
  }
  wires {

  }
  control {
    seq {
      @pos(0) invoke add_2x4_[x=x, y=y, x1=x1]()();
    }
  }
}
metadata #{
0: let %x1: Tensor[(2, 4), int32] /* ty=Tensor[(2, 4), int32] span=from_string:4:3 */ = add(%x, %y) /* ty=Tensor[(2, 4), int32] span=from_string:3:13 */;
}#
