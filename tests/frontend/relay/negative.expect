import "primitives/core.futil";
import "primitives/binary_operators.futil";
import "primitives/math.futil";
component main() -> () {
  cells {
    @external(1) x = std_mem_d1(32, 4, 3);
    @external(1) x1 = std_mem_d1(32, 4, 3);
    negative_4_ = negative_4();
  }
  wires {

  }
  control {
    seq {
      @pos(0) invoke negative_4_[x0=x, x10=x1]()();
    }
  }
}
component negative_4() -> () {
  cells {
    ref x0 = std_mem_d1(32,4,3);
    ref x10 = std_mem_d1(32,4,3);
    __i0 = std_reg(3);
    add0 = std_add(3);
    const0 = std_const(3,0);
    const1 = std_const(3,3);
    const2 = std_const(32,0);
    const3 = std_const(3,1);
    le0 = std_le(3);
    sub0 = std_ssub(32);
    x_read0_0 = std_reg(32);
  }
  wires {
    comb group cond0 {
      le0.left = __i0.out;
      le0.right = const1.out;
    }
    group let0<"static"=1> {
      __i0.in = const0.out;
      __i0.write_en = 1'd1;
      let0[done] = __i0.done;
    }
    group upd0<"static"=1> {
      x_read0_0.write_en = 1'd1;
      x0.addr0 = __i0.out;
      x_read0_0.in = x0.read_data;
      upd0[done] = x_read0_0.done;
    }
    group upd1<"static"=1> {
      x10.addr0 = __i0.out;
      x10.write_en = 1'd1;
      sub0.left = const2.out;
      sub0.right = x_read0_0.out;
      x10.write_data = sub0.out;
      upd1[done] = x10.done;
    }
    group upd2<"static"=1> {
      __i0.write_en = 1'd1;
      add0.left = __i0.out;
      add0.right = const3.out;
      __i0.in = add0.out;
      upd2[done] = __i0.done;
    }
  }
  control {
    seq {
      let0;
      @bound(4) while le0.out with cond0 {
        seq {
          upd0;
          upd1;
          upd2;
        }
      }
    }
  }
}

