import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
import "primitives/math.futil";
component max_pool2d_2x2x2x2() -> () {
  cells {
    ref data = seq_mem_d4(32,2,2,4,4,2,2,3,3);
    ref result = seq_mem_d4(32,2,2,2,2,2,2,2,2);
    __b0 = std_reg(32);
    __c0 = std_reg(32);
    __current_0 = std_reg(32);
    __m0 = std_reg(32);
    __max_0 = std_reg(32);
    __n0 = std_reg(32);
    __pool_x_0 = std_reg(32);
    __pool_y_0 = std_reg(32);
    __stride_x_0 = std_reg(32);
    __stride_y_0 = std_reg(32);
    __x0 = std_reg(32);
    __y0 = std_reg(32);
    add0 = std_add(32);
    add1 = std_add(32);
    add2 = std_add(32);
    add3 = std_add(32);
    add4 = std_add(32);
    add5 = std_add(32);
    add6 = std_add(32);
    add7 = std_add(32);
    bin_read0_0 = std_reg(32);
    bin_read1_0 = std_reg(32);
    const0 = std_const(32,0);
    const1 = std_const(32,1);
    const10 = std_const(32,0);
    const11 = std_const(32,1);
    const12 = std_const(32,0);
    const13 = std_const(32,1);
    const14 = std_const(32,1);
    const15 = std_const(32,1);
    const16 = std_const(32,1);
    const17 = std_const(32,1);
    const18 = std_const(32,1);
    const19 = std_const(32,1);
    const2 = std_const(32,0);
    const3 = std_const(32,1);
    const4 = std_const(32,0);
    const5 = std_const(32,1);
    const6 = std_const(32,0);
    const7 = std_const(32,1);
    const8 = std_const(32,2);
    const9 = std_const(32,2);
    gt0 = std_sgt(32);
    le0 = std_le(32);
    le1 = std_le(32);
    le2 = std_le(32);
    le3 = std_le(32);
    le4 = std_le(32);
    le5 = std_le(32);
    mult_pipe0 = std_mult_pipe(32);
    mult_pipe1 = std_mult_pipe(32);
    slice0 = std_slice(32,2);
    slice1 = std_slice(32,2);
    slice10 = std_slice(32,2);
    slice11 = std_slice(32,2);
    slice2 = std_slice(32,3);
    slice3 = std_slice(32,3);
    slice4 = std_slice(32,2);
    slice5 = std_slice(32,2);
    slice6 = std_slice(32,3);
    slice7 = std_slice(32,3);
    slice8 = std_slice(32,2);
    slice9 = std_slice(32,2);
  }
  wires {
    comb group cond0 {
      le0.left = __b0.out;
      le0.right = const1.out;
    }
    comb group cond1 {
      le1.left = __c0.out;
      le1.right = const3.out;
    }
    comb group cond2 {
      le2.left = __y0.out;
      le2.right = const5.out;
    }
    comb group cond3 {
      le3.left = __x0.out;
      le3.right = const7.out;
    }
    comb group cond4 {
      le4.left = __m0.out;
      le4.right = const11.out;
    }
    comb group cond5 {
      le5.left = __n0.out;
      le5.right = const13.out;
    }
    comb group cond6 {
      gt0.left = __current_0.out;
      gt0.right = __max_0.out;
    }
    group let0<"promotable"=1> {
      __b0.in = const0.out;
      __b0.write_en = 1'd1;
      let0[done] = __b0.done;
    }
    group let1<"promotable"=1> {
      __c0.in = const2.out;
      __c0.write_en = 1'd1;
      let1[done] = __c0.done;
    }
    group let10<"promotable"=1> {
      __n0.in = const12.out;
      __n0.write_en = 1'd1;
      let10[done] = __n0.done;
    }
    group let11<"promotable"=1> {
      __pool_y_0.in = add0.out;
      __pool_y_0.write_en = 1'd1;
      let11[done] = __pool_y_0.done;
      add0.left = __stride_y_0.out;
      add0.right = __m0.out;
    }
    group let12<"promotable"=1> {
      __pool_x_0.in = add1.out;
      __pool_x_0.write_en = 1'd1;
      let12[done] = __pool_x_0.done;
      add1.left = __stride_x_0.out;
      add1.right = __n0.out;
    }
    group let13<"promotable"=2> {
      __current_0.in = data.read_data;
      __current_0.write_en = data.done;
      let13[done] = __current_0.done;
      data.content_en = 1'd1;
      data.addr3 = slice7.out;
      slice7.in = __pool_x_0.out;
      data.addr2 = slice6.out;
      slice6.in = __pool_y_0.out;
      data.addr1 = slice5.out;
      slice5.in = __c0.out;
      data.addr0 = slice4.out;
      slice4.in = __b0.out;
    }
    group let2<"promotable"=1> {
      __y0.in = const4.out;
      __y0.write_en = 1'd1;
      let2[done] = __y0.done;
    }
    group let3<"promotable"=1> {
      __x0.in = const6.out;
      __x0.write_en = 1'd1;
      let3[done] = __x0.done;
    }
    group let4<"promotable"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let4[done] = bin_read0_0.done;
      mult_pipe0.left = __y0.out;
      mult_pipe0.right = const8.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group let5<"promotable"=1> {
      __stride_y_0.in = bin_read0_0.out;
      __stride_y_0.write_en = 1'd1;
      let5[done] = __stride_y_0.done;
    }
    group let6<"promotable"=4> {
      bin_read1_0.in = mult_pipe1.out;
      bin_read1_0.write_en = mult_pipe1.done;
      let6[done] = bin_read1_0.done;
      mult_pipe1.left = __x0.out;
      mult_pipe1.right = const9.out;
      mult_pipe1.go = !mult_pipe1.done ? 1'd1;
    }
    group let7<"promotable"=1> {
      __stride_x_0.in = bin_read1_0.out;
      __stride_x_0.write_en = 1'd1;
      let7[done] = __stride_x_0.done;
    }
    group let8<"promotable"=2> {
      __max_0.in = data.read_data;
      __max_0.write_en = data.done;
      let8[done] = __max_0.done;
      data.content_en = 1'd1;
      data.addr3 = slice3.out;
      slice3.in = __stride_x_0.out;
      data.addr2 = slice2.out;
      slice2.in = __stride_y_0.out;
      data.addr1 = slice1.out;
      slice1.in = __c0.out;
      data.addr0 = slice0.out;
      slice0.in = __b0.out;
    }
    group let9<"promotable"=1> {
      __m0.in = const10.out;
      __m0.write_en = 1'd1;
      let9[done] = __m0.done;
    }
    group upd0<"promotable"=1> {
      __max_0.write_en = 1'd1;
      __max_0.in = __current_0.out;
      upd0[done] = __max_0.done;
    }
    group upd1<"promotable"=1> {
      __n0.write_en = 1'd1;
      add2.left = __n0.out;
      add2.right = const14.out;
      __n0.in = add2.out;
      upd1[done] = __n0.done;
    }
    group upd2<"promotable"=1> {
      __m0.write_en = 1'd1;
      add3.left = __m0.out;
      add3.right = const15.out;
      __m0.in = add3.out;
      upd2[done] = __m0.done;
    }
    group upd3<"promotable"=1> {
      result.content_en = 1'd1;
      result.addr3 = slice11.out;
      slice11.in = __x0.out;
      result.addr2 = slice10.out;
      slice10.in = __y0.out;
      result.addr1 = slice9.out;
      slice9.in = __c0.out;
      result.addr0 = slice8.out;
      slice8.in = __b0.out;
      result.write_en = 1'd1;
      result.write_data = __max_0.out;
      upd3[done] = result.done;
    }
    group upd4<"promotable"=1> {
      __x0.write_en = 1'd1;
      add4.left = __x0.out;
      add4.right = const16.out;
      __x0.in = add4.out;
      upd4[done] = __x0.done;
    }
    group upd5<"promotable"=1> {
      __y0.write_en = 1'd1;
      add5.left = __y0.out;
      add5.right = const17.out;
      __y0.in = add5.out;
      upd5[done] = __y0.done;
    }
    group upd6<"promotable"=1> {
      __c0.write_en = 1'd1;
      add6.left = __c0.out;
      add6.right = const18.out;
      __c0.in = add6.out;
      upd6[done] = __c0.done;
    }
    group upd7<"promotable"=1> {
      __b0.write_en = 1'd1;
      add7.left = __b0.out;
      add7.right = const19.out;
      __b0.in = add7.out;
      upd7[done] = __b0.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      @bound(2) while le0.out with cond0 {
        seq {
          @pos(1) let1;
          @bound(2) while le1.out with cond1 {
            seq {
              @pos(2) let2;
              @bound(2) while le2.out with cond2 {
                seq {
                  @pos(3) let3;
                  @bound(2) while le3.out with cond3 {
                    seq {
                      par {
                        seq {
                          let4;
                          let5;
                        }
                        seq {
                          let6;
                          let7;
                        }
                      }
                      @pos(4) let8;
                      @pos(5) let9;
                      @bound(2) while le4.out with cond4 {
                        seq {
                          @pos(6) let10;
                          @bound(2) while le5.out with cond5 {
                            seq {
                              par {
                                @pos(7) let11;
                                @pos(8) let12;
                              }
                              @pos(9) let13;
                              if gt0.out with cond6 {
                                @pos(10) upd0;
                              }
                              @pos(6) upd1;
                            }
                          }
                          @pos(5) upd2;
                        }
                      }
                      @pos(11) upd3;
                      @pos(3) upd4;
                    }
                  }
                  @pos(2) upd5;
                }
              }
              @pos(1) upd6;
            }
          }
          @pos(0) upd7;
        }
      }
    }
  }
}

component main() -> () {
  cells {
    @external data = seq_mem_d4(32, 2, 2, 4, 4, 2, 2, 3, 3);
    @external result = seq_mem_d4(32, 2, 2, 2, 2, 2, 2, 2, 2);
    max_pool2d_2x2x2x2_ = max_pool2d_2x2x2x2();
  }
  wires {

  }
  control {
    seq {
      @pos(0) invoke max_pool2d_2x2x2x2_[data=data, result=result]()();
    }
  }
}
metadata #{
0: let %result: Tensor[(2, 2, 2, 2), int32] /* ty=Tensor[(2, 2, 2, 2), int32] span=from_string:4:3 */ = nn.max_pool2d(%data, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(2, 2, 2, 2), int32] span=from_string:3:48 */;
}#
