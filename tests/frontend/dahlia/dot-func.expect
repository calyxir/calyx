import "primitives/core.futil";
import "primitives/binary_operators.futil";
component dot() -> () {
  cells {
    ref A0 = std_mem_d1(32,4,3);
    ref B0 = std_mem_d1(32,4,3);
    ref out0 = std_mem_d1(32,4,3);
    A_read0_0 = std_reg(32);
    B_read0_0 = std_reg(32);
    add0 = std_add(3);
    bin_read0_0 = std_reg(32);
    const0 = std_const(3,0);
    const1 = std_const(3,3);
    const2 = std_const(3,1);
    i0 = std_reg(3);
    le0 = std_le(3);
    mult_pipe0 = std_mult_pipe(32);
  }
  wires {
    comb group cond0 {
      le0.left = i0.out;
      le0.right = const1.out;
    }
    group let0<"static"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"static"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let1[done] = bin_read0_0.done;
      mult_pipe0.left = A_read0_0.out;
      mult_pipe0.right = B_read0_0.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group upd0<"static"=1> {
      A_read0_0.write_en = 1'd1;
      A0.addr0 = i0.out;
      A_read0_0.in = A0.read_data;
      upd0[done] = A_read0_0.done;
    }
    group upd1<"static"=1> {
      B_read0_0.write_en = 1'd1;
      B0.addr0 = i0.out;
      B_read0_0.in = B0.read_data;
      upd1[done] = B_read0_0.done;
    }
    group upd2<"static"=1> {
      out0.addr0 = i0.out;
      out0.write_en = 1'd1;
      out0.write_data = bin_read0_0.out;
      upd2[done] = out0.done;
    }
    group upd3<"static"=1> {
      i0.write_en = 1'd1;
      add0.left = i0.out;
      add0.right = const2.out;
      i0.in = add0.out;
      upd3[done] = i0.done;
    }
  }
  control {
    seq {
      let0;
      @bound(4) while le0.out with cond0 {
        seq {
          par {
            upd0;
            upd1;
          }
          let1;
          upd2;
          upd3;
        }
      }
    }
  }
}
component main() -> () {
  cells {
    @external(1) A0 = std_mem_d1(32,4,3);
    @external(1) B0 = std_mem_d1(32,4,3);
    dot0 = dot();
    @external(1) out0 = std_mem_d1(32,4,3);
  }
  wires {
  }
  control {
    seq {
      invoke dot0[A0=A0, B0=B0, out0=out0]()();
    }
  }
}

