import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    @external(1) a0 = seq_mem_d1(32,4,3);
    a0_read0_0 = std_reg(32);
    add0 = std_sadd(32);
    add1 = std_add(4);
    @external(1) b0 = seq_mem_d1(32,4,3);
    b0_read0_0 = std_reg(32);
    bin_read0_0 = std_reg(32);
    const0 = std_const(32,0);
    const1 = std_const(4,0);
    const2 = std_const(4,3);
    const3 = std_const(4,1);
    i0 = std_reg(4);
    le0 = std_le(4);
    mult_pipe0 = std_smult_pipe(32);
    res_0 = std_reg(32);
    result = std_reg(32);
    slice0 = std_slice(4,3);
    slice1 = std_slice(4,3);
    v_0 = std_reg(32);
  }
  wires {
    comb group cond0 {
      le0.left = i0.out;
      le0.right = const2.out;
    }
    group let0<"promotable"=1> {
      res_0.in = const0.out;
      res_0.write_en = 1'd1;
      let0[done] = res_0.done;
    }
    group let1<"promotable"=1> {
      i0.in = const1.out;
      i0.write_en = 1'd1;
      let1[done] = i0.done;
    }
    group let2<"promotable"=2> {
      a0_read0_0.in = a0.read_data;
      a0_read0_0.write_en = a0.done;
      let2[done] = a0_read0_0.done;
      a0.content_en = 1'd1;
      a0.addr0 = slice0.out;
      slice0.in = i0.out;
    }
    group let3<"promotable"=2> {
      b0_read0_0.in = b0.read_data;
      b0_read0_0.write_en = b0.done;
      let3[done] = b0_read0_0.done;
      b0.content_en = 1'd1;
      b0.addr0 = slice1.out;
      slice1.in = i0.out;
    }
    group let4<"promotable"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let4[done] = bin_read0_0.done;
      mult_pipe0.left = a0_read0_0.out;
      mult_pipe0.right = b0_read0_0.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group let5<"promotable"=1> {
      v_0.in = bin_read0_0.out;
      v_0.write_en = 1'd1;
      let5[done] = v_0.done;
    }
    group upd0<"promotable"=1> {
      res_0.write_en = 1'd1;
      add0.left = res_0.out;
      add0.right = v_0.out;
      res_0.in = add0.out;
      upd0[done] = res_0.done;
    }
    group upd1<"promotable"=1> {
      i0.write_en = 1'd1;
      add1.left = i0.out;
      add1.right = const3.out;
      i0.in = add1.out;
      upd1[done] = i0.done;
    }
    group upd2<"promotable"=1> {
      result.write_en = 1'd1;
      result.in = res_0.out;
      upd2[done] = result.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      @pos(1) let1;
      @bound(4) while le0.out with cond0 {
        seq {
          par {
            @pos(2) let2;
            @pos(3) let3;
          }
          let4;
          let5;
          upd0;
          @pos(1) upd1;
        }
      }
      @pos(4) upd2;
    }
  }
}
metadata #{
  0: let res: bit<32> = 0;
  1: for (let i: ubit<4> = 0..4) {
  2:   let v = a0[i] * b0[i];
  3:   let v = a0[i] * b0[i];
  4: result := res;
}#

