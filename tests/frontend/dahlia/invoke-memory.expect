import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component mem_copy(length: 3) -> () {
  cells {
    ref dest = seq_mem_d1(32,5,3);
    ref src = seq_mem_d1(32,5,3);
    const0 = std_const(3,0);
    i_0 = std_reg(3);
    lt0 = std_lt(3);
    src_read0_0 = std_reg(32);
  }
  wires {
    comb group cond0 {
      lt0.left = i_0.out;
      lt0.right = length;
    }
    group let0<"promotable"=1> {
      i_0.in = const0.out;
      i_0.write_en = 1'd1;
      let0[done] = i_0.done;
    }
    group let1<"promotable"=2> {
      src_read0_0.in = src.read_data;
      src_read0_0.write_en = src.done;
      let1[done] = src_read0_0.done;
      src.content_en = 1'd1;
      src.addr0 = i_0.out;
    }
    group upd0<"promotable"=1> {
      dest.content_en = 1'd1;
      dest.addr0 = i_0.out;
      dest.write_en = 1'd1;
      dest.write_data = src_read0_0.out;
      upd0[done] = dest.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      while lt0.out with cond0 {
        seq {
          @pos(1) let1;
          @pos(2) upd0;
        }
      }
    }
  }
}
component main() -> () {
  cells {
    const1 = std_const(3,5);
    @external(1) d = seq_mem_d1(32,5,3);
    len_0 = std_reg(3);
    mem_copy0 = mem_copy();
    @external(1) s = seq_mem_d1(32,5,3);
  }
  wires {
    group let2<"promotable"=1> {
      len_0.in = const1.out;
      len_0.write_en = 1'd1;
      let2[done] = len_0.done;
    }
  }
  control {
    seq {
      @pos(3) let2;
      invoke mem_copy0[dest=d, src=s](length=len_0.out)();
    }
  }
}
metadata #{
  0:   let i: ubit<3> = (0 as ubit<3>);
  1:     dest[i] := src[i];
  2:     dest[i] := src[i];
  3: let len: ubit<3> = (5 as ubit<3>);
}#

