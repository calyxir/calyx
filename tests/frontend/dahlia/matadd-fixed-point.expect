import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    @external(1) a0_0 = seq_mem_d2(16,2,2,2,2);
    a0_0_read0_0 = std_reg(16);
    add0 = std_fp_add(16,8,8);
    add1 = std_add(2);
    add2 = std_add(2);
    @external(1) b0_0 = seq_mem_d2(16,2,2,2,2);
    b0_0_read0_0 = std_reg(16);
    const0 = std_const(2,0);
    const1 = std_const(2,1);
    const2 = std_const(2,0);
    const3 = std_const(2,1);
    const4 = std_const(2,1);
    const5 = std_const(2,1);
    i0 = std_reg(2);
    j0 = std_reg(2);
    le0 = std_le(2);
    le1 = std_le(2);
    @external(1) result0_0 = seq_mem_d2(16,2,2,2,2);
  }
  wires {
    comb group cond0 {
      le0.left = i0.out;
      le0.right = const1.out;
    }
    comb group cond1 {
      le1.left = j0.out;
      le1.right = const3.out;
    }
    group let0<"promotable"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"promotable"=1> {
      j0.in = const2.out;
      j0.write_en = 1'd1;
      let1[done] = j0.done;
    }
    group let2<"promotable"=2> {
      a0_0_read0_0.in = a0_0.read_data;
      a0_0_read0_0.write_en = a0_0.done;
      let2[done] = a0_0_read0_0.done;
      a0_0.content_en = 1'd1;
      a0_0.addr1 = j0.out;
      a0_0.addr0 = i0.out;
    }
    group let3<"promotable"=2> {
      b0_0_read0_0.in = b0_0.read_data;
      b0_0_read0_0.write_en = b0_0.done;
      let3[done] = b0_0_read0_0.done;
      b0_0.content_en = 1'd1;
      b0_0.addr1 = j0.out;
      b0_0.addr0 = i0.out;
    }
    group upd0<"promotable"=1> {
      result0_0.content_en = 1'd1;
      result0_0.addr1 = j0.out;
      result0_0.addr0 = i0.out;
      result0_0.write_en = 1'd1;
      add0.left = a0_0_read0_0.out;
      add0.right = b0_0_read0_0.out;
      result0_0.write_data = add0.out;
      upd0[done] = result0_0.done;
    }
    group upd1<"promotable"=1> {
      j0.write_en = 1'd1;
      add1.left = j0.out;
      add1.right = const4.out;
      j0.in = add1.out;
      upd1[done] = j0.done;
    }
    group upd2<"promotable"=1> {
      i0.write_en = 1'd1;
      add2.left = i0.out;
      add2.right = const5.out;
      i0.in = add2.out;
      upd2[done] = i0.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      @bound(2) while le0.out with cond0 {
        seq {
          @pos(1) let1;
          @bound(2) while le1.out with cond1 {
            seq {
              par {
                @pos(2) let2;
                @pos(3) let3;
              }
              @pos(4) upd0;
              @pos(1) upd1;
            }
          }
          @pos(0) upd2;
        }
      }
    }
  }
}
metadata #{
  0: for (let i: ubit<2> = 0..2) {
  1:   for (let j: ubit<2> = 0..2) {
  2:     result0_0[i][j] := a0_0[i][j] + b0_0[i][j];
  3:     result0_0[i][j] := a0_0[i][j] + b0_0[i][j];
  4:     result0_0[i][j] := a0_0[i][j] + b0_0[i][j];
}#

