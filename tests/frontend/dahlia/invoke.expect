import "primitives/core.futil";
import "primitives/binary_operators.futil";
component add(a: 32, b: 32) -> (@stable(1) out: 32) {
  cells {
    add0 = std_add(32);
    tmp_0 = std_reg(32);
  }
  wires {
    group let0<"static"=1> {
      tmp_0.in = add0.out;
      tmp_0.write_en = 1'd1;
      let0[done] = tmp_0.done;
      add0.left = a;
      add0.right = b;
    }
    out = tmp_0.out;
  }
  control {
    let0;
  }
}
component main() -> () {
  cells {
    add1 = add();
    const0 = std_const(32,41);
    const1 = std_const(32,1);
    lhs_0 = std_reg(32);
    rhs_0 = std_reg(32);
    sum_0 = std_reg(32);
  }
  wires {
    group let1<"static"=1> {
      lhs_0.in = const0.out;
      lhs_0.write_en = 1'd1;
      let1[done] = lhs_0.done;
    }
    group let2<"static"=1> {
      rhs_0.in = const1.out;
      rhs_0.write_en = 1'd1;
      let2[done] = rhs_0.done;
    }
    group let3 {
      sum_0.in = add1.out;
      sum_0.write_en = 1'd1;
      let3[done] = sum_0.done;
    }
  }
  control {
    seq {
      par {
        let1;
        let2;
      }
      invoke add1(a=lhs_0.out, b=rhs_0.out)();
      let3;
    }
  }
}

