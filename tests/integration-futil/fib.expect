import "primitives/std.lib";
component main() -> () {
  cells {
    a_0 = prim std_reg(32);
    add0 = prim std_add(32);
    add1 = prim std_add(32);
    b_0 = prim std_reg(32);
    const0 = prim std_const(32,1);
    const1 = prim std_const(32,0);
    const2 = prim std_const(32,1);
    const3 = prim std_const(32,10);
    const4 = prim std_const(32,1);
    i_0 = prim std_reg(32);
    lt0 = prim std_lt(32);
    tmp_0 = prim std_reg(32);
  }
  wires {
    group cond0<"static"=0> {
      cond0[done] = 1'd1;
      lt0.left = i_0.out;
      lt0.right = const3.out;
    }
    group let0<"static"=1> {
      a_0.in = const0.out;
      a_0.write_en = 1'd1;
      let0[done] = a_0.done;
    }
    group let1<"static"=1> {
      i_0.in = const1.out;
      i_0.write_en = 1'd1;
      let1[done] = i_0.done;
    }
    group let2<"static"=1> {
      b_0.in = const2.out;
      b_0.write_en = 1'd1;
      let2[done] = b_0.done;
    }
    group let3<"static"=1> {
      tmp_0.in = b_0.out;
      tmp_0.write_en = 1'd1;
      let3[done] = tmp_0.done;
    }
    group upd0<"static"=1> {
      i_0.write_en = 1'd1;
      add0.left = i_0.out;
      add0.right = const4.out;
      i_0.in = 1'd1 ? add0.out;
      upd0[done] = i_0.done ? 1'd1;
    }
    group upd1<"static"=1> {
      b_0.write_en = 1'd1;
      add1.left = a_0.out;
      add1.right = tmp_0.out;
      b_0.in = 1'd1 ? add1.out;
      upd1[done] = b_0.done ? 1'd1;
    }
    group upd2<"static"=1> {
      a_0.write_en = 1'd1;
      a_0.in = 1'd1 ? tmp_0.out;
      upd2[done] = a_0.done ? 1'd1;
    }
  }
  control {
    seq {
      par {
        let0;
        let1;
      }
      let2;
      while lt0.out with cond0 {
        seq {
          par {
            let3;
            upd0;
          }
          upd1;
          upd2;
        }
      }
    }
  }
}
