import "primitives/std.lib";
component main() -> () {
  cells {
    const0 = prim std_const(32,0);
    const1 = prim std_const(32,1);
    const2 = prim std_const(32,2);
    const3 = prim std_const(32,1);
    const4 = prim std_const(32,2);
    const5 = prim std_const(32,4);
    gt0 = prim std_gt(32);
    x0 = prim std_reg(32);
  }
  wires {
    group cond0<"static"=0> {
      cond0[done] = 1'd1;
      gt0.left = x0.out;
      gt0.right = const3.out;
    }
    group let0<"static"=1> {
      x0.in = const0.out;
      x0.write_en = 1'd1;
      let0[done] = x0.done;
    }
    group upd0<"static"=1> {
      x0.write_en = 1'd1;
      x0.in = 1'd1 ? const1.out;
      upd0[done] = x0.done ? 1'd1;
    }
    group upd1<"static"=1> {
      x0.write_en = 1'd1;
      x0.in = 1'd1 ? const2.out;
      upd1[done] = x0.done ? 1'd1;
    }
    group upd2<"static"=1> {
      x0.write_en = 1'd1;
      x0.in = 1'd1 ? const4.out;
      upd2[done] = x0.done ? 1'd1;
    }
    group upd3<"static"=1> {
      x0.write_en = 1'd1;
      x0.in = 1'd1 ? const5.out;
      upd3[done] = x0.done ? 1'd1;
    }
  }
  control {
    seq {
      let0;
      upd0;
      upd1;
      if gt0.out with cond0 {
        upd2;
      } else {
        upd3;
      }
    }
  }
}
