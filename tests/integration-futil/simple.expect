import "primitives/std.lib";
component main() -> () {
  cells {
    a_0 = prim std_reg(32);
    b_0 = prim std_reg(32);
    const0 = prim std_const(32,10);
    const1 = prim std_const(32,1);
    const2 = prim std_const(32,5);
    const3 = prim std_const(32,20);
    const4 = prim std_const(32,40);
    gt0 = prim std_gt(32);
    y_0 = prim std_reg(32);
    z_0 = prim std_reg(32);
  }
  wires {
    group cond0<"static"=0> {
      cond0[done] = 1'd1;
      gt0.left = a_0.out;
      gt0.right = const2.out;
    }
    group let0<"static"=1> {
      a_0.in = const0.out;
      a_0.write_en = 1'd1;
      let0[done] = a_0.done;
    }
    group let1<"static"=1> {
      b_0.in = const1.out;
      b_0.write_en = 1'd1;
      let1[done] = b_0.done;
    }
    group let2<"static"=1> {
      y_0.in = const3.out;
      y_0.write_en = 1'd1;
      let2[done] = y_0.done;
    }
    group let3<"static"=1> {
      z_0.in = const4.out;
      z_0.write_en = 1'd1;
      let3[done] = z_0.done;
    }
  }
  control {
    seq {
      par {
        let0;
        let1;
      }
      if gt0.out with cond0 {
        let2;
      } else {
        let3;
      }
    }
  }
}
