import "primitives/std.lib";
component main() -> () {
  cells {
    add0 = prim std_add(4);
    bin_read0_0 = prim std_reg(4);
    const0 = prim std_const(4,0);
    const1 = prim std_const(4,2);
    const2 = prim std_const(4,0);
    const3 = prim std_const(4,1);
    eq0 = prim std_eq(4);
    mod_pipe0 = prim std_mod_pipe(4);
    x_0 = prim std_reg(4);
  }
  wires {
    group cond0<"static"=0> {
      cond0[done] = 1'd1;
      eq0.left = bin_read0_0.out;
      eq0.right = const2.out;
    }
    group let0<"static"=1> {
      x_0.in = const0.out;
      x_0.write_en = 1'd1;
      let0[done] = x_0.done;
    }
    group let1 {
      bin_read0_0.in = mod_pipe0.out;
      bin_read0_0.write_en = mod_pipe0.done;
      let1[done] = bin_read0_0.done;
      mod_pipe0.left = x_0.out;
      mod_pipe0.right = const1.out;
      mod_pipe0.go = !mod_pipe0.done ? 1'd1;
    }
    group upd0<"static"=1> {
      x_0.write_en = 1'd1;
      add0.left = x_0.out;
      add0.right = const3.out;
      x_0.in = 1'd1 ? add0.out;
      upd0[done] = x_0.done ? 1'd1;
    }
  }
  control {
    seq {
      let0;
      let1;
      if eq0.out with cond0 {
        upd0;
      }
    }
  }
}
