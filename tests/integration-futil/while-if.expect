import "primitives/std.lib";
component main() -> () {
  cells {
    add0 = prim std_add(4);
    add1 = prim std_add(4);
    add2 = prim std_add(4);
    add3 = prim std_add(4);
    add4 = prim std_add(4);
    const0 = prim std_const(4,0);
    const1 = prim std_const(4,0);
    const10 = prim std_const(4,1);
    const11 = prim std_const(4,1);
    const2 = prim std_const(4,0);
    const3 = prim std_const(4,0);
    const4 = prim std_const(4,10);
    const5 = prim std_const(4,2);
    const6 = prim std_const(4,0);
    const7 = prim std_const(4,1);
    const8 = prim std_const(4,1);
    const9 = prim std_const(4,1);
    eq0 = prim std_eq(4);
    i0 = prim std_reg(4);
    lt0 = prim std_lt(4);
    mod0 = prim std_mod(4);
    x0 = prim std_reg(4);
    y0 = prim std_reg(4);
    z0 = prim std_reg(4);
  }
  wires {
    group cond0<"static"=1> {
      cond0[done] = 1'd1;
      lt0.left = i0.out;
      lt0.right = const4.out;
    }
    group cond1<"static"=1> {
      cond1[done] = 1'd1;
      eq0.left = mod0.out;
      eq0.right = const6.out;
      mod0.left = i0.out;
      mod0.right = const5.out;
    }
    group let0<"static"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"static"=1> {
      x0.in = const1.out;
      x0.write_en = 1'd1;
      let1[done] = x0.done;
    }
    group let2<"static"=1> {
      y0.in = const2.out;
      y0.write_en = 1'd1;
      let2[done] = y0.done;
    }
    group let3<"static"=1> {
      z0.in = const3.out;
      z0.write_en = 1'd1;
      let3[done] = z0.done;
    }
    group upd0<"static"=1> {
      x0.write_en = 1'd1;
      add0.left = x0.out;
      add0.right = const7.out;
      x0.in = add0.out;
      upd0[done] = x0.done;
    }
    group upd1<"static"=1> {
      x0.write_en = 1'd1;
      add1.left = x0.out;
      add1.right = const8.out;
      x0.in = add1.out;
      upd1[done] = x0.done;
    }
    group upd2<"static"=1> {
      y0.write_en = 1'd1;
      add2.left = y0.out;
      add2.right = const9.out;
      y0.in = add2.out;
      upd2[done] = y0.done;
    }
    group upd3<"static"=1> {
      z0.write_en = 1'd1;
      add3.left = z0.out;
      add3.right = const10.out;
      z0.in = add3.out;
      upd3[done] = z0.done;
    }
    group upd4<"static"=1> {
      i0.write_en = 1'd1;
      add4.left = i0.out;
      add4.right = const11.out;
      i0.in = add4.out;
      upd4[done] = i0.done;
    }
  }
  control {
    seq {
      let0;
      let1;
      let2;
      let3;
      while lt0.out with cond0 {
        seq {
          if eq0.out with cond1 {
            seq {
              upd0;
              upd1;
            }
          } else {
            seq {
              upd2;
              upd3;
            }
          }
          upd4;
        }
      }
    }
  }
}
