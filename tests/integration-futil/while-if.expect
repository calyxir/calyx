import "primitives/std.lib";
component main() -> () {
  cells {
    add0 = prim std_add(4);
    add1 = prim std_add(4);
    add2 = prim std_add(4);
    add3 = prim std_add(4);
    add4 = prim std_add(4);
    bin_read0_0 = prim std_reg(4);
    const0 = prim std_const(4,0);
    const1 = prim std_const(4,0);
    const10 = prim std_const(4,1);
    const11 = prim std_const(4,1);
    const2 = prim std_const(4,0);
    const3 = prim std_const(4,0);
    const4 = prim std_const(4,10);
    const5 = prim std_const(4,2);
    const6 = prim std_const(4,0);
    const7 = prim std_const(4,1);
    const8 = prim std_const(4,1);
    const9 = prim std_const(4,1);
    eq0 = prim std_eq(4);
    i_0 = prim std_reg(4);
    lt0 = prim std_lt(4);
    mod_pipe0 = prim std_mod_pipe(4);
    x_0 = prim std_reg(4);
    y_0 = prim std_reg(4);
    z_0 = prim std_reg(4);
  }
  wires {
    group cond0<"static"=0> {
      cond0[done] = 1'd1;
      lt0.left = i_0.out;
      lt0.right = const4.out;
    }
    group cond1<"static"=0> {
      cond1[done] = 1'd1;
      eq0.left = bin_read0_0.out;
      eq0.right = const6.out;
    }
    group let0<"static"=1> {
      i_0.in = const0.out;
      i_0.write_en = 1'd1;
      let0[done] = i_0.done;
    }
    group let1<"static"=1> {
      x_0.in = const1.out;
      x_0.write_en = 1'd1;
      let1[done] = x_0.done;
    }
    group let2<"static"=1> {
      y_0.in = const2.out;
      y_0.write_en = 1'd1;
      let2[done] = y_0.done;
    }
    group let3<"static"=1> {
      z_0.in = const3.out;
      z_0.write_en = 1'd1;
      let3[done] = z_0.done;
    }
    group let4 {
      bin_read0_0.in = mod_pipe0.out;
      bin_read0_0.write_en = mod_pipe0.done;
      let4[done] = bin_read0_0.done;
      mod_pipe0.left = i_0.out;
      mod_pipe0.right = const5.out;
      mod_pipe0.go = !mod_pipe0.done ? 1'd1;
    }
    group upd0<"static"=1> {
      x_0.write_en = 1'd1;
      add0.left = x_0.out;
      add0.right = const7.out;
      x_0.in = 1'd1 ? add0.out;
      upd0[done] = x_0.done ? 1'd1;
    }
    group upd1<"static"=1> {
      x_0.write_en = 1'd1;
      add1.left = x_0.out;
      add1.right = const8.out;
      x_0.in = 1'd1 ? add1.out;
      upd1[done] = x_0.done ? 1'd1;
    }
    group upd2<"static"=1> {
      y_0.write_en = 1'd1;
      add2.left = y_0.out;
      add2.right = const9.out;
      y_0.in = 1'd1 ? add2.out;
      upd2[done] = y_0.done ? 1'd1;
    }
    group upd3<"static"=1> {
      z_0.write_en = 1'd1;
      add3.left = z_0.out;
      add3.right = const10.out;
      z_0.in = 1'd1 ? add3.out;
      upd3[done] = z_0.done ? 1'd1;
    }
    group upd4<"static"=1> {
      i_0.write_en = 1'd1;
      add4.left = i_0.out;
      add4.right = const11.out;
      i_0.in = 1'd1 ? add4.out;
      upd4[done] = i_0.done ? 1'd1;
    }
  }
  control {
    seq {
      par {
        let0;
        let1;
        let2;
        let3;
      }
      while lt0.out with cond0 {
        par {
          seq {
            let4;
            if eq0.out with cond1 {
              seq {
                upd0;
                upd1;
              }
            } else {
              par {
                upd2;
                upd3;
              }
            }
          }
          upd4;
        }
      }
    }
  }
}
