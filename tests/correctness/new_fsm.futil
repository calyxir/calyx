import "primitives/core.futil";
import "primitives/memories/comb.futil";

component main() -> () {
  cells {
    a = std_reg(32);
    b = std_reg(32);
    r = std_reg(32);
    lt0 = std_lt(32);
    lt1 = std_lt(32);
    add = std_add(32);
    @external(1) out = comb_mem_d1(32, 1, 1);
  }
  wires {
    group A{
      a.in = 32'd2;
      a.write_en = 1'd1;
      A[done] = a.done;
    }
    group B{
      b.in = 32'd4;
      b.write_en = 1'd1;
      B[done] = b.done;
    }
    group R{
      r.in = 32'd10;
      r.write_en = 1'd1;
      R[done] = r.done;
    }
    comb group a_lt_seven {
      lt0.left = a.out;
      lt0.right = 32'd7;
    }
    comb group b_lt_a {
      lt1.left = b.out;
      lt1.right = a.out;
    }
    group r_plus_a {
      add.left = r.out;
      add.right = a.out;
      r.in = add.out;
      r.write_en = 1'd1;
      r_plus_a[done] = r.done;
    }
    group r_plus_b {
      add.left = r.out;
      add.right = b.out;
      r.in = add.out;
      r.write_en = 1'd1;
      r_plus_b[done] = r.done;
    }
    group r_plus_3 {
      add.left = r.out;
      add.right = 32'd3;
      r.in = add.out;
      r.write_en = 1'd1;
      r_plus_3[done] = r.done;
    }
    group a_plus_1 {
      add.left = a.out;
      add.right = 32'd1;
      a.in = add.out;
      a.write_en = 1'd1;
      a_plus_1[done] = a.done;
    }
    group write_mem {
      out.addr0 = 1'd0;
      out.write_data = r.out;
      out.write_en = 1'd1;
      write_mem[done] = out.done;
    }
  }
  control {
    seq{
      @new_fsm seq {
        A;B;R;
      }
      @new_fsm while lt0.out with a_lt_seven {
        seq {
          @new_fsm if lt1.out with b_lt_a {
            r_plus_b;
          }
          else {
            r_plus_a;
          }
          r_plus_3;
          a_plus_1;
        }
      }
      write_mem;
    }
  }
}
