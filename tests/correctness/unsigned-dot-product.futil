import "primitives/core.futil";
import "primitives/bitnum/signed.futil";

component main() -> () {
  cells {
    add0 = std_sadd(3);
    const0 = std_const(3,0); // Initialize the counter.
    const1 = std_const(3,4);
    const2 = std_const(3,1); // Increment by 1.
    counter = std_reg(3);
    r_2 = std_reg(32);
    lt0 = std_lt(3);
    mem0 = std_mem_d2(32, 4, 4, 3, 3);
    mem1 = std_mem_d2(32, 4, 4, 3, 3);
    add1 = std_add(32);
    mult = std_smult(32);
  }
  wires {
    group cond0<"static"=0> {
      cond0[done] = 1'd1;
      lt0.left = counter.out;
      lt0.right = const1.out;
    } // Control segment for `counter` < `4`.

    group let0<"static"=1> {
      counter.in = const0.out;
      counter.write_en = 1'd1;
      let0[done] = counter.done;
    } // Initializes the counter to 0.

    group upd0<"static"=1> {
      counter.write_en = 1'd1;
      add0.left = counter.out;
      add0.right = const2.out; // Increment by 1.
      counter.in = add0.out;
      upd0[done] = counter.done ? 1'd1;
    } // Updates the counter.

    group upd1<"static"=1> {
      mem0.addr0 = counter.out;
      mem0.addr1 = 3'd0;
      mem1.addr0 = counter.out;
      mem1.addr1 = 3'd0;
      r_2.write_en = 1'd1;
      mult.left = mem0.read_data;
      mult.right = mem1.read_data;
      add1.left = mult.out;
      add1.right = r_2.out;
      r_2.in =  add1.out;
      upd1[done] = r_2.done ? 1'd1;
    }
  }
  control {
    seq {
      let0;
      while lt0.out with cond0 {
        seq {
          upd1;
          upd0;
        }
      }
    }
  }
}
