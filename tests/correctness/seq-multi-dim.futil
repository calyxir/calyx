import "primitives/core.futil";
import "primitives/binary_operators.futil";
import "primitives/memories.futil";

component main() -> () {
  cells {
    @external in1 = seq_mem_d2(32,3,3,2,2);
    @external in2 = seq_mem_d2(32,3,3,2,2);
    @external out = seq_mem_d2(32,3,3,2,2);

    // Compute primitives
    add = std_add(32);
    in1_reg = std_reg(32);
    in2_reg = std_reg(32);

    // Counter
    i = std_reg(2);
    j = std_reg(2);
    lt = std_lt(2);
    lt2 = std_lt(2);
    add_i = std_add(2);
    add_j = std_add(2);
  }
  wires {
    group init_i{
      i.write_en = 1'd1;
      i.in = 2'd0;
      init_i[done] = i.done;
    }
    group init_j{
      j.write_en = 1'd1;
      j.in = 2'd0;
      init_j[done] = j.done;
    }
    comb group i_lt {
      lt.left = i.out;
      lt.right = 2'd3;
    }
    comb group j_lt {
      lt2.left = j.out;
      lt2.right = 2'd3;
    }
    group read_in1{
      in1.addr0 = i.out; 
      in1.addr1 = j.out; 
      in1.read_en = 1'd1; 
      in1_reg.write_en = in1.read_done; 
      in1_reg.in = in1.out;
      read_in1[done] = in1_reg.done; 
    }
    group read_in2{
      in2.addr0 = i.out; 
      in2.addr1 = j.out; 
      in2.read_en = 1'd1;
      in2_reg.write_en = in2.read_done; 
      in2_reg.in = in2.out;
      read_in2[done] = in2_reg.done; 
    }
    group update_val {
      add.left = in1_reg.out; 
      add.right = in2_reg.out; 
      out.addr0 = i.out; 
      out.addr1 = j.out;
      out.write_en = 1'd1; 
      out.in = add.out;
      update_val[done] = out.write_done;
    }
    group incr_i {
      add_i.left = i.out; 
      add_i.right = 2'd1;
      i.write_en = 1'd1; 
      i.in = add_i.out;
      incr_i[done] = i.done; 
    }
    group incr_j {
      add_j.left = j.out; 
      add_j.right = 2'd1;
      j.write_en = 1'd1; 
      j.in = add_j.out;
      incr_j[done] = j.done; 
    }
  }
  control {
    seq {
      init_i;
      while lt.out with i_lt {
        seq{
          init_j;
          while lt2.out with j_lt{
            seq{
              par{
                read_in1; 
                read_in2;
              }
              update_val; 
              incr_j;
            }
          }
          incr_i;
        }
      }
    }
  }
}
