import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/float/divSqrtFN.futil";

component main(@go go: 1) -> (@done done: 1) {
    cells {
        @external mem_read_a = comb_mem_d1(32, 1, 1);
        @external mem_read_b = comb_mem_d1(32, 1, 1);
        @external mem_write = comb_mem_d1(32, 1, 1);
        divFN0 = std_divSqrtFN(8, 24, 32);
    }

    wires {
        group div_std_format {
            mem_read_a.addr0 = 1'b0;
            divFN0.left = mem_read_a.read_data;

            mem_read_b.addr0 = 1'b0;
            divFN0.right = mem_read_b.read_data;

            divFN0.go = 1'b1;

            divFN0.control = 1'b0;
            divFN0.roundingMode = 3'b0;
            divFN0.sqrtOp = 1'b0;

            mem_write.addr0 = 1'b0;
            mem_write.write_data = divFN0.out;
            mem_write.write_en = 1'b1;

            div_std_format[done] = (mem_write.done & divFN0.done) ? 1'd1;
        }
    }

    control {
        seq {
            div_std_format;
        }
    }
}
