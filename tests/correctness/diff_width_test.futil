import "primitives/core.futil";
import "primitives/fixed/unsigned.futil";

component main() -> () {
  cells {
    add0 = prim std_add(3);
    counter = prim std_reg(3);
    lt0 = prim std_lt(3);

    mem0 = prim std_mem_d2(8, 4, 4, 3, 3);
    mem1 = prim std_mem_d2(8, 4, 4, 3, 3);
    mem2 = prim std_mem_d2(9, 4, 4, 3, 3);

    add1 = prim fixed_p_std_add_dbit(8, 8, 6, 2, 5, 3, 9);
  }
  wires {
    group cond0<"static"=0> {
      lt0.left = counter.out;
      lt0.right = 3'd4;
      cond0[done] = 1'd1;
    } // ctrl segment will count until idx is 4

    group let0<"static"=1> {
      counter.in = 3'd0;
      counter.write_en = 1'd1;
      let0[done] = counter.done;
    } // initializing the counter 0

    group upd0<"static"=1> {
      counter.write_en = 1'd1;
      add0.left = counter.out;
      add0.right = 3'd1; // incremented by 1
      counter.in = add0.out;
      upd0[done] = counter.done ? 1'd1;
    } // updates the counter

    group upd1<"static"=1> {
      mem0.addr0 = counter.out;
      mem0.addr1 = 3'd0;
      mem1.addr0 = counter.out;
      mem1.addr1 = 3'd0;
      mem2.addr0 = counter.out;
      mem2.addr1 = 3'd0;
      add1.left = mem0.read_data;
      add1.right= mem1.read_data;
      mem2.write_en = 1'd1;
      mem2.write_data = add1.out;
      upd1[done] = mem2.done ? 1'd1;
    }
  }
  control {
    seq {
      let0;
      while lt0.out with cond0 {
        seq {
          upd1;
          upd0;
        }
      }

    }
  }
}
