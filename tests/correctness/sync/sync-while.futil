// test barrier for while loops
// expected resolution order:
// thread 1:
// no-op;   sync;   r(1);   w(2);   sync;   no-op;          sync;  r (3); w(4);
// sync;    no-op;        sync;  r(5); w(6); sync;
// thread 2:
// w(1);    sync;   no-op;          sync;   r(2);    w(3);  sync;  no-op;     
// sync;    r(4);  w(5);  sync;  no-op;      sync;   r(6);
import "primitives/core.futil";
import "primitives/sync.futil";

component main() -> () {
  cells {
    @external out = std_mem_d1(32, 6, 3);
    val = std_reg(32);
    add_0 = std_add(32);
    addr = std_reg(3);
    add_1 = std_add(3);
    lt = std_lt(3);
    no_use_1 = std_reg(32);
    no_use_2 = std_reg(32);
  }

  wires {
    group no_op_1 {
      no_use_1.in = 32'd0;
      no_use_1.write_en = 1'd1;
      no_op_1[done] = no_use_1.done;
    }
    
    group no_op_2 {
      no_use_2.in = 32'd0;
      no_use_2.write_en = 1'd1;
      no_op_2[done] = no_use_2.done;
    }

    group incr_val {
      add_0.left = val.out;
      add_0.right = 32'd1;
      val.in = add_0.out;
      val.write_en = 1'd1;
      incr_val[done] = val.done;
    }

    group reg_to_mem {
      out.write_en = 1'd1;
      out.write_data = val.out;
      out.addr0 = addr.out;
      reg_to_mem[done] = out.done;
    }

    group incr_idx {
      add_1.left = addr.out;
      add_1.right = 3'd1;
      addr.in = add_1.out;
      addr.write_en = 1'd1;
      incr_idx[done] = addr.done;
    }

    comb group cmp {
      lt.left = addr.out;
      lt.right = 3'd6;
    }
  }

  control {
    par {
      // thread 1
      while lt.out with cmp {
        seq {
          @sync(1) no_op_1;
          reg_to_mem;
          incr_idx;
          @sync(2) incr_val;
        }
      }

      // thread 2
      while lt.out with cmp {
        seq {
          @sync(1) incr_val;
          @sync(2) no_op_2;
          reg_to_mem;
          incr_idx;
        }
      }
    }
  }
}