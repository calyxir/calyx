import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";

component main() -> () {
  cells {
    res1 = std_reg(32);
    res2 = std_reg(32);
    add1 = std_add(32);
    add2 = std_add(32);
    mult1 = std_mult_pipe(32);
    mult2 = std_mult_pipe(32);
    @external(1) m = seq_mem_d1(32,1,1);
  }
  wires {
    static<1> group incr_res1 {
      res1.write_en = 1'd1;
      res1.in = add1.out;
      add1.left = res1.out;
      add1.right = 32'd1;
    }
    static<4> group double_res1 {
      res1.write_en = %3 ? 1'd1;
      res1.in = %3 ? mult1.out;
      mult1.go = %[0:3] ? 1'd1;
      mult1.left =  %[0:3] ? res1.out;
      mult1.right = %[0:3] ? 32'd2;
    }
    static<1> group incr_res2 {
      res2.write_en = 1'd1;
      res2.in = add2.out;
      add2.left = res2.out;
      add2.right = 32'd1;
    }
    static<4> group double_res2 {
      res2.write_en = %3 ? 1'd1;
      res2.in = %3 ? mult2.out;
      mult2.go = %[0:3] ? 1'd1;
      mult2.left =  %[0:3] ? res2.out;
      mult2.right = %[0:3] ? 32'd2;
    }
    static<1> group write_mem {
      m.addr0 = 1'd0;
      m.content_en = 1'd1;
      m.write_en = 1'd1;
      m.write_data = add1.out;
      add1.left = res1.out;
      add1.right = res2.out;
    }
  }
  control {
    static seq {
      incr_res1; incr_res2;
      static par {
        static seq {
          incr_res1; double_res1;
          static repeat 5 {
            static seq { incr_res1; double_res1;}
          }
        }
        static seq {
          double_res2;
          static repeat 20 {
            incr_res2;
          }
        }
      }
      incr_res1;
      incr_res2;
      write_mem;
    }
  }
}
