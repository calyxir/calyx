import "primitives/core.futil";
import "primitives/binary_operators.futil";
import "primitives/pipelined.futil";

component leaky_relu(value: 32, index: 32, out_mem_done: 1, idx_reg_out: 32) -> (out_mem_addr0: 32, out_mem_write_data: 32, out_mem_write_en: 1, idx_reg_write_en: 1, idx_reg_in: 32) {
  cells {
    fp_mult = std_fp_smult_pipe(32, 16, 16);
    val_gt = std_fp_sgt(32, 16, 16);
    incr_idx = std_add(32);
    write_mem = std_wire(1);
  }
  wires {
    val_gt.left = value;
    val_gt.right = 32'd0;
    group do_relu {
      fp_mult.left = 32'd655;
      fp_mult.right = value;
      fp_mult.go = !(val_gt.out | fp_mult.done) ? 1'd1;
      write_mem.in = fp_mult.done | val_gt.out ? 1'd1;
      incr_idx.left = idx_reg_out;
      incr_idx.right = 32'd1;
      idx_reg_in = write_mem.out ? incr_idx.out;
      idx_reg_write_en = write_mem.out ? 1'd1;
      out_mem_write_en = write_mem.out ? 1'd1;
      out_mem_addr0 = index;
      out_mem_write_data = val_gt.out ? value;
      out_mem_write_data = !val_gt.out ? fp_mult.out;
      do_relu[done] = out_mem_done;
    }
  }
  control {
    do_relu;
  }
}

component systolic_array_comp(depth: 32, t0_read_data: 32, t1_read_data: 32, t2_read_data: 32, t3_read_data: 32, l0_read_data: 32, l1_read_data: 32, out_mem_0_done: 1, out_mem_1_done: 1) -> (t0_addr0: 2, t1_addr0: 2, t2_addr0: 2, t3_addr0: 2, l0_addr0: 2, l1_addr0: 2, out_mem_0_addr0: 32, out_mem_0_write_data: 32, out_mem_0_write_en: 1, out_mem_1_addr0: 32, out_mem_1_write_data: 32, out_mem_1_write_en: 1) {
  cells {
    cond_reg = std_reg(1);
    relu_pause_wire = std_wire(1);
    relu_finished_wire = std_wire(1);
    cond_wire = std_wire(1);
    leaky_relu_comp = leaky_relu();
    cur_idx = std_reg(32);
  }
  wires {
    static<1> group init_cond_reg {
      cond_reg.in = 1'd1;
      cond_reg.write_en = 1'd1;
    }
    static<1> group write_cond_reg {
      cond_wire.in = cur_idx.out == 32'd4 ? 1'd1;
      cond_reg.in = !cond_wire.out ? 1'd1;
      cond_reg.in = cond_wire.out ? 1'd0;
      cond_reg.write_en = 1'd1;
    }
    static<1> group execute_relu_r0 {
      relu_pause_wire.in = relu_finished_wire.out | leaky_relu_comp.done ? 1'd1;
      leaky_relu_comp.go = !relu_pause_wire.out ? 1'd1;
      leaky_relu_comp.value = 32'b11111111111100110100000000000000;
      leaky_relu_comp.index = cur_idx.out;
      leaky_relu_comp.out_mem_done = out_mem_0_done;
      leaky_relu_comp.idx_reg_out = cur_idx.out;
      out_mem_0_addr0 = leaky_relu_comp.out_mem_addr0;
      out_mem_0_write_data = leaky_relu_comp.out_mem_write_data;
      out_mem_0_write_en = leaky_relu_comp.out_mem_write_en;
      cur_idx.write_en = leaky_relu_comp.idx_reg_write_en;
      cur_idx.in = leaky_relu_comp.idx_reg_in;
      relu_finished_wire.in = cur_idx.out == 32'd4 ? 1'd1;
    }
  }
  control {
    seq {
      init_cond_reg;
      while cond_reg.out {
        static par {execute_relu_r0; write_cond_reg;}
      }
    }

  }
}
component main() -> () {
  cells {
    systolic_array = systolic_array_comp();
    @external t0 = std_mem_d1(32, 3, 2);
    @external t1 = std_mem_d1(32, 3, 2);
    @external t2 = std_mem_d1(32, 3, 2);
    @external t3 = std_mem_d1(32, 3, 2);
    @external l0 = std_mem_d1(32, 3, 2);
    @external l1 = std_mem_d1(32, 3, 2);
    @external out_mem_0 = std_mem_d1(32, 4, 32);
    @external out_mem_1 = std_mem_d1(32, 4, 32);
  }
  wires {

  }
  control {
    invoke systolic_array(depth=32'd3, t0_read_data=t0.read_data, t1_read_data=t1.read_data, t2_read_data=t2.read_data, t3_read_data=t3.read_data, l0_read_data=l0.read_data, l1_read_data=l1.read_data, out_mem_0_done=out_mem_0.done, out_mem_1_done=out_mem_1.done)(t0_addr0=t0.addr0, t1_addr0=t1.addr0, t2_addr0=t2.addr0, t3_addr0=t3.addr0, l0_addr0=l0.addr0, l1_addr0=l1.addr0, out_mem_0_addr0=out_mem_0.addr0, out_mem_0_write_data=out_mem_0.write_data, out_mem_0_write_en=out_mem_0.write_en, out_mem_1_addr0=out_mem_1.addr0, out_mem_1_write_data=out_mem_1.write_data, out_mem_1_write_en=out_mem_1.write_en);
  }
}