ver = "0.2.8"

##### Compilation Tests ######
## Test each pass in isolation. Gets the pass flags from a comment on the first line of the file
[[tests]]
name = "passes"
paths = [
  "tests/passes/*.futil",
  "tests/passes/infer-static/*.futil",
  "tests/passes/resource-sharing/*.futil",
  "tests/passes/minimize-regs/*.futil",
  "tests/passes/compile-control/*.futil",
  "tests/passes/regressions/*.futil"
]
# gets the pass flags a comment on the first line of the test file
cmd = """
flags=$(head -n 1 {} | cut -c 3-)
./target/debug/futil {} $flags
"""

[[tests]]
name = "parsing"
# Round-tripping from the compiler should not change anything.
paths = [ "./tests/parsing/*.expect" ]
cmd = """
./target/debug/futil {} -p none
"""

## Tests the error messages generated by the compiler. Runs passes for error
## checking.
[[tests]]
name = "errors"
paths = [
  "tests/errors/*.futil",
  "tests/errors/parser/*.futil"
]
cmd = """
./target/debug/futil {} -p well-formed -p papercut -p synthesis-papercut
"""

##### Correctness Tests #####
## Tests that ensure that individual control constructs have correct
## behavior when compiled.
[[tests]]
name = "correctness dynamic"
paths = [ "tests/correctness/*.futil" ]
cmd = """
fud exec -s verilog.data {}.data \
         -s futil.flags '-d static-timing' \
         -s futil.exec './target/debug/futil' \
         -s verilog.cycle_limit 500 \
         {} --to dat \
         -q \
         | jq .memories
"""

## Same as correctness dynamic but runes with static-timing
[[tests]]
name = "correctness static timing"
paths = [ "tests/correctness/*.futil" ]
cmd = """
fud exec -s verilog.cycle_limit 500 \
         -s verilog.data {}.data \
         -s futil.exec './target/debug/futil' \
         {} --to dat \
         -q \
         | jq .memories
"""

[[tests]]
name = "systolic array correctness"
paths = [ "tests/correctness/systolic/*.systolic" ]
cmd = """
fud e --from systolic --to vcd_json \
      {} \
      -s verilog.data {}.data \
      -s futil.exec './target/debug/futil' \
      -q \
      | jq -f {}.jq

"""

[[tests]]
name = "NTT pipeline correctness"
paths = [ "tests/correctness/ntt-pipeline/*.txt" ]
cmd = """
python3 frontends/ntt-pipeline/gen-ntt-pipeline.py {} > {}.futil; \
fud e {}.futil --to dat -s verilog.data {}.data -q 2>/dev/null; \
rm {}.futil;
"""

[[tests]]
name = "mrxl correctness"
paths = [ "frontends/mrxl/test/*.mrxl" ]
cmd = """
fud e -q {} --from mrxl --to dat -s verilog.data {}.data | jq .memories
"""

[[tests]]
name = "Relay correctness"
paths = ["tests/correctness/relay/*.relay"]
cmd = """
python3 frontends/relay/compiler.py < {} > {}.expect; \
fud e -q --from futil {}.expect --to dat -s verilog.data {}.data | jq .memories; \
rm {}.expect;
"""

##### Backend Tests #####
[[tests]]
name = "verilog backend"
paths = [ "tests/backend/verilog/*.futil" ]
cmd = """
fud exec {} --to verilog -q \
            -s futil.exec './target/debug/futil' \
            | jq .memories
"""


##### Frontend Tests #####
[[tests]]
name = "dahlia frontend"
paths = [ "tests/frontend/dahlia/*.fuse" ]
cmd = """
fud e {} --to futil -q \
          -s futil.exec './target/debug/futil' \
        | tail -n+2
"""

[[tests]]
name = "systolic array frontend"
paths = [ "tests/frontend/systolic/array-*.systolic" ]
cmd = """
./frontends/systolic-lang/gen-systolic.py {}
"""

[[tests]]
name = "NTT pipeline frontend generation"
paths = [ "tests/frontend/ntt-pipeline/*.txt" ]
cmd = """
python3 frontends/ntt-pipeline/gen-ntt-pipeline.py {}
"""


[[tests]]
name = "Relay frontend"
paths = ["tests/frontend/relay/*.relay"]
cmd = "python3 frontends/relay/compiler.py < {} -q"


[[tests]]
name = "Python library AST"
paths = ["calyx-py/test/*.py"]
cmd = """
python3 {}
"""

##### Examples #####

[[tests]]
name = "Simulation examples"
paths = ["examples/tutorial/*.futil", "examples/dahlia/*.fuse"]
cmd = """
fud e {} --to dat -s verilog.data {}.data -q
"""

[[tests]]
name = "Futil examples"
paths = ["examples/futil/*.futil"]
cmd = """
fud e {} --to futil-lowered -q
"""
