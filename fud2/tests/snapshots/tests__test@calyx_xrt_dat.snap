---
source: fud2/tests/tests.rs
description: "emit request: calyx -> dat through xrt"
---
build-tool = fud2
rule get-rsrc
  command = $build-tool get-rsrc $out

calyx-base = /test/calyx
calyx-exe = $calyx-base/target/debug/calyx
args = 
rule calyx
  command = $calyx-exe -l $calyx-base -b $backend $args $in > $out
rule calyx-pass
  command = $calyx-exe -l $calyx-base -p $pass $args $in > $out
flags = -p none
rule calyx-with-flags
  command = $calyx-exe -l $calyx-base $flags $args $in > $out

vivado-dir = /test/xilinx/vivado
vitis-dir = /test/xilinx/vitis
build gen_xo.tcl: get-rsrc
build get-ports.py: get-rsrc
python = python3
rule gen-xo
  command = $vivado-dir/bin/vivado -mode batch -source gen_xo.tcl -tclargs $out `$python get-ports.py kernel.xml`
  pool = console
xilinx-mode = hw_emu
platform = xilinx_u50_gen3x16_xdma_201920_3
rule compile-xclbin
  command = $vitis-dir/bin/v++ -g -t $xilinx-mode --platform $platform --save-temps --profile.data all:all:all --profile.exec all:all:all -lo $out $in
  pool = console

python = python3
build json-dat.py: get-rsrc
rule hex-data
  command = $python json-dat.py --from-json $in $out
rule json-data
  command = $python json-dat.py --to-json $out $in
sim_data = /test/data.json
datadir = sim_data
build $datadir: hex-data $sim_data | json-dat.py
rule sim-run
  command = ./$bin +DATA=$datadir +CYCLE_LIMIT=$cycle-limit $args > $out
cycle-limit = 500000000

build tb.sv: get-rsrc

rule emconfig
  command = $vitis-dir/bin/emconfigutil --platform $platform
build emconfig.json: emconfig
xrt-dir = /test/xilinx/xrt
rule xclrun
  command = bash -c 'source $vitis-dir/settings64.sh ; source $xrt-dir/setup.sh ; XRT_INI_PATH=$xrt_ini EMCONFIG_PATH=. XCL_EMULATION_MODE=$xilinx-mode $python -m fud.xclrun --out $out $in'
  pool = console
rule echo
  command = echo $contents > $out
build pre_sim.tcl: echo  | 
  contents = open_vcd\\nlog_vcd *\\n
build post_sim.tcl: echo  | 
  contents = close_vcd\\n

build main.sv: calyx _from_stdin_calyx.futil
  backend = verilog
  args = --synthesis -p external
build toplevel.v: calyx _from_stdin_calyx.futil
  backend = xilinx
build kernel.xml: calyx _from_stdin_calyx.futil
  backend = xilinx-xml
build xo.xo: gen-xo | main.sv toplevel.v kernel.xml gen_xo.tcl get-ports.py
build xclbin.xclbin: compile-xclbin xo.xo
build xrt.ini: get-rsrc
build _to_stdout_dat.json: xclrun xclbin.xclbin $sim_data | emconfig.json xrt.ini
  xrt_ini = xrt.ini

default _to_stdout_dat.json
