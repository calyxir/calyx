---
source: fud2/tests/tests.rs
description: emit calyx -> dat through interp
---
build-tool = fud2
rule get-rsrc
  command = $build-tool get-rsrc $out

# RTL simulation
python = python3
build json-dat.py: get-rsrc
rule hex-data
  command = $python json-dat.py --from-json $in $out
rule json-data
  command = $python json-dat.py --to-json $out $in
build tb.sv: get-rsrc
sim_data = /test/data.json
datadir = sim_data
build $datadir: hex-data $sim_data | json-dat.py
rule sim-run
  command = ./$bin +DATA=$datadir +CYCLE_LIMIT=$cycle-limit $args > $out
cycle-limit = 500000000

# Calyx compiler
calyx-base = /test/calyx
calyx-exe = $calyx-base/target/debug/calyx
rule calyx
  command = $calyx-exe -l $calyx-base -b $backend $args $in > $out
rule calyx-pass
  command = $calyx-exe -l $calyx-base -p $pass $args $in > $out

# Cider interpreter
cider-exe = $calyx-base/target/debug/cider
rule cider
  command = $cider-exe -l $calyx-base --raw --data data.json $in > $out
rule cider-debug
  command = $cider-exe -l $calyx-base --data data.json $in debug || true
  pool = console
build interp-dat.py: get-rsrc
python = python3
rule dat-to-interp
  command = $python interp-dat.py --to-interp $in
rule interp-to-dat
  command = $python interp-dat.py --from-interp $in $sim_data > $out
build data.json: dat-to-interp $sim_data | interp-dat.py

# build targets
build interp_out.json: cider stdin | data.json
build stdin.json: interp-to-dat interp_out.json | $sim_data interp-dat.py

default stdin.json
