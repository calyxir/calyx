---
source: fud2/tests/tests.rs
assertion_line: 66
description: "emit plan: calyx-to-instrumented-verilog"
---
build-tool = fud2
rule get-rsrc
  command = $build-tool get-rsrc $out

calyx-base = /test/calyx
calyx-exe = $calyx-base/target/debug/calyx
args = 
rule calyx
  command = $calyx-exe -l $calyx-base -b $backend $args $in > $out
rule calyx-pass
  command = $calyx-exe -l $calyx-base -p $pass $args $in > $out
flags = -p none
rule calyx-with-flags
  command = $calyx-exe -l $calyx-base $flags $args $in > $out

cells = cells.json
groups = groups.json
tdcc-json = fsm.json
passes = all
component_cells = $calyx-base/target/debug/component_cells
rule component-cells
  command = $component_cells -l $calyx-base $in > $out
component_groups = $calyx-base/target/debug/component_groups
rule component-groups
  command = $component_groups -l $calyx-base $in > $out
rule dummy
  command = sh -c 'cat $$0' $in > $out
parse-vcd-script = $calyx-base/tools/profiler/parse-vcd.py
rule parse-vcd
  command = python3 $parse-vcd-script $in $tdcc-json $cells $groups summary.csv $out
create-visuals-script = $calyx-base/tools/profiler/create-visuals.py
rule create-visuals
  command = python3 $create-visuals-script $in $cells timeline.json fsm-timeline.json $out fsm-flame.folded frequency.folded components.folded fsm-components.folded

build $cells: component-cells /input.ext
build $groups: component-groups /input.ext
build tmp-out.sv: calyx /input.ext
  backend = verilog
  args =  -p static-inline -p compile-static -p compile-repeat -p par-to-seq -p profiler-instrumentation -p $passes -x tdcc:dump-fsm-json=fsm.json
build /output.ext: dummy tmp-out.sv $cells $groups

default /output.ext
