---
source: fud2/tests/tests.rs
description: "emit request: calyx -> dat through verilator"
---
build-tool = fud2
rule get-rsrc
  command = $build-tool get-rsrc $out

calyx-base = /test/calyx
calyx-exe = $calyx-base/target/debug/calyx
args = 
rule calyx
  command = $calyx-exe -l $calyx-base -b $backend $args $in > $out
rule calyx-pass
  command = $calyx-exe -l $calyx-base -p $pass $args $in > $out
flags = -p none
rule calyx-with-flags
  command = $calyx-exe -l $calyx-base $flags $args $in > $out

python = python3
build json-dat.py: get-rsrc
rule hex-data
  command = $python json-dat.py --from-json $in $out
rule json-data
  command = $python json-dat.py --to-json $out $in
sim_data = /test/data.json
datadir = sim_data
build $datadir: hex-data $sim_data | json-dat.py
rule sim-run
  command = ./$bin +DATA=$datadir +CYCLE_LIMIT=$cycle-limit $args > $out
cycle-limit = 500000000

build tb.sv: get-rsrc

verilator = verilator
cycle-limit = 500000000
rule verilator-compile-standalone-tb
  command = $verilator $in tb.sv --trace --binary --top-module TOP -fno-inline -Mdir $out-dir
rule verilator-compile-custom-tb
  command = $verilator $in tb.sv memories.sv --trace --binary --top-module TOP -fno-inline -Mdir $out-dir
rule cp
  command = cp $in $out

build stdin.sv: calyx stdin
  backend = verilog
build verilator-out/VTOP: verilator-compile-standalone-tb stdin.sv | tb.sv
  out-dir = verilator-out
build stdin.exe: cp verilator-out/VTOP
build sim.log: sim-run stdin.exe $datadir
  bin = stdin.exe
  args = +NOTRACE=1
build stdin.json: json-data $datadir sim.log | json-dat.py

default stdin.json
