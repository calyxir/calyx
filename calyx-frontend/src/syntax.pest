WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ ("//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE) | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Semicolon
semi = { ";" }

ident_syms = _{ "_" | "-" | "'" }

// Identifiers may begin with `_` or an ASCII character.
identifier = @{ ("_" | ASCII_ALPHA)+ ~ (ident_syms | ASCII_ALPHA | ASCII_DIGIT)* }

bitwidth = @{ ASCII_DIGIT+ }

// Conservatively parse all symbols to provide better errors.
binary =  @{ ASCII_HEX_DIGIT+ }
decimal = @{ ASCII_HEX_DIGIT+ }
octal =   @{ ASCII_HEX_DIGIT+ }
hex =     @{ ASCII_HEX_DIGIT+ }

// `$` creates a compound rule which ignores whitespace while allowing for
// inner rules (`@` makes inner rules silent).
// See: https://pest.rs/book/print.html#atomic
num_lit = ${
      bitwidth
      ~ "'"
      ~ ( "d" ~ decimal
        | "b" ~ binary
        | "x" ~ hex
        | "o" ~ octal )
}

char = { !"\"" ~ ANY }
string_lit = ${ "\"" ~ char* ~ "\"" }

// Error reporting rule: Expected a number with bitwidth in this position.
bad_num = @{ ASCII_DIGIT ~ ('a'..'z' | 'A'..'Z' | '0'..'9' | "'")* }

// ====== toplevel ======

comb = { "comb" }

reference = { "ref" }

static_word = { "static" }

static_annotation = { static_word ~ latency_annotation}

static_optional_latency = { static_word ~ latency_annotation? }

both_comb_static = { (comb ~ static_annotation) | (static_annotation ~ comb) }

comb_or_static = {both_comb_static | comb | static_annotation}

file = {
      SOI
      ~ imports
      ~ externs_and_comps
      ~ metadata?
      ~ EOI
}

extern_or_component = {
  component | ext | prim_inline
}

externs_and_comps = { extern_or_component* }

component = {
      (comb_or_static)? ~ "component" ~ name_with_attribute ~ signature
      ~ "{"
      ~ cells
      ~ connections
      ~ control?
      ~ "}"
}

// ========= Imports ===============

import = _{
      "import" ~ string_lit ~ ";"
}

imports = { import* }


// ====== Component signature ======

// This rule is optional but the parser errors in the case when a comma is required but not present.
comma_req = { "," }
comma = { comma_req? }

signature = {
      "(" ~ inputs? ~ ")" ~ "->" ~ "(" ~ outputs? ~ ")"
}

io_port = {
     at_attributes? ~ identifier ~ ":" ~ (bitwidth | identifier)
}

// Defined separately because we need to provide different `ir::Direction` for inputs and outputs.
inputs = {
      io_port ~ comma ~ inputs
      | io_port ~ ","?
}

outputs = {
      io_port ~ comma ~ outputs
      | io_port ~ ","?
}

// ========= Exernal primitive definitions ===============

params = {
      "[" ~ (identifier ~ ("," ~ identifier)*)? ~ "]"
}

sig_with_params = {
  params? ~ signature
}
primitive = {
     (comb_or_static)? ~ "primitive" ~ name_with_attribute ~ sig_with_params ~ ";"
}

block_char = { !"}" ~ ANY }

block_string = ${ "{" ~ block_char* ~ "}" }

prim_inline = {
      (comb_or_static)? ~ "primitive" ~ name_with_attribute ~ sig_with_params ~ block_string ~ ";"?
}

ext = {
  "extern" ~ string_lit ~ "{" ~ primitive* ~ "}"
}

// ====== cells ======

args = {
      "(" ~ (bitwidth ~ ("," ~ bitwidth)*)? ~ ")"
}

cell_without_semi = {
      at_attributes ~ reference? ~ identifier ~ "=" ~ identifier ~ args
}

cell = {
  cell_without_semi ~ semi?
}

cells = {
      "cells"
      ~ "{" ~ cell* ~ "}"
}

// ====== wires ======

hole = {
      identifier ~ "[" ~ identifier ~ "]"
}

port = {
      (identifier ~ "." ~ identifier)
    | identifier
}

LHS = { hole | port }
expr = {
  LHS
  | num_lit
  | bad_num // throws an error
}

guard_eq = { "==" }
guard_neq = { "!=" }
guard_leq = { "<=" }
guard_geq = { ">=" }
guard_lt = { "<" }
guard_gt = { ">" }
cmp_expr = {
    expr ~ guard_eq ~ expr
  | expr ~ guard_neq ~ expr
  | expr ~ guard_geq ~ expr
  | expr ~ guard_leq ~ expr
  | expr ~ guard_gt ~ expr
  | expr ~ guard_lt ~ expr
}

guard_or = { "|" }
guard_and = { "&" }
guard_not = { "!" }
operator = _{
     guard_or | guard_and
}

guard_expr = {
      term ~ (operator ~ term)*
}

term = {
      guard_not ~ expr
    | guard_not ~ "(" ~ cmp_expr ~ ")"
    | guard_not ~ "(" ~ guard_expr ~ ")"
    | "(" ~ guard_expr ~ ")"
    | cmp_expr
    | expr
}

switch_stmt = {
      guard_expr ~ "?" ~ expr
}

wire = {
      at_attributes ~ LHS ~ "=" ~ (switch_stmt | expr) ~ ";"
}

static_timing_expr = { "%" ~  bitwidth | "%[" ~ bitwidth ~ ":" ~ bitwidth  ~ "]"}

static_term = {
      guard_not ~ expr
    | guard_not ~ "(" ~ cmp_expr ~ ")"
    | guard_not ~ "(" ~ static_guard_expr ~ ")"
    | "(" ~ static_guard_expr ~ ")"
    | cmp_expr
    | expr
    | static_timing_expr
}

static_guard_expr = {
      static_term ~ (operator ~ static_term)*
}

static_switch_stmt = {
      static_guard_expr ~ "?" ~ expr
}

static_wire = {
      at_attributes ~ LHS ~ "=" ~ (static_switch_stmt | expr) ~ ";"
}

// =========== Attribute parsing ===============

// <"static" = 1> style annotation
attribute = {
      string_lit ~ "=" ~ bitwidth
}
latency_annotation = {
  "<" ~ bitwidth ~ ">"
}
attributes = {
      "<" ~ (attribute ~ ("," ~ attribute)*) ~ ","? ~ ">"
}
name_with_attribute = {
  identifier ~ attributes?
}

// @static(1) style annotation
attr_val = {
  "(" ~ bitwidth ~ ")"
}
at_attribute = {
      "@" ~ identifier ~ attr_val?
}
at_attributes = {
      at_attribute*
}

group = {
     comb? ~ "group" ~ name_with_attribute ~ "{"
      ~ wire*
      ~ "}"
}

static_group = {
      static_annotation ~ "group" ~ name_with_attribute ~ "{"
      ~ static_wire*
      ~ "}"
}

connections = {
      "wires"
      ~ "{"
      ~ (wire | group | static_group )*
      ~ "}"
}

// ====== control ======

empty = { at_attributes ~ ";" }

enable = { at_attributes ~ identifier ~ ";" }

invoke_arg = { identifier ~ "=" ~ (port | num_lit) }
invoke_args = { (invoke_arg ~ ("," ~ invoke_arg)*)? }
invoke_ref_arg = {identifier ~ "=" ~ identifier}
invoke_ref_args = {("[" ~ (invoke_ref_arg ~ ("," ~ invoke_ref_arg)*)? ~ "]")?}
invoke = { at_attributes ~ "invoke" ~ identifier ~ invoke_ref_args ~ "(" ~ invoke_args ~ ")" ~ "(" ~ invoke_args ~ ")" ~ ("with" ~ identifier)? ~ ";" }
static_invoke = { at_attributes ~ static_optional_latency ~ "invoke" ~ identifier ~ invoke_ref_args ~ "(" ~ invoke_args ~ ")" ~ "(" ~ invoke_args ~ ")" ~ ("with" ~ identifier)? ~ ";" }

seq = {
      at_attributes ~ "seq" ~ "{"
      ~ stmt*
      ~ "}"
}

static_seq = {
      at_attributes ~  static_optional_latency ~ "seq"  ~ "{"
      ~ stmt*
      ~ "}"
}

par = {
      at_attributes ~ "par" ~ "{"
      ~ stmt*
      ~ "}"
}

static_par = {
      at_attributes ~ static_optional_latency ~ "par"  ~ "{"
      ~ stmt*
      ~ "}"
}

// Error reporting rule: these statements should be inside a `stmt`.
stmts_without_block = {
  "{" ~ stmt* ~ "}"
}

block = {
      "{" ~ stmt ~ "}"
      | stmts_without_block
}

port_with = {
  port ~ ("with" ~ identifier)?
}
if_stmt = {
      at_attributes ~ "if" ~ port_with ~ block ~ ("else" ~ (if_stmt | block))?
}

static_if_stmt = {
      at_attributes ~ static_optional_latency ~ "if"  ~ port ~ block ~ ("else" ~ (static_if_stmt | block))?
}

while_stmt = {
      at_attributes ~ "while" ~ port_with ~ block
}

repeat_stmt = {
      at_attributes ~ static_word? ~ "repeat" ~ bitwidth ~ block
}

stmt = {
      empty
    | enable
    | invoke
    | static_invoke
    | seq
    | static_seq
    | par
    | static_par
    | if_stmt
    | static_if_stmt
    | while_stmt
    | repeat_stmt
}

control = {
      "control" ~ (("{" ~ "}") | block)
}

// metadata

any_char = { ANY }
metadata_char = ${ !"}#" ~ any_char }

metadata = ${ ^"metadata" ~ WHITESPACE* ~ "#{" ~ metadata_char* ~ "}#"}