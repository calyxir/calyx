decl alpha: ubit<32>[1];
decl beta: ubit<32>[1];
decl A: ubit<32>[8][8];
decl u1: ubit<32>[8];
decl v1: ubit<32>[8];
decl u2: ubit<32>[8];
decl v2: ubit<32>[8];
decl w: ubit<32>[8];
decl x: ubit<32>[8];
decl y: ubit<32>[8];
decl z: ubit<32>[8];


for (let i: ubit<4> = 0..8) {
  for (let j: ubit<4> = 0..8) {
    let A_i_j = A[i][j];
    ---
    A[i][j] := A_i_j + u1[i] * v1[j] + u2[i] * v2[j];
  }
}
---
for (let i: ubit<4> = 0..8) {
  for (let j: ubit<4> = 0..8) {
    let x_i: ubit<32> = x[i];
    ---
    x[i] := x_i + beta[0] * A[j][i] * y[j];
  }
}
---
// We could've moved this up and parallelized with loop1.
for (let i: ubit<4> = 0..8) {
  let x_i: ubit<32> = x[i];
  ---
  x[i] := x_i + z[i];
}
---
for (let i: ubit<4> = 0..8) {
  for (let j: ubit<4> = 0..8) {
    let w_i = w[i];
    ---
    w[i] := w_i +  alpha[0] * A[i][j] * x[j];
  }
}
