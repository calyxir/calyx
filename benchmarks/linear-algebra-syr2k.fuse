decl alpha: ubit<32>[1];
decl beta: ubit<32>[1];
decl C: ubit<32>[12][12];
decl A: ubit<32>[12][8];
decl B: ubit<32>[12][8];


for (let i: ubit<4> = 0..12) {
  let j: ubit<4> = 0;
  while (j <= i) {
    decor "#pragma HLS loop_tripcount min=1 max=12 avg=6"
    let C_i_j: ubit<32> = C[i][j];
    ---
    C[i][j] := C_i_j * beta[0];

    // Update loop counter
    j := j + 1;
  }
  ---
  for (let k: ubit<4> = 0..8) {
    let j2: ubit<4> = 0;
    while (j2 <= i) {
      decor "#pragma HLS loop_tripcount min=1 max=12 avg=6"
      let C_i_j2: ubit<32> = C[i][j2];
      let B_i_k: ubit<32> = B[i][k];
      let A_j2_k: ubit<32> = A[j2][k]
      ---
      C[i][j2] := A_j2_k * alpha[0] * B_i_k +
                  B[j2][k] * alpha[0] * A[i][k] + C_i_j2;
      // Update loop counter
      j2 := j2 + 1;
    }
  }
}
