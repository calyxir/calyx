import "primitives/std.lib";
component main() -> () {
  cells {
    L = prim std_mem_d2(32,8,8,4,4);
    add0 = prim std_add(4);
    add1 = prim std_add(4);
    b = prim std_mem_d1(32,8,4);
    const0 = prim std_const(4,0);
    const1 = prim std_const(4,7);
    const2 = prim std_const(4,0);
    const3 = prim std_const(4,1);
    const4 = prim std_const(4,1);
    div0 = prim std_div(32);
    i0 = prim std_reg(4);
    j0 = prim std_reg(4);
    le0 = prim std_le(4);
    lt0 = prim std_lt(4);
    mult0 = prim std_mult(32);
    x = prim std_mem_d1(32,8,4);
    x_i0 = prim std_reg(32);
    x_j0 = prim std_reg(32);
  }
  wires {
    group cond0<"static"=1> {
      cond0[done] = 1'd1;
      le0.left = i0.out;
      le0.right = const1.out;
    }
    group cond1<"static"=1> {
      cond1[done] = 1'd1;
      lt0.left = j0.out;
      lt0.right = i0.out;
    }
    group let0<"static"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"static"=1> {
      j0.in = const2.out;
      j0.write_en = 1'd1;
      let1[done] = j0.done;
    }
    group let2<"static"=1> {
      x_j0.in = x.read_data;
      x_j0.write_en = 1'd1;
      let2[done] = x_j0.done;
      x.addr0 = j0.out;
    }
    group let3<"static"=1> {
      x_i0.in = x.read_data;
      x_i0.write_en = 1'd1;
      let3[done] = x_i0.done;
      x.addr0 = i0.out;
    }
    group upd0<"static"=1> {
      x.addr0 = i0.out;
      x.write_en = 1'd1;
      b.addr0 = i0.out;
      x.write_data = b.read_data;
      upd0[done] = x.done;
    }
    group upd1<"static"=1> {
      x.addr0 = i0.out;
      x.write_en = 1'd1;
      mult0.left = L.read_data;
      mult0.right = x_j0.out;
      L.addr1 = j0.out;
      L.addr0 = i0.out;
      x.write_data = mult0.out;
      upd1[done] = x.done;
    }
    group upd2<"static"=1> {
      j0.write_en = 1'd1;
      add0.left = j0.out;
      add0.right = const3.out;
      j0.in = add0.out;
      upd2[done] = j0.done;
    }
    group upd3<"static"=1> {
      x.addr0 = i0.out;
      x.write_en = 1'd1;
      div0.left = x_i0.out;
      div0.right = L.read_data;
      L.addr1 = i0.out;
      L.addr0 = i0.out;
      x.write_data = div0.out;
      upd3[done] = x.done;
    }
    group upd4<"static"=1> {
      i0.write_en = 1'd1;
      add1.left = i0.out;
      add1.right = const4.out;
      i0.in = add1.out;
      upd4[done] = i0.done;
    }
  }
  control {
    seq {
      let0;
      while le0.out with cond0 {
        seq {
          upd0;
          seq {
            let1;
            while lt0.out with cond1 {
              seq {
                let2;
                seq {
                  upd1;
                  upd2;
                }
              }
            }
          }
          let3;
          upd3;
          upd4;
        }
      }
    }
  }
}
