import "primitives/std.lib";
component main() -> () {
  cells {
    add0 = prim std_add(32);
    add1 = prim std_add(4);
    add2 = prim std_add(32);
    add3 = prim std_add(32);
    add4 = prim std_add(4);
    add5 = prim std_add(4);
    add6 = prim std_add(4);
    alpha0 = prim std_reg(32);
    beta0 = prim std_reg(32);
    const0 = prim std_const(32,0);
    const1 = prim std_const(4,0);
    const10 = prim std_const(4,1);
    const11 = prim std_const(32,0);
    const12 = prim std_const(32,0);
    const13 = prim std_const(32,0);
    const14 = prim std_const(4,0);
    const15 = prim std_const(4,1);
    const16 = prim std_const(4,1);
    const17 = prim std_const(4,0);
    const18 = prim std_const(4,1);
    const19 = prim std_const(4,1);
    const2 = prim std_const(32,1);
    const3 = prim std_const(4,0);
    const4 = prim std_const(4,1);
    const5 = prim std_const(4,7);
    const6 = prim std_const(32,1);
    const7 = prim std_const(32,0);
    const8 = prim std_const(4,0);
    const9 = prim std_const(4,1);
    div0 = prim std_div(32);
    i0 = prim std_reg(4);
    k0 = prim std_reg(4);
    le0 = prim std_le(4);
    lt0 = prim std_lt(4);
    lt1 = prim std_lt(4);
    lt2 = prim std_lt(4);
    mult0 = prim std_mult(32);
    mult1 = prim std_mult(32);
    mult2 = prim std_mult(32);
    mult3 = prim std_mult(32);
    neq0 = prim std_neq(32);
    r = prim std_mem_d1_ext(32,8,4);
    sub0 = prim std_sub(32);
    sub1 = prim std_sub(32);
    sub2 = prim std_sub(4);
    sub3 = prim std_sub(4);
    sub4 = prim std_sub(32);
    sub5 = prim std_sub(4);
    sub6 = prim std_sub(4);
    sum0 = prim std_reg(32);
    y = prim std_mem_d1_ext(32,8,4);
    y_i0 = prim std_reg(32);
    z = prim std_mem_d1_ext(32,8,4);
  }
  wires {
    group cond0<"static"=0> {
      cond0[done] = 1'd1;
      le0.left = k0.out;
      le0.right = const5.out;
    }
    group cond1<"static"=0> {
      cond1[done] = 1'd1;
      lt0.left = i0.out;
      lt0.right = k0.out;
    }
    group cond2<"static"=0> {
      cond2[done] = 1'd1;
      neq0.left = beta0.out;
      neq0.right = const11.out;
    }
    group cond3<"static"=0> {
      cond3[done] = 1'd1;
      lt1.left = i0.out;
      lt1.right = k0.out;
    }
    group cond4<"static"=0> {
      cond4[done] = 1'd1;
      lt2.left = i0.out;
      lt2.right = k0.out;
    }
    group let0<"static"=1> {
      alpha0.in = sub0.out;
      alpha0.write_en = 1'd1;
      let0[done] = alpha0.done;
      sub0.left = const0.out;
      sub0.right = r.read_data;
      r.addr0 = const1.out;
    }
    group let1<"static"=1> {
      beta0.in = const2.out;
      beta0.write_en = 1'd1;
      let1[done] = beta0.done;
    }
    group let2<"static"=1> {
      k0.in = const4.out;
      k0.write_en = 1'd1;
      let2[done] = k0.done;
    }
    group let3<"static"=1> {
      sum0.in = const7.out;
      sum0.write_en = 1'd1;
      let3[done] = sum0.done;
    }
    group let4<"static"=1> {
      i0.in = const8.out;
      i0.write_en = 1'd1;
      let4[done] = i0.done;
    }
    group let5<"static"=1> {
      y_i0.in = y.read_data;
      y_i0.write_en = 1'd1;
      let5[done] = y_i0.done;
      y.addr0 = i0.out;
    }
    group upd0<"static"=1> {
      y.addr0 = const3.out;
      y.write_en = 1'd1;
      y.write_data = 1'd1 ? alpha0.out;
      upd0[done] = y.done ? 1'd1;
    }
    group upd1<"static"=1> {
      beta0.write_en = 1'd1;
      mult1.left = sub1.out;
      mult1.right = beta0.out;
      sub1.left = const6.out;
      sub1.right = mult0.out;
      mult0.left = alpha0.out;
      mult0.right = alpha0.out;
      beta0.in = 1'd1 ? mult1.out;
      upd1[done] = beta0.done ? 1'd1;
    }
    group upd10<"static"=1> {
      y.addr0 = i0.out;
      y.write_en = 1'd1;
      z.addr0 = i0.out;
      y.write_data = 1'd1 ? z.read_data;
      upd10[done] = y.done ? 1'd1;
    }
    group upd11<"static"=1> {
      i0.write_en = 1'd1;
      add5.left = i0.out;
      add5.right = const18.out;
      i0.in = 1'd1 ? add5.out;
      upd11[done] = i0.done ? 1'd1;
    }
    group upd12<"static"=1> {
      y.addr0 = k0.out;
      y.write_en = 1'd1;
      y.write_data = 1'd1 ? alpha0.out;
      upd12[done] = y.done ? 1'd1;
    }
    group upd13<"static"=1> {
      k0.write_en = 1'd1;
      add6.left = k0.out;
      add6.right = const19.out;
      k0.in = 1'd1 ? add6.out;
      upd13[done] = k0.done ? 1'd1;
    }
    group upd2<"static"=1> {
      sum0.write_en = 1'd1;
      add0.left = sum0.out;
      add0.right = mult2.out;
      mult2.left = r.read_data;
      mult2.right = y.read_data;
      r.addr0 = sub3.out;
      sub3.left = sub2.out;
      sub3.right = const9.out;
      sub2.left = k0.out;
      sub2.right = i0.out;
      y.addr0 = i0.out;
      sum0.in = 1'd1 ? add0.out;
      upd2[done] = sum0.done ? 1'd1;
    }
    group upd3<"static"=1> {
      i0.write_en = 1'd1;
      add1.left = i0.out;
      add1.right = const10.out;
      i0.in = 1'd1 ? add1.out;
      upd3[done] = i0.done ? 1'd1;
    }
    group upd4<"static"=1> {
      alpha0.write_en = 1'd1;
      sub4.left = const12.out;
      sub4.right = div0.out;
      div0.left = add2.out;
      div0.right = beta0.out;
      add2.left = r.read_data;
      add2.right = sum0.out;
      r.addr0 = k0.out;
      alpha0.in = 1'd1 ? sub4.out;
      upd4[done] = alpha0.done ? 1'd1;
    }
    group upd5<"static"=1> {
      alpha0.write_en = 1'd1;
      alpha0.in = 1'd1 ? const13.out;
      upd5[done] = alpha0.done ? 1'd1;
    }
    group upd6<"static"=1> {
      i0.write_en = 1'd1;
      i0.in = 1'd1 ? const14.out;
      upd6[done] = i0.done ? 1'd1;
    }
    group upd7<"static"=1> {
      z.addr0 = i0.out;
      z.write_en = 1'd1;
      add3.left = y_i0.out;
      add3.right = mult3.out;
      mult3.left = alpha0.out;
      mult3.right = y.read_data;
      y.addr0 = sub6.out;
      sub6.left = sub5.out;
      sub6.right = const15.out;
      sub5.left = k0.out;
      sub5.right = i0.out;
      z.write_data = 1'd1 ? add3.out;
      upd7[done] = z.done ? 1'd1;
    }
    group upd8<"static"=1> {
      i0.write_en = 1'd1;
      add4.left = i0.out;
      add4.right = const16.out;
      i0.in = 1'd1 ? add4.out;
      upd8[done] = i0.done ? 1'd1;
    }
    group upd9<"static"=1> {
      i0.write_en = 1'd1;
      i0.in = 1'd1 ? const17.out;
      upd9[done] = i0.done ? 1'd1;
    }
  }
  control {
    seq {
      seq {
        let0;
        let1;
        upd0;
      }
      let2;
      while le0.out with cond0 {
        seq {
          seq {
            upd1;
            let3;
            let4;
            while lt0.out with cond1 {
              seq {
                seq {
                }
                upd2;
                upd3;
              }
            }
          }
          seq {
            if neq0.out with cond2 {
              upd4;
            } else {
              upd5;
            }
            upd6;
            while lt1.out with cond3 {
              seq {
                seq {
                  seq {
                  }
                  let5;
                }
                seq {
                  upd7;
                  upd8;
                }
              }
            }
          }
          seq {
            upd9;
            while lt2.out with cond4 {
              seq {
                seq {
                }
                upd10;
                upd11;
              }
            }
          }
          upd12;
          upd13;
        }
      }
    }
  }
}
