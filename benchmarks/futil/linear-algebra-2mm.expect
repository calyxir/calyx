import "primitives/std.lib";
component main() -> () {
  cells {
    A0_0 = prim std_mem_d2_ext(32,8,8,4,4);
    A_read0_0 = prim std_reg(32);
    B0_0 = prim std_mem_d2_ext(32,8,8,4,4);
    B_read0_0 = prim std_reg(32);
    C0_0 = prim std_mem_d2_ext(32,8,8,4,4);
    C_read0_0 = prim std_reg(32);
    D0_0 = prim std_mem_d2_ext(32,8,8,4,4);
    add0 = prim std_add(32);
    add1 = prim std_add(4);
    add2 = prim std_add(4);
    add3 = prim std_add(4);
    add4 = prim std_add(32);
    add5 = prim std_add(4);
    add6 = prim std_add(4);
    add7 = prim std_add(4);
    alpha0 = prim std_mem_d1_ext(32,1,1);
    alpha_read0_0 = prim std_reg(32);
    beta0 = prim std_mem_d1_ext(32,1,1);
    beta_read0_0 = prim std_reg(32);
    const0 = prim std_const(4,0);
    const1 = prim std_const(4,7);
    const10 = prim std_const(4,1);
    const11 = prim std_const(4,0);
    const12 = prim std_const(4,7);
    const13 = prim std_const(4,0);
    const14 = prim std_const(4,7);
    const15 = prim std_const(1,0);
    const16 = prim std_const(4,0);
    const17 = prim std_const(4,7);
    const18 = prim std_const(4,1);
    const19 = prim std_const(4,1);
    const2 = prim std_const(4,0);
    const20 = prim std_const(4,1);
    const3 = prim std_const(4,7);
    const4 = prim std_const(32,0);
    const5 = prim std_const(4,0);
    const6 = prim std_const(4,7);
    const7 = prim std_const(1,0);
    const8 = prim std_const(4,1);
    const9 = prim std_const(4,1);
    d_tmp_0 = prim std_reg(32);
    i0 = prim std_reg(4);
    i10 = prim std_reg(4);
    j0 = prim std_reg(4);
    j10 = prim std_reg(4);
    k0 = prim std_reg(4);
    k10 = prim std_reg(4);
    le0 = prim std_le(4);
    le1 = prim std_le(4);
    le2 = prim std_le(4);
    le3 = prim std_le(4);
    le4 = prim std_le(4);
    le5 = prim std_le(4);
    mult0 = prim std_mult(32);
    mult1 = prim std_mult(32);
    mult2 = prim std_mult(32);
    mult3 = prim std_mult(32);
    tmp0_0 = prim std_mem_d2_ext(32,8,8,4,4);
    tmp_read0_0 = prim std_reg(32);
    v1_0 = prim std_reg(32);
    v_0 = prim std_reg(32);
  }
  wires {
    group cond0<"static"=0> {
      cond0[done] = 1'd1;
      le0.left = i0.out;
      le0.right = const1.out;
    }
    group cond1<"static"=0> {
      cond1[done] = 1'd1;
      le1.left = j0.out;
      le1.right = const3.out;
    }
    group cond2<"static"=0> {
      cond2[done] = 1'd1;
      le2.left = k0.out;
      le2.right = const6.out;
    }
    group cond3<"static"=0> {
      cond3[done] = 1'd1;
      le3.left = i10.out;
      le3.right = const12.out;
    }
    group cond4<"static"=0> {
      cond4[done] = 1'd1;
      le4.left = j10.out;
      le4.right = const14.out;
    }
    group cond5<"static"=0> {
      cond5[done] = 1'd1;
      le5.left = k10.out;
      le5.right = const17.out;
    }
    group let0<"static"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"static"=1> {
      j0.in = const2.out;
      j0.write_en = 1'd1;
      let1[done] = j0.done;
    }
    group let2<"static"=1> {
      k0.in = const5.out;
      k0.write_en = 1'd1;
      let2[done] = k0.done;
    }
    group let3<"static"=1> {
      v_0.in = mult1.out;
      v_0.write_en = 1'd1;
      let3[done] = v_0.done;
      mult1.left = mult0.out;
      mult1.right = B_read0_0.out;
      mult0.left = alpha_read0_0.out;
      mult0.right = A_read0_0.out;
    }
    group let4<"static"=1> {
      i10.in = const11.out;
      i10.write_en = 1'd1;
      let4[done] = i10.done;
    }
    group let5<"static"=1> {
      j10.in = const13.out;
      j10.write_en = 1'd1;
      let5[done] = j10.done;
    }
    group let6<"static"=1> {
      k10.in = const16.out;
      k10.write_en = 1'd1;
      let6[done] = k10.done;
    }
    group let7<"static"=1> {
      v1_0.in = mult3.out;
      v1_0.write_en = 1'd1;
      let7[done] = v1_0.done;
      mult3.left = tmp_read0_0.out;
      mult3.right = C_read0_0.out;
    }
    group upd0<"static"=1> {
      tmp0_0.addr1 = j0.out;
      tmp0_0.addr0 = i0.out;
      tmp0_0.write_en = 1'd1;
      tmp0_0.write_data = 1'd1 ? const4.out;
      upd0[done] = tmp0_0.done ? 1'd1;
    }
    group upd1<"static"=1> {
      alpha_read0_0.write_en = 1'd1;
      alpha0.addr0 = const7.out;
      alpha_read0_0.in = 1'd1 ? alpha0.read_data;
      upd1[done] = alpha_read0_0.done ? 1'd1;
    }
    group upd10<"static"=1> {
      D0_0.addr1 = j10.out;
      D0_0.addr0 = i10.out;
      D0_0.write_en = 1'd1;
      mult2.left = beta_read0_0.out;
      mult2.right = d_tmp_0.out;
      D0_0.write_data = 1'd1 ? mult2.out;
      upd10[done] = D0_0.done ? 1'd1;
    }
    group upd11<"static"=1> {
      tmp_read0_0.write_en = 1'd1;
      tmp0_0.addr1 = k10.out;
      tmp0_0.addr0 = i10.out;
      tmp_read0_0.in = 1'd1 ? tmp0_0.read_data;
      upd11[done] = tmp_read0_0.done ? 1'd1;
    }
    group upd12<"static"=1> {
      C_read0_0.write_en = 1'd1;
      C0_0.addr1 = j10.out;
      C0_0.addr0 = k10.out;
      C_read0_0.in = 1'd1 ? C0_0.read_data;
      upd12[done] = C_read0_0.done ? 1'd1;
    }
    group upd13<"static"=1> {
      D0_0.addr1 = j10.out;
      D0_0.addr0 = i10.out;
      D0_0.write_en = 1'd1;
      add4.left = D0_0.read_data;
      add4.right = v1_0.out;
      D0_0.addr1 = j10.out;
      D0_0.addr0 = i10.out;
      D0_0.write_data = 1'd1 ? add4.out;
      upd13[done] = D0_0.done ? 1'd1;
    }
    group upd14<"static"=1> {
      k10.write_en = 1'd1;
      add5.left = k10.out;
      add5.right = const18.out;
      k10.in = 1'd1 ? add5.out;
      upd14[done] = k10.done ? 1'd1;
    }
    group upd15<"static"=1> {
      j10.write_en = 1'd1;
      add6.left = j10.out;
      add6.right = const19.out;
      j10.in = 1'd1 ? add6.out;
      upd15[done] = j10.done ? 1'd1;
    }
    group upd16<"static"=1> {
      i10.write_en = 1'd1;
      add7.left = i10.out;
      add7.right = const20.out;
      i10.in = 1'd1 ? add7.out;
      upd16[done] = i10.done ? 1'd1;
    }
    group upd2<"static"=1> {
      A_read0_0.write_en = 1'd1;
      A0_0.addr1 = k0.out;
      A0_0.addr0 = i0.out;
      A_read0_0.in = 1'd1 ? A0_0.read_data;
      upd2[done] = A_read0_0.done ? 1'd1;
    }
    group upd3<"static"=1> {
      B_read0_0.write_en = 1'd1;
      B0_0.addr1 = j0.out;
      B0_0.addr0 = k0.out;
      B_read0_0.in = 1'd1 ? B0_0.read_data;
      upd3[done] = B_read0_0.done ? 1'd1;
    }
    group upd4<"static"=1> {
      tmp0_0.addr1 = j0.out;
      tmp0_0.addr0 = i0.out;
      tmp0_0.write_en = 1'd1;
      add0.left = tmp0_0.read_data;
      add0.right = v_0.out;
      tmp0_0.addr1 = j0.out;
      tmp0_0.addr0 = i0.out;
      tmp0_0.write_data = 1'd1 ? add0.out;
      upd4[done] = tmp0_0.done ? 1'd1;
    }
    group upd5<"static"=1> {
      k0.write_en = 1'd1;
      add1.left = k0.out;
      add1.right = const8.out;
      k0.in = 1'd1 ? add1.out;
      upd5[done] = k0.done ? 1'd1;
    }
    group upd6<"static"=1> {
      j0.write_en = 1'd1;
      add2.left = j0.out;
      add2.right = const9.out;
      j0.in = 1'd1 ? add2.out;
      upd6[done] = j0.done ? 1'd1;
    }
    group upd7<"static"=1> {
      i0.write_en = 1'd1;
      add3.left = i0.out;
      add3.right = const10.out;
      i0.in = 1'd1 ? add3.out;
      upd7[done] = i0.done ? 1'd1;
    }
    group upd8<"static"=1> {
      d_tmp_0.write_en = 1'd1;
      D0_0.addr1 = j10.out;
      D0_0.addr0 = i10.out;
      d_tmp_0.in = 1'd1 ? D0_0.read_data;
      upd8[done] = d_tmp_0.done ? 1'd1;
    }
    group upd9<"static"=1> {
      beta_read0_0.write_en = 1'd1;
      beta0.addr0 = const15.out;
      beta_read0_0.in = 1'd1 ? beta0.read_data;
      upd9[done] = beta_read0_0.done ? 1'd1;
    }
  }
  control {
    seq {
      let0;
      while le0.out with cond0 {
        seq {
          let1;
          while le1.out with cond1 {
            seq {
              upd0;
              let2;
              while le2.out with cond2 {
                seq {
                  upd1;
                  upd2;
                  upd3;
                  let3;
                  upd4;
                  upd5;
                }
              }
              upd6;
            }
          }
          upd7;
        }
      }
      let4;
      while le3.out with cond3 {
        seq {
          let5;
          while le4.out with cond4 {
            seq {
              upd8;
              upd9;
              upd10;
              let6;
              while le5.out with cond5 {
                seq {
                  upd11;
                  upd12;
                  let7;
                  upd13;
                  upd14;
                }
              }
              upd15;
            }
          }
          upd16;
        }
      }
    }
  }
}
