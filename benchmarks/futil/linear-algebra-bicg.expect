import "primitives/std.lib";
component main() -> () {
  cells {
    A = prim std_mem_d2(32,8,8,4,4);
    A_i_j0 = prim std_reg(32);
    add0 = prim std_add(4);
    add1 = prim std_add(32);
    add2 = prim std_add(32);
    add3 = prim std_add(4);
    add4 = prim std_add(4);
    const0 = prim std_const(4,0);
    const1 = prim std_const(4,7);
    const10 = prim std_const(4,1);
    const2 = prim std_const(32,0);
    const3 = prim std_const(4,1);
    const4 = prim std_const(4,0);
    const5 = prim std_const(4,7);
    const6 = prim std_const(32,0);
    const7 = prim std_const(4,0);
    const8 = prim std_const(4,7);
    const9 = prim std_const(4,1);
    i0 = prim std_reg(4);
    i1 = prim std_reg(4);
    j0 = prim std_reg(4);
    le0 = prim std_le(4);
    le1 = prim std_le(4);
    le2 = prim std_le(4);
    mult0 = prim std_mult(32);
    mult1 = prim std_mult(32);
    p = prim std_mem_d1(32,8,4);
    q = prim std_mem_d1(32,8,4);
    q00 = prim std_reg(32);
    r = prim std_mem_d1(32,8,4);
    s = prim std_mem_d1(32,8,4);
    s00 = prim std_reg(32);
  }
  wires {
    group cond0 {
      cond0[done] = 1'd1;
      le0.left = i0.out;
      le0.right = const1.out;
    }
    group cond1 {
      cond1[done] = 1'd1;
      le1.left = i1.out;
      le1.right = const5.out;
    }
    group cond2 {
      cond2[done] = 1'd1;
      le2.left = j0.out;
      le2.right = const8.out;
    }
    group let0 {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1 {
      i1.in = const4.out;
      i1.write_en = 1'd1;
      let1[done] = i1.done;
    }
    group let2 {
      j0.in = const7.out;
      j0.write_en = 1'd1;
      let2[done] = j0.done;
    }
    group let3 {
      s00.in = s.read_data;
      s00.write_en = 1'd1;
      let3[done] = s00.done;
      s.addr0 = j0.out;
    }
    group let4 {
      q00.in = q.read_data;
      q00.write_en = 1'd1;
      let4[done] = q00.done;
      q.addr0 = i1.out;
    }
    group let5 {
      A_i_j0.in = A.read_data;
      A_i_j0.write_en = 1'd1;
      let5[done] = A_i_j0.done;
      A.addr1 = j0.out;
      A.addr0 = i1.out;
    }
    group upd0 {
      s.addr0 = i0.out;
      s.write_en = 1'd1;
      s.write_data = const2.out;
      upd0[done] = s.done;
    }
    group upd1 {
      i0.write_en = 1'd1;
      add0.left = i0.out;
      add0.right = const3.out;
      i0.in = add0.out;
      upd1[done] = i0.done;
    }
    group upd2 {
      q.addr0 = i1.out;
      q.write_en = 1'd1;
      q.write_data = const6.out;
      upd2[done] = q.done;
    }
    group upd3 {
      s.addr0 = j0.out;
      s.write_en = 1'd1;
      add1.left = s00.out;
      add1.right = mult0.out;
      mult0.left = r.read_data;
      mult0.right = A_i_j0.out;
      r.addr0 = i1.out;
      s.write_data = add1.out;
      upd3[done] = s.done;
    }
    group upd4 {
      q.addr0 = i1.out;
      q.write_en = 1'd1;
      add2.left = q00.out;
      add2.right = mult1.out;
      mult1.left = A_i_j0.out;
      mult1.right = p.read_data;
      p.addr0 = j0.out;
      q.write_data = add2.out;
      upd4[done] = q.done;
    }
    group upd5 {
      j0.write_en = 1'd1;
      add3.left = j0.out;
      add3.right = const9.out;
      j0.in = add3.out;
      upd5[done] = j0.done;
    }
    group upd6 {
      i1.write_en = 1'd1;
      add4.left = i1.out;
      add4.right = const10.out;
      i1.in = add4.out;
      upd6[done] = i1.done;
    }
  }
  control {
    seq {
      let0;
      while le0.out with cond0 {
        seq {
          upd0;
          upd1;
        }
      }
      let1;
      while le1.out with cond1 {
        seq {
          upd2;
          let2;
          while le2.out with cond2 {
            seq {
              seq {
                let3;
                let4;
                let5;
              }
              seq {
                upd3;
                upd4;
              }
              upd5;
            }
          }
          upd6;
        }
      }
    }
  }
}
