import "primitives/std.lib";
component main() -> () {
  cells {
    A = prim std_mem_d2(32,8,8,4,4);
    A_i_j0 = prim std_reg(32);
    add0 = prim std_add(32);
    add1 = prim std_add(32);
    add10 = prim std_add(4);
    add11 = prim std_add(4);
    add2 = prim std_add(4);
    add3 = prim std_add(4);
    add4 = prim std_add(32);
    add5 = prim std_add(4);
    add6 = prim std_add(4);
    add7 = prim std_add(32);
    add8 = prim std_add(4);
    add9 = prim std_add(32);
    alpha = prim std_mem_d1(32,1,1);
    beta = prim std_mem_d1(32,1,1);
    const0 = prim std_const(4,0);
    const1 = prim std_const(4,7);
    const10 = prim std_const(1,0);
    const11 = prim std_const(4,1);
    const12 = prim std_const(4,1);
    const13 = prim std_const(4,0);
    const14 = prim std_const(4,7);
    const15 = prim std_const(4,1);
    const16 = prim std_const(4,0);
    const17 = prim std_const(4,7);
    const18 = prim std_const(4,0);
    const19 = prim std_const(4,7);
    const2 = prim std_const(4,0);
    const20 = prim std_const(1,0);
    const21 = prim std_const(4,1);
    const22 = prim std_const(4,1);
    const3 = prim std_const(4,7);
    const4 = prim std_const(4,1);
    const5 = prim std_const(4,1);
    const6 = prim std_const(4,0);
    const7 = prim std_const(4,7);
    const8 = prim std_const(4,0);
    const9 = prim std_const(4,7);
    i0 = prim std_reg(4);
    i1 = prim std_reg(4);
    i2 = prim std_reg(4);
    i3 = prim std_reg(4);
    j0 = prim std_reg(4);
    j1 = prim std_reg(4);
    j2 = prim std_reg(4);
    le0 = prim std_le(4);
    le1 = prim std_le(4);
    le2 = prim std_le(4);
    le3 = prim std_le(4);
    le4 = prim std_le(4);
    le5 = prim std_le(4);
    le6 = prim std_le(4);
    mult0 = prim std_mult(32);
    mult1 = prim std_mult(32);
    mult2 = prim std_mult(32);
    mult3 = prim std_mult(32);
    mult4 = prim std_mult(32);
    mult5 = prim std_mult(32);
    u1 = prim std_mem_d1(32,8,4);
    u2 = prim std_mem_d1(32,8,4);
    v1 = prim std_mem_d1(32,8,4);
    v2 = prim std_mem_d1(32,8,4);
    w = prim std_mem_d1(32,8,4);
    w_i0 = prim std_reg(32);
    x = prim std_mem_d1(32,8,4);
    x_i0 = prim std_reg(32);
    x_i1 = prim std_reg(32);
    y = prim std_mem_d1(32,8,4);
    z = prim std_mem_d1(32,8,4);
  }
  wires {
    group cond0<"static"=1> {
      cond0[done] = 1'd1;
      le0.left = i0.out;
      le0.right = const1.out;
    }
    group cond1<"static"=1> {
      cond1[done] = 1'd1;
      le1.left = j0.out;
      le1.right = const3.out;
    }
    group cond2<"static"=1> {
      cond2[done] = 1'd1;
      le2.left = i1.out;
      le2.right = const7.out;
    }
    group cond3<"static"=1> {
      cond3[done] = 1'd1;
      le3.left = j1.out;
      le3.right = const9.out;
    }
    group cond4<"static"=1> {
      cond4[done] = 1'd1;
      le4.left = i2.out;
      le4.right = const14.out;
    }
    group cond5<"static"=1> {
      cond5[done] = 1'd1;
      le5.left = i3.out;
      le5.right = const17.out;
    }
    group cond6<"static"=1> {
      cond6[done] = 1'd1;
      le6.left = j2.out;
      le6.right = const19.out;
    }
    group let0<"static"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"static"=1> {
      j0.in = const2.out;
      j0.write_en = 1'd1;
      let1[done] = j0.done;
    }
    group let10<"static"=1> {
      w_i0.in = w.read_data;
      w_i0.write_en = 1'd1;
      let10[done] = w_i0.done;
      w.addr0 = i3.out;
    }
    group let2<"static"=1> {
      A_i_j0.in = A.read_data;
      A_i_j0.write_en = 1'd1;
      let2[done] = A_i_j0.done;
      A.addr1 = j0.out;
      A.addr0 = i0.out;
    }
    group let3<"static"=1> {
      i1.in = const6.out;
      i1.write_en = 1'd1;
      let3[done] = i1.done;
    }
    group let4<"static"=1> {
      j1.in = const8.out;
      j1.write_en = 1'd1;
      let4[done] = j1.done;
    }
    group let5<"static"=1> {
      x_i0.in = x.read_data;
      x_i0.write_en = 1'd1;
      let5[done] = x_i0.done;
      x.addr0 = i1.out;
    }
    group let6<"static"=1> {
      i2.in = const13.out;
      i2.write_en = 1'd1;
      let6[done] = i2.done;
    }
    group let7<"static"=1> {
      x_i1.in = x.read_data;
      x_i1.write_en = 1'd1;
      let7[done] = x_i1.done;
      x.addr0 = i2.out;
    }
    group let8<"static"=1> {
      i3.in = const16.out;
      i3.write_en = 1'd1;
      let8[done] = i3.done;
    }
    group let9<"static"=1> {
      j2.in = const18.out;
      j2.write_en = 1'd1;
      let9[done] = j2.done;
    }
    group upd0<"static"=1> {
      A.addr1 = j0.out;
      A.addr0 = i0.out;
      A.write_en = 1'd1;
      add1.left = add0.out;
      add1.right = mult1.out;
      add0.left = A_i_j0.out;
      add0.right = mult0.out;
      mult0.left = u1.read_data;
      mult0.right = v1.read_data;
      u1.addr0 = i0.out;
      v1.addr0 = j0.out;
      mult1.left = u2.read_data;
      mult1.right = v2.read_data;
      u2.addr0 = i0.out;
      v2.addr0 = j0.out;
      A.write_data = add1.out;
      upd0[done] = A.done;
    }
    group upd1<"static"=1> {
      j0.write_en = 1'd1;
      add2.left = j0.out;
      add2.right = const4.out;
      j0.in = add2.out;
      upd1[done] = j0.done;
    }
    group upd10<"static"=1> {
      i3.write_en = 1'd1;
      add11.left = i3.out;
      add11.right = const22.out;
      i3.in = add11.out;
      upd10[done] = i3.done;
    }
    group upd2<"static"=1> {
      i0.write_en = 1'd1;
      add3.left = i0.out;
      add3.right = const5.out;
      i0.in = add3.out;
      upd2[done] = i0.done;
    }
    group upd3<"static"=1> {
      x.addr0 = i1.out;
      x.write_en = 1'd1;
      add4.left = x_i0.out;
      add4.right = mult3.out;
      mult3.left = mult2.out;
      mult3.right = y.read_data;
      mult2.left = beta.read_data;
      mult2.right = A.read_data;
      beta.addr0 = const10.out;
      A.addr1 = i1.out;
      A.addr0 = j1.out;
      y.addr0 = j1.out;
      x.write_data = add4.out;
      upd3[done] = x.done;
    }
    group upd4<"static"=1> {
      j1.write_en = 1'd1;
      add5.left = j1.out;
      add5.right = const11.out;
      j1.in = add5.out;
      upd4[done] = j1.done;
    }
    group upd5<"static"=1> {
      i1.write_en = 1'd1;
      add6.left = i1.out;
      add6.right = const12.out;
      i1.in = add6.out;
      upd5[done] = i1.done;
    }
    group upd6<"static"=1> {
      x.addr0 = i2.out;
      x.write_en = 1'd1;
      add7.left = x_i1.out;
      add7.right = z.read_data;
      z.addr0 = i2.out;
      x.write_data = add7.out;
      upd6[done] = x.done;
    }
    group upd7<"static"=1> {
      i2.write_en = 1'd1;
      add8.left = i2.out;
      add8.right = const15.out;
      i2.in = add8.out;
      upd7[done] = i2.done;
    }
    group upd8<"static"=1> {
      w.addr0 = i3.out;
      w.write_en = 1'd1;
      add9.left = w_i0.out;
      add9.right = mult5.out;
      mult5.left = mult4.out;
      mult5.right = x.read_data;
      mult4.left = alpha.read_data;
      mult4.right = A.read_data;
      alpha.addr0 = const20.out;
      A.addr1 = j2.out;
      A.addr0 = i3.out;
      x.addr0 = j2.out;
      w.write_data = add9.out;
      upd8[done] = w.done;
    }
    group upd9<"static"=1> {
      j2.write_en = 1'd1;
      add10.left = j2.out;
      add10.right = const21.out;
      j2.in = add10.out;
      upd9[done] = j2.done;
    }
  }
  control {
    seq {
      let0;
      while le0.out with cond0 {
        seq {
          let1;
          while le1.out with cond1 {
            seq {
              let2;
              upd0;
              upd1;
            }
          }
          upd2;
        }
      }
      let3;
      while le2.out with cond2 {
        seq {
          let4;
          while le3.out with cond3 {
            seq {
              let5;
              upd3;
              upd4;
            }
          }
          upd5;
        }
      }
      let6;
      while le4.out with cond4 {
        seq {
          let7;
          upd6;
          upd7;
        }
      }
      let8;
      while le5.out with cond5 {
        seq {
          let9;
          while le6.out with cond6 {
            seq {
              let10;
              upd8;
              upd9;
            }
          }
          upd10;
        }
      }
    }
  }
}
