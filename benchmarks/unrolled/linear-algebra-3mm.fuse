decl E_int: ubit<32>[8][8];
decl A_int: ubit<32>[8][8];
decl B_int: ubit<32>[8][8];
decl F_int: ubit<32>[8][8];
decl C_int: ubit<32>[8][8];
decl D_int: ubit<32>[8][8];
decl G_int: ubit<32>[8][8];

let E: ubit<32>[8 bank 2][8 bank 2];
let A: ubit<32>[8 bank 2][8 bank 2];
let B: ubit<32>[8 bank 2][8 bank 2];
let F: ubit<32>[8 bank 2][8 bank 2];
let C: ubit<32>[8 bank 2][8 bank 2];
let D: ubit<32>[8 bank 2][8 bank 2];
let G: ubit<32>[8 bank 2][8 bank 2];

view E_sh = E[_: bank 1][_: bank 1];
view A_sh = A[_: bank 1][_: bank 1];
view B_sh = B[_: bank 1][_: bank 1];
view F_sh = F[_: bank 1][_: bank 1];
view C_sh = C[_: bank 1][_: bank 1];
view D_sh = D[_: bank 1][_: bank 1];
view G_sh = G[_: bank 1][_: bank 1];

// Input interface.
for (let i: ubit<4> = 0..8) {
  for (let j: ubit<4> = 0..8) {
    E_sh[i][j] := E_int[i][j];
    A_sh[i][j] := A_int[i][j];
    B_sh[i][j] := B_int[i][j];
    F_sh[i][j] := F_int[i][j];
    C_sh[i][j] := C_int[i][j];
    D_sh[i][j] := D_int[i][j];
    G_sh[i][j] := G_int[i][j];
  }
}

---

for (let i: ubit<4> = 0..8) unroll 2 {
  for (let j: ubit<4> = 0..8) unroll 2 {
    E[i][j] := (0 as ubit<32>);
    ---
    for (let k: ubit<4> = 0..8) unroll 2 {
      let v: ubit<32> = A[i][k] * B[k][j]
    } combine {
      E[i][j] += v;
    }
  }
}

for (let i: ubit<4> = 0..8) unroll 2 {
  for (let j: ubit<4> = 0..8) unroll 2 {
    F[i][j] := (0 as ubit<32>);
    ---
    for (let k: ubit<4> = 0..8) unroll 2 {
      let v: ubit<32> = C[i][k] * D[k][j]
    } combine {
      F[i][j] += v;
    }
  }
}

---

for (let i: ubit<4> = 0..8) unroll 2 {
  for (let j: ubit<4> = 0..8) unroll 2 {
    G[i][j] := (0 as ubit<32>);
    ---
    for (let k: ubit<4> = 0..8) unroll 2 {
      let v: ubit<32> = E[i][k] * F[k][j]
    } combine {
      G[i][j] += v;
    }
  }
}

---

// output interface.
for (let i: ubit<4> = 0..8) {
  for (let j: ubit<4> = 0..8) {
    E_int[i][j] := E_sh[i][j];
    A_int[i][j] := A_sh[i][j];
    B_int[i][j] := B_sh[i][j];
    F_int[i][j] := F_sh[i][j];
    C_int[i][j] := C_sh[i][j];
    D_int[i][j] := D_sh[i][j];
    G_int[i][j] := G_sh[i][j];
  }
}
