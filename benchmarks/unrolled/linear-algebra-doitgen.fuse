decl A_int: ubit<32>[8][8][8];
decl C4_int: ubit<32>[8][8];
decl sum_int: ubit<32>[8];

let A: ubit<32>[8][8][8 bank 2];
let C4: ubit<32>[8 bank 2][8 bank 2];
let sum: ubit<32>[8 bank 2];

view A_sh = A[_: bank 1][_: bank 1][_: bank 1];
view C4_sh = C4[_: bank 1][_: bank 1];
view sum_sh = sum[_: bank 1];

for (let r: ubit<4> = 0..8) {
  for (let q: ubit<4> = 0..8) {
    for (let s: ubit<4> = 0..8) {
      A_sh[r][q][s] := A_int[r][q][s];
    }
    C4_sh[r][q] := C4_int[r][q];
  }
}

---

for (let r: ubit<4> = 0..8) {
  for (let q: ubit<4> = 0..8) {

    for (let p: ubit<4> = 0..8) unroll 2 {
      sum[p] := 0;
      ---
      for (let s: ubit<4> = 0..8) unroll 2 {
        let v: ubit<32> = A[r][q][s] * C4[s][p];
      } combine {
        sum[p] += v;
      }
    }
    ---
    for (let p: ubit<4> = 0..8) unroll 2 {
      A[r][q][p] := sum[p];
    }
  }
}

---

for (let r: ubit<4> = 0..8) {
  for (let q: ubit<4> = 0..8) {
    for (let s: ubit<4> = 0..8) {
      A_int[r][q][s] := A_sh[r][q][s];
    }
    C4_int[r][q] := C4_sh[r][q];
  }
  sum_int[r] := sum_sh[r];
}
