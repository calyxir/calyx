decl alpha: ubit<32>[1];
decl beta: ubit<32>[1];
decl C: ubit<32>[8][8];
decl A: ubit<32>[8][8];
decl B: ubit<32>[8][8];

let temp2: ubit<32> = 0;

for (let i: ubit<4> = 0..8) {
  for (let j: ubit<4> = 0..8) {
    temp2 := 0;
    // This is a 'for' loop in the original source
    let k: ubit<4> = 0;
    while (k < i) {
      decor "#pragma HLS loop_tripcount min=0 max=7 avg=4"
      let C_k_j: ubit<32> = C[k][j];
      ---
      C[k][j] := alpha[0] * B[i][j] * A[i][k] + C_k_j;
      ---
      temp2 := temp2 + B[k][j] * A[i][k];

      // Update loop counter
      k := k + 1;
    }
    ---
    let C_i_j: ubit<32> = C[i][j];
    ---
    C[i][j] := beta[0] * C_i_j + alpha[0]*B[i][j] * A[i][i] + alpha[0] * temp2;
  }
}
