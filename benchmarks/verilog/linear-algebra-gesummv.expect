/* verilator lint_off WIDTH */
module std_mem_d2
  #(parameter width = 32,
    parameter d0_size = 16,
    parameter d1_size = 16,
    parameter d0_idx_size = 4,
    parameter d1_idx_size = 4)
   (input logic [d0_idx_size-1:0] addr0,
    input logic [d1_idx_size-1:0] addr1,
    input logic [width-1:0]   write_data,
    input logic               write_en,
    input logic               clk,
    output logic [width-1:0]  read_data,
    output logic done);

  logic [width-1:0]  mem[d0_size-1:0][d1_size-1:0];

  assign read_data = mem[addr0][addr1];
  always_ff @(posedge clk) begin
    if (write_en) begin
      mem[addr0][addr1] <= write_data;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_mem_d1
  #(parameter width = 32,
    parameter size = 16,
    parameter idx_size = 4)
   (input logic [idx_size-1:0] addr0,
    input logic [width-1:0]   write_data,
    input logic               write_en,
    input logic               clk,
    output logic [width-1:0]  read_data,
    output logic done);

  logic [width-1:0]  mem[size-1:0];

  assign read_data = mem[addr0];
  always_ff @(posedge clk) begin
    if (write_en) begin
      mem[addr0] <= write_data;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (output logic [width - 1:0] out);
  assign out = value;
endmodule

module std_le
  #(parameter width = 32)
  (input logic [width-1:0] left,
   input logic [width-1:0] right,
   output logic            out);
  assign out = left <= right;
endmodule

module std_mult
  #(parameter width = 32)
  (input logic  [width-1:0] left,
    input logic  [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left * right;
endmodule

// Component Signature
module main (
      input wire go,
      input wire clk,
      output wire done
  );
  
  // Structure wire declarations
  wire [31:0] y_i1_in;
  wire y_i1_write_en;
  wire y_i1_clk;
  wire [31:0] y_i1_out;
  wire y_i1_done;
  wire [31:0] y_i0_in;
  wire y_i0_write_en;
  wire y_i0_clk;
  wire [31:0] y_i0_out;
  wire y_i0_done;
  wire [3:0] y_addr0;
  wire [31:0] y_write_data;
  wire y_write_en;
  wire y_clk;
  wire [31:0] y_read_data;
  wire y_done;
  wire [3:0] x_addr0;
  wire [31:0] x_write_data;
  wire x_write_en;
  wire x_clk;
  wire [31:0] x_read_data;
  wire x_done;
  wire [31:0] tmp_i0_in;
  wire tmp_i0_write_en;
  wire tmp_i0_clk;
  wire [31:0] tmp_i0_out;
  wire tmp_i0_done;
  wire [3:0] tmp_addr0;
  wire [31:0] tmp_write_data;
  wire tmp_write_en;
  wire tmp_clk;
  wire [31:0] tmp_read_data;
  wire tmp_done;
  wire [31:0] mult3_left;
  wire [31:0] mult3_right;
  wire [31:0] mult3_out;
  wire [31:0] mult2_left;
  wire [31:0] mult2_right;
  wire [31:0] mult2_out;
  wire [31:0] mult1_left;
  wire [31:0] mult1_right;
  wire [31:0] mult1_out;
  wire [31:0] mult0_left;
  wire [31:0] mult0_right;
  wire [31:0] mult0_out;
  wire [3:0] le1_left;
  wire [3:0] le1_right;
  wire le1_out;
  wire [3:0] le0_left;
  wire [3:0] le0_right;
  wire le0_out;
  wire [3:0] j0_in;
  wire j0_write_en;
  wire j0_clk;
  wire [3:0] j0_out;
  wire j0_done;
  wire [3:0] i0_in;
  wire i0_write_en;
  wire i0_clk;
  wire [3:0] i0_out;
  wire i0_done;
  wire [3:0] const9_out;
  wire const8_out;
  wire const7_out;
  wire [3:0] const6_out;
  wire [3:0] const5_out;
  wire [3:0] const4_out;
  wire [31:0] const3_out;
  wire [31:0] const2_out;
  wire [3:0] const1_out;
  wire [3:0] const0_out;
  wire beta_addr0;
  wire [31:0] beta_write_data;
  wire beta_write_en;
  wire beta_clk;
  wire [31:0] beta_read_data;
  wire beta_done;
  wire alpha_addr0;
  wire [31:0] alpha_write_data;
  wire alpha_write_en;
  wire alpha_clk;
  wire [31:0] alpha_read_data;
  wire alpha_done;
  wire [3:0] add4_left;
  wire [3:0] add4_right;
  wire [3:0] add4_out;
  wire [31:0] add3_left;
  wire [31:0] add3_right;
  wire [31:0] add3_out;
  wire [3:0] add2_left;
  wire [3:0] add2_right;
  wire [3:0] add2_out;
  wire [31:0] add1_left;
  wire [31:0] add1_right;
  wire [31:0] add1_out;
  wire [31:0] add0_left;
  wire [31:0] add0_right;
  wire [31:0] add0_out;
  wire [3:0] B_addr0;
  wire [3:0] B_addr1;
  wire [31:0] B_write_data;
  wire B_write_en;
  wire B_clk;
  wire [31:0] B_read_data;
  wire B_done;
  wire [3:0] A_addr0;
  wire [3:0] A_addr1;
  wire [31:0] A_write_data;
  wire A_write_en;
  wire A_clk;
  wire [31:0] A_read_data;
  wire A_done;
  wire [31:0] fsm0_in;
  wire fsm0_write_en;
  wire fsm0_clk;
  wire [31:0] fsm0_out;
  wire fsm0_done;
  wire [31:0] incr0_left;
  wire [31:0] incr0_right;
  wire [31:0] incr0_out;
  wire [31:0] fsm1_in;
  wire fsm1_write_en;
  wire fsm1_clk;
  wire [31:0] fsm1_out;
  wire fsm1_done;
  wire [31:0] incr1_left;
  wire [31:0] incr1_right;
  wire [31:0] incr1_out;
  wire [31:0] fsm2_in;
  wire fsm2_write_en;
  wire fsm2_clk;
  wire [31:0] fsm2_out;
  wire fsm2_done;
  wire cond_computed0_in;
  wire cond_computed0_write_en;
  wire cond_computed0_clk;
  wire cond_computed0_out;
  wire cond_computed0_done;
  wire cond_stored0_in;
  wire cond_stored0_write_en;
  wire cond_stored0_clk;
  wire cond_stored0_out;
  wire cond_stored0_done;
  wire done_reg0_in;
  wire done_reg0_write_en;
  wire done_reg0_clk;
  wire done_reg0_out;
  wire done_reg0_done;
  wire [31:0] fsm3_in;
  wire fsm3_write_en;
  wire fsm3_clk;
  wire [31:0] fsm3_out;
  wire fsm3_done;
  
  // Subcomponent Instances
  std_reg #(32) y_i1 (
      .in(y_i1_in),
      .write_en(y_i1_write_en),
      .clk(clk),
      .out(y_i1_out),
      .done(y_i1_done)
  );
  
  std_reg #(32) y_i0 (
      .in(y_i0_in),
      .write_en(y_i0_write_en),
      .clk(clk),
      .out(y_i0_out),
      .done(y_i0_done)
  );
  
  std_mem_d1 #(32, 8, 4) y (
      .addr0(y_addr0),
      .write_data(y_write_data),
      .write_en(y_write_en),
      .clk(clk),
      .read_data(y_read_data),
      .done(y_done)
  );
  
  std_mem_d1 #(32, 8, 4) x (
      .addr0(x_addr0),
      .write_data(x_write_data),
      .write_en(x_write_en),
      .clk(clk),
      .read_data(x_read_data),
      .done(x_done)
  );
  
  std_reg #(32) tmp_i0 (
      .in(tmp_i0_in),
      .write_en(tmp_i0_write_en),
      .clk(clk),
      .out(tmp_i0_out),
      .done(tmp_i0_done)
  );
  
  std_mem_d1 #(32, 8, 4) tmp (
      .addr0(tmp_addr0),
      .write_data(tmp_write_data),
      .write_en(tmp_write_en),
      .clk(clk),
      .read_data(tmp_read_data),
      .done(tmp_done)
  );
  
  std_mult #(32) mult3 (
      .left(mult3_left),
      .right(mult3_right),
      .out(mult3_out)
  );
  
  std_mult #(32) mult2 (
      .left(mult2_left),
      .right(mult2_right),
      .out(mult2_out)
  );
  
  std_mult #(32) mult1 (
      .left(mult1_left),
      .right(mult1_right),
      .out(mult1_out)
  );
  
  std_mult #(32) mult0 (
      .left(mult0_left),
      .right(mult0_right),
      .out(mult0_out)
  );
  
  std_le #(4) le1 (
      .left(le1_left),
      .right(le1_right),
      .out(le1_out)
  );
  
  std_le #(4) le0 (
      .left(le0_left),
      .right(le0_right),
      .out(le0_out)
  );
  
  std_reg #(4) j0 (
      .in(j0_in),
      .write_en(j0_write_en),
      .clk(clk),
      .out(j0_out),
      .done(j0_done)
  );
  
  std_reg #(4) i0 (
      .in(i0_in),
      .write_en(i0_write_en),
      .clk(clk),
      .out(i0_out),
      .done(i0_done)
  );
  
  std_const #(4, 1) const9 (
      .out(const9_out)
  );
  
  std_const #(1, 0) const8 (
      .out(const8_out)
  );
  
  std_const #(1, 0) const7 (
      .out(const7_out)
  );
  
  std_const #(4, 1) const6 (
      .out(const6_out)
  );
  
  std_const #(4, 7) const5 (
      .out(const5_out)
  );
  
  std_const #(4, 0) const4 (
      .out(const4_out)
  );
  
  std_const #(32, 0) const3 (
      .out(const3_out)
  );
  
  std_const #(32, 0) const2 (
      .out(const2_out)
  );
  
  std_const #(4, 7) const1 (
      .out(const1_out)
  );
  
  std_const #(4, 0) const0 (
      .out(const0_out)
  );
  
  std_mem_d1 #(32, 1, 1) beta (
      .addr0(beta_addr0),
      .write_data(beta_write_data),
      .write_en(beta_write_en),
      .clk(clk),
      .read_data(beta_read_data),
      .done(beta_done)
  );
  
  std_mem_d1 #(32, 1, 1) alpha (
      .addr0(alpha_addr0),
      .write_data(alpha_write_data),
      .write_en(alpha_write_en),
      .clk(clk),
      .read_data(alpha_read_data),
      .done(alpha_done)
  );
  
  std_add #(4) add4 (
      .left(add4_left),
      .right(add4_right),
      .out(add4_out)
  );
  
  std_add #(32) add3 (
      .left(add3_left),
      .right(add3_right),
      .out(add3_out)
  );
  
  std_add #(4) add2 (
      .left(add2_left),
      .right(add2_right),
      .out(add2_out)
  );
  
  std_add #(32) add1 (
      .left(add1_left),
      .right(add1_right),
      .out(add1_out)
  );
  
  std_add #(32) add0 (
      .left(add0_left),
      .right(add0_right),
      .out(add0_out)
  );
  
  std_mem_d2 #(32, 8, 8, 4, 4) B (
      .addr0(B_addr0),
      .addr1(B_addr1),
      .write_data(B_write_data),
      .write_en(B_write_en),
      .clk(clk),
      .read_data(B_read_data),
      .done(B_done)
  );
  
  std_mem_d2 #(32, 8, 8, 4, 4) A (
      .addr0(A_addr0),
      .addr1(A_addr1),
      .write_data(A_write_data),
      .write_en(A_write_en),
      .clk(clk),
      .read_data(A_read_data),
      .done(A_done)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  std_add #(32) incr0 (
      .left(incr0_left),
      .right(incr0_right),
      .out(incr0_out)
  );
  
  std_reg #(32) fsm1 (
      .in(fsm1_in),
      .write_en(fsm1_write_en),
      .clk(clk),
      .out(fsm1_out),
      .done(fsm1_done)
  );
  
  std_add #(32) incr1 (
      .left(incr1_left),
      .right(incr1_right),
      .out(incr1_out)
  );
  
  std_reg #(32) fsm2 (
      .in(fsm2_in),
      .write_en(fsm2_write_en),
      .clk(clk),
      .out(fsm2_out),
      .done(fsm2_done)
  );
  
  std_reg #(1) cond_computed0 (
      .in(cond_computed0_in),
      .write_en(cond_computed0_write_en),
      .clk(clk),
      .out(cond_computed0_out),
      .done(cond_computed0_done)
  );
  
  std_reg #(1) cond_stored0 (
      .in(cond_stored0_in),
      .write_en(cond_stored0_write_en),
      .clk(clk),
      .out(cond_stored0_out),
      .done(cond_stored0_done)
  );
  
  std_reg #(1) done_reg0 (
      .in(done_reg0_in),
      .write_en(done_reg0_write_en),
      .clk(clk),
      .out(done_reg0_out),
      .done(done_reg0_done)
  );
  
  std_reg #(32) fsm3 (
      .in(fsm3_in),
      .write_en(fsm3_write_en),
      .clk(clk),
      .out(fsm3_out),
      .done(fsm3_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      $readmemh({ DATA, "/y.dat" }, y.mem);
      $readmemh({ DATA, "/x.dat" }, x.mem);
      $readmemh({ DATA, "/tmp.dat" }, tmp.mem);
      $readmemh({ DATA, "/beta.dat" }, beta.mem);
      $readmemh({ DATA, "/alpha.dat" }, alpha.mem);
      $readmemh({ DATA, "/B.dat" }, B.mem);
      $readmemh({ DATA, "/A.dat" }, A.mem);
  end
  
   final begin
      $writememh({ DATA, "/y.out" }, y.mem);
      $writememh({ DATA, "/x.out" }, x.mem);
      $writememh({ DATA, "/tmp.out" }, tmp.mem);
      $writememh({ DATA, "/beta.out" }, beta.mem);
      $writememh({ DATA, "/alpha.out" }, alpha.mem);
      $writememh({ DATA, "/B.out" }, B.mem);
      $writememh({ DATA, "/A.out" }, A.mem);
  end
  
  // Input / output connections
  assign done = (fsm3_out == 32'd2) ? 1'd1 : '0;
  assign y_i1_in = (fsm2_out == 32'd4 & !y_i1_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? y_read_data : '0;
  assign y_i1_write_en = (fsm2_out == 32'd4 & !y_i1_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign y_i0_in = (fsm0_out == 32'd1 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? y_read_data : '0;
  assign y_i0_write_en = (fsm0_out == 32'd1 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign y_addr0 = (fsm0_out == 32'd1 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd4 & !y_i1_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd1 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm0_out == 32'd3 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd5 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? i0_out : '0;
  assign y_write_data = (fsm2_out == 32'd1 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? const3_out : (fsm2_out == 32'd5 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? add3_out : (fsm0_out == 32'd3 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? add1_out : '0;
  assign y_write_en = (fsm2_out == 32'd1 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm0_out == 32'd3 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd5 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign x_addr0 = (fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm0_out == 32'd3 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? j0_out : '0;
  assign tmp_i0_in = (fsm0_out == 32'd0 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? tmp_read_data : '0;
  assign tmp_i0_write_en = (fsm0_out == 32'd0 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign tmp_addr0 = (fsm0_out == 32'd0 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd0 & !tmp_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd5 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? i0_out : '0;
  assign tmp_write_data = (fsm2_out == 32'd0 & !tmp_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? const2_out : (fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? add0_out : '0;
  assign tmp_write_en = (fsm2_out == 32'd0 & !tmp_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign mult3_left = (fsm2_out == 32'd5 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? beta_read_data : '0;
  assign mult3_right = (fsm2_out == 32'd5 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? y_i1_out : '0;
  assign mult2_left = (fsm2_out == 32'd5 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? alpha_read_data : '0;
  assign mult2_right = (fsm2_out == 32'd5 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? tmp_read_data : '0;
  assign mult1_left = (fsm0_out == 32'd3 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? B_read_data : '0;
  assign mult1_right = (fsm0_out == 32'd3 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? x_read_data : '0;
  assign mult0_left = (fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? A_read_data : '0;
  assign mult0_right = (fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? x_read_data : '0;
  assign le1_left = (fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? j0_out : '0;
  assign le1_right = (fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? const5_out : '0;
  assign le0_left = (!cond_computed0_out & fsm3_out == 32'd1 & !done_reg0_out & go) ? i0_out : '0;
  assign le0_right = (!cond_computed0_out & fsm3_out == 32'd1 & !done_reg0_out & go) ? const1_out : '0;
  assign j0_in = (fsm2_out == 32'd2 & !j0_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? const4_out : (fsm0_out == 32'd4 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? add2_out : '0;
  assign j0_write_en = (fsm2_out == 32'd2 & !j0_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm0_out == 32'd4 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign i0_in = (fsm3_out == 32'd0 & !i0_done & go) ? const0_out : (fsm2_out == 32'd6 & !i0_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? add4_out : '0;
  assign i0_write_en = (fsm3_out == 32'd0 & !i0_done & go | fsm2_out == 32'd6 & !i0_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign beta_addr0 = (fsm2_out == 32'd5 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? const8_out : '0;
  assign alpha_addr0 = (fsm2_out == 32'd5 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? const7_out : '0;
  assign add4_left = (fsm2_out == 32'd6 & !i0_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? i0_out : '0;
  assign add4_right = (fsm2_out == 32'd6 & !i0_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? const9_out : '0;
  assign add3_left = (fsm2_out == 32'd5 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? mult2_out : '0;
  assign add3_right = (fsm2_out == 32'd5 & !y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? mult3_out : '0;
  assign add2_left = (fsm0_out == 32'd4 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? j0_out : '0;
  assign add2_right = (fsm0_out == 32'd4 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? const6_out : '0;
  assign add1_left = (fsm0_out == 32'd3 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? mult1_out : '0;
  assign add1_right = (fsm0_out == 32'd3 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? y_i0_out : '0;
  assign add0_left = (fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? mult0_out : '0;
  assign add0_right = (fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? tmp_i0_out : '0;
  assign B_addr0 = (fsm0_out == 32'd3 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? i0_out : '0;
  assign B_addr1 = (fsm0_out == 32'd3 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? j0_out : '0;
  assign A_addr0 = (fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? i0_out : '0;
  assign A_addr1 = (fsm0_out == 32'd2 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? j0_out : '0;
  assign fsm0_in = (fsm0_out != 32'd5 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? incr0_out : (fsm0_out == 32'd5) ? 32'd0 : '0;
  assign fsm0_write_en = (fsm0_out != 32'd5 & fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm0_out == 32'd5) ? 1'd1 : '0;
  assign incr0_left = (fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 32'd1 : '0;
  assign incr0_right = (fsm1_out > 32'd0 & fsm1_out < 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? fsm0_out : '0;
  assign fsm1_in = (fsm1_out != 32'd6 & fsm1_out != 32'd0 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? incr1_out : (fsm1_out == 32'd0 & !le1_out & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm1_out == 32'd6 & !le1_out & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 32'd7 : (fsm1_out == 32'd0 & le1_out & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm1_out == 32'd6 & le1_out & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 32'd1 : (fsm1_out == 32'd7) ? 32'd0 : '0;
  assign fsm1_write_en = (fsm1_out != 32'd6 & fsm1_out != 32'd0 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm1_out == 32'd0 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm1_out == 32'd6 & fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm1_out == 32'd7) ? 1'd1 : '0;
  assign incr1_left = (fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? fsm1_out : '0;
  assign incr1_right = (fsm2_out == 32'd3 & !(fsm1_out == 32'd7) & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 32'd1 : '0;
  assign fsm2_in = (fsm2_out == 32'd5 & y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 32'd6 : (fsm2_out == 32'd6 & i0_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 32'd7 : (fsm2_out == 32'd4 & y_i1_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 32'd5 : (fsm2_out == 32'd3 & fsm1_out == 32'd7 & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 32'd4 : (fsm2_out == 32'd2 & j0_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 32'd3 : (fsm2_out == 32'd1 & y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 32'd2 : (fsm2_out == 32'd0 & tmp_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go) ? 32'd1 : (fsm2_out == 32'd7) ? 32'd0 : '0;
  assign fsm2_write_en = (fsm2_out == 32'd0 & tmp_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd1 & y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd2 & j0_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd3 & fsm1_out == 32'd7 & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd4 & y_i1_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd5 & y_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd6 & i0_done & cond_stored0_out & cond_computed0_out & !(fsm2_out == 32'd7) & fsm3_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd7) ? 1'd1 : '0;
  assign cond_computed0_in = (cond_stored0_out & cond_computed0_out & fsm2_out == 32'd7 & fsm3_out == 32'd1 & !done_reg0_out & go | cond_computed0_out & !cond_stored0_out & fsm3_out == 32'd1 & !done_reg0_out & go) ? 1'd0 : (!cond_computed0_out & fsm3_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign cond_computed0_write_en = (!cond_computed0_out & fsm3_out == 32'd1 & !done_reg0_out & go | cond_stored0_out & cond_computed0_out & fsm2_out == 32'd7 & fsm3_out == 32'd1 & !done_reg0_out & go | cond_computed0_out & !cond_stored0_out & fsm3_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign cond_stored0_in = (!cond_computed0_out & fsm3_out == 32'd1 & !done_reg0_out & go) ? le0_out : '0;
  assign cond_stored0_write_en = (!cond_computed0_out & fsm3_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign done_reg0_in = done_reg0_out ? 1'd0 : (cond_computed0_out & !cond_stored0_out & fsm3_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign done_reg0_write_en = (cond_computed0_out & !cond_stored0_out & fsm3_out == 32'd1 & !done_reg0_out & go | done_reg0_out) ? 1'd1 : '0;
  assign fsm3_in = (fsm3_out == 32'd1 & done_reg0_out & go) ? 32'd2 : (fsm3_out == 32'd0 & i0_done & go) ? 32'd1 : (fsm3_out == 32'd2) ? 32'd0 : '0;
  assign fsm3_write_en = (fsm3_out == 32'd0 & i0_done & go | fsm3_out == 32'd1 & done_reg0_out & go | fsm3_out == 32'd2) ? 1'd1 : '0;
endmodule // end main