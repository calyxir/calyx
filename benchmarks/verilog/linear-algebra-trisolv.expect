/* verilator lint_off WIDTH */
module std_mem_d2
  #(parameter width = 32,
    parameter d0_size = 16,
    parameter d1_size = 16,
    parameter d0_idx_size = 4,
    parameter d1_idx_size = 4)
   (input logic [d0_idx_size-1:0] addr0,
    input logic [d1_idx_size-1:0] addr1,
    input logic [width-1:0]   write_data,
    input logic               write_en,
    input logic               clk,
    output logic [width-1:0]  read_data,
    output logic done);

  logic [width-1:0]  mem[d0_size-1:0][d1_size-1:0];

  assign read_data = mem[addr0][addr1];
  always_ff @(posedge clk) begin
    if (write_en) begin
      mem[addr0][addr1] <= write_data;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_mem_d1
  #(parameter width = 32,
    parameter size = 16,
    parameter idx_size = 4)
   (input logic [idx_size-1:0] addr0,
    input logic [width-1:0]   write_data,
    input logic               write_en,
    input logic               clk,
    output logic [width-1:0]  read_data,
    output logic done);

  logic [width-1:0]  mem[size-1:0];

  assign read_data = mem[addr0];
  always_ff @(posedge clk) begin
    if (write_en) begin
      mem[addr0] <= write_data;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (output logic [width - 1:0] out);
  assign out = value;
endmodule

module std_div
  #(parameter width = 32)
  (input logic  [width-1:0] left,
    input logic  [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left / right;
endmodule

module std_le
  #(parameter width = 32)
  (input logic [width-1:0] left,
   input logic [width-1:0] right,
   output logic            out);
  assign out = left <= right;
endmodule

module std_lt
  #(parameter width = 32)
  (input logic [width-1:0] left,
    input logic [width-1:0] right,
    output logic            out);
  assign out = left < right;
endmodule

module std_mult
  #(parameter width = 32)
  (input logic  [width-1:0] left,
    input logic  [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left * right;
endmodule

// Component Signature
module main (
      input wire go,
      input wire clk,
      output wire done
  );
  
  // Structure wire declarations
  wire [31:0] x_j0_in;
  wire x_j0_write_en;
  wire x_j0_clk;
  wire [31:0] x_j0_out;
  wire x_j0_done;
  wire [31:0] x_i0_in;
  wire x_i0_write_en;
  wire x_i0_clk;
  wire [31:0] x_i0_out;
  wire x_i0_done;
  wire [3:0] x_addr0;
  wire [31:0] x_write_data;
  wire x_write_en;
  wire x_clk;
  wire [31:0] x_read_data;
  wire x_done;
  wire [31:0] mult0_left;
  wire [31:0] mult0_right;
  wire [31:0] mult0_out;
  wire [3:0] lt0_left;
  wire [3:0] lt0_right;
  wire lt0_out;
  wire [3:0] le0_left;
  wire [3:0] le0_right;
  wire le0_out;
  wire [3:0] j0_in;
  wire j0_write_en;
  wire j0_clk;
  wire [3:0] j0_out;
  wire j0_done;
  wire [3:0] i0_in;
  wire i0_write_en;
  wire i0_clk;
  wire [3:0] i0_out;
  wire i0_done;
  wire [31:0] div0_left;
  wire [31:0] div0_right;
  wire [31:0] div0_out;
  wire [3:0] const4_out;
  wire [3:0] const3_out;
  wire [3:0] const2_out;
  wire [3:0] const1_out;
  wire [3:0] const0_out;
  wire [3:0] b_addr0;
  wire [31:0] b_write_data;
  wire b_write_en;
  wire b_clk;
  wire [31:0] b_read_data;
  wire b_done;
  wire [3:0] add1_left;
  wire [3:0] add1_right;
  wire [3:0] add1_out;
  wire [3:0] add0_left;
  wire [3:0] add0_right;
  wire [3:0] add0_out;
  wire [3:0] L_addr0;
  wire [3:0] L_addr1;
  wire [31:0] L_write_data;
  wire L_write_en;
  wire L_clk;
  wire [31:0] L_read_data;
  wire L_done;
  wire [31:0] fsm0_in;
  wire fsm0_write_en;
  wire fsm0_clk;
  wire [31:0] fsm0_out;
  wire fsm0_done;
  wire [31:0] incr0_left;
  wire [31:0] incr0_right;
  wire [31:0] incr0_out;
  wire [31:0] fsm1_in;
  wire fsm1_write_en;
  wire fsm1_clk;
  wire [31:0] fsm1_out;
  wire fsm1_done;
  wire [31:0] incr1_left;
  wire [31:0] incr1_right;
  wire [31:0] incr1_out;
  wire [31:0] fsm2_in;
  wire fsm2_write_en;
  wire fsm2_clk;
  wire [31:0] fsm2_out;
  wire fsm2_done;
  wire [31:0] incr2_left;
  wire [31:0] incr2_right;
  wire [31:0] incr2_out;
  wire [31:0] fsm3_in;
  wire fsm3_write_en;
  wire fsm3_clk;
  wire [31:0] fsm3_out;
  wire fsm3_done;
  wire [31:0] incr3_left;
  wire [31:0] incr3_right;
  wire [31:0] incr3_out;
  wire [31:0] fsm4_in;
  wire fsm4_write_en;
  wire fsm4_clk;
  wire [31:0] fsm4_out;
  wire fsm4_done;
  wire [31:0] incr4_left;
  wire [31:0] incr4_right;
  wire [31:0] incr4_out;
  wire [31:0] fsm5_in;
  wire fsm5_write_en;
  wire fsm5_clk;
  wire [31:0] fsm5_out;
  wire fsm5_done;
  wire [31:0] fsm6_in;
  wire fsm6_write_en;
  wire fsm6_clk;
  wire [31:0] fsm6_out;
  wire fsm6_done;
  wire cond_computed0_in;
  wire cond_computed0_write_en;
  wire cond_computed0_clk;
  wire cond_computed0_out;
  wire cond_computed0_done;
  wire cond_stored0_in;
  wire cond_stored0_write_en;
  wire cond_stored0_clk;
  wire cond_stored0_out;
  wire cond_stored0_done;
  wire done_reg0_in;
  wire done_reg0_write_en;
  wire done_reg0_clk;
  wire done_reg0_out;
  wire done_reg0_done;
  wire [31:0] fsm7_in;
  wire fsm7_write_en;
  wire fsm7_clk;
  wire [31:0] fsm7_out;
  wire fsm7_done;
  
  // Subcomponent Instances
  std_reg #(32) x_j0 (
      .in(x_j0_in),
      .write_en(x_j0_write_en),
      .clk(clk),
      .out(x_j0_out),
      .done(x_j0_done)
  );
  
  std_reg #(32) x_i0 (
      .in(x_i0_in),
      .write_en(x_i0_write_en),
      .clk(clk),
      .out(x_i0_out),
      .done(x_i0_done)
  );
  
  std_mem_d1 #(32, 8, 4) x (
      .addr0(x_addr0),
      .write_data(x_write_data),
      .write_en(x_write_en),
      .clk(clk),
      .read_data(x_read_data),
      .done(x_done)
  );
  
  std_mult #(32) mult0 (
      .left(mult0_left),
      .right(mult0_right),
      .out(mult0_out)
  );
  
  std_lt #(4) lt0 (
      .left(lt0_left),
      .right(lt0_right),
      .out(lt0_out)
  );
  
  std_le #(4) le0 (
      .left(le0_left),
      .right(le0_right),
      .out(le0_out)
  );
  
  std_reg #(4) j0 (
      .in(j0_in),
      .write_en(j0_write_en),
      .clk(clk),
      .out(j0_out),
      .done(j0_done)
  );
  
  std_reg #(4) i0 (
      .in(i0_in),
      .write_en(i0_write_en),
      .clk(clk),
      .out(i0_out),
      .done(i0_done)
  );
  
  std_div #(32) div0 (
      .left(div0_left),
      .right(div0_right),
      .out(div0_out)
  );
  
  std_const #(4, 1) const4 (
      .out(const4_out)
  );
  
  std_const #(4, 1) const3 (
      .out(const3_out)
  );
  
  std_const #(4, 0) const2 (
      .out(const2_out)
  );
  
  std_const #(4, 7) const1 (
      .out(const1_out)
  );
  
  std_const #(4, 0) const0 (
      .out(const0_out)
  );
  
  std_mem_d1 #(32, 8, 4) b (
      .addr0(b_addr0),
      .write_data(b_write_data),
      .write_en(b_write_en),
      .clk(clk),
      .read_data(b_read_data),
      .done(b_done)
  );
  
  std_add #(4) add1 (
      .left(add1_left),
      .right(add1_right),
      .out(add1_out)
  );
  
  std_add #(4) add0 (
      .left(add0_left),
      .right(add0_right),
      .out(add0_out)
  );
  
  std_mem_d2 #(32, 8, 8, 4, 4) L (
      .addr0(L_addr0),
      .addr1(L_addr1),
      .write_data(L_write_data),
      .write_en(L_write_en),
      .clk(clk),
      .read_data(L_read_data),
      .done(L_done)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  std_add #(32) incr0 (
      .left(incr0_left),
      .right(incr0_right),
      .out(incr0_out)
  );
  
  std_reg #(32) fsm1 (
      .in(fsm1_in),
      .write_en(fsm1_write_en),
      .clk(clk),
      .out(fsm1_out),
      .done(fsm1_done)
  );
  
  std_add #(32) incr1 (
      .left(incr1_left),
      .right(incr1_right),
      .out(incr1_out)
  );
  
  std_reg #(32) fsm2 (
      .in(fsm2_in),
      .write_en(fsm2_write_en),
      .clk(clk),
      .out(fsm2_out),
      .done(fsm2_done)
  );
  
  std_add #(32) incr2 (
      .left(incr2_left),
      .right(incr2_right),
      .out(incr2_out)
  );
  
  std_reg #(32) fsm3 (
      .in(fsm3_in),
      .write_en(fsm3_write_en),
      .clk(clk),
      .out(fsm3_out),
      .done(fsm3_done)
  );
  
  std_add #(32) incr3 (
      .left(incr3_left),
      .right(incr3_right),
      .out(incr3_out)
  );
  
  std_reg #(32) fsm4 (
      .in(fsm4_in),
      .write_en(fsm4_write_en),
      .clk(clk),
      .out(fsm4_out),
      .done(fsm4_done)
  );
  
  std_add #(32) incr4 (
      .left(incr4_left),
      .right(incr4_right),
      .out(incr4_out)
  );
  
  std_reg #(32) fsm5 (
      .in(fsm5_in),
      .write_en(fsm5_write_en),
      .clk(clk),
      .out(fsm5_out),
      .done(fsm5_done)
  );
  
  std_reg #(32) fsm6 (
      .in(fsm6_in),
      .write_en(fsm6_write_en),
      .clk(clk),
      .out(fsm6_out),
      .done(fsm6_done)
  );
  
  std_reg #(1) cond_computed0 (
      .in(cond_computed0_in),
      .write_en(cond_computed0_write_en),
      .clk(clk),
      .out(cond_computed0_out),
      .done(cond_computed0_done)
  );
  
  std_reg #(1) cond_stored0 (
      .in(cond_stored0_in),
      .write_en(cond_stored0_write_en),
      .clk(clk),
      .out(cond_stored0_out),
      .done(cond_stored0_done)
  );
  
  std_reg #(1) done_reg0 (
      .in(done_reg0_in),
      .write_en(done_reg0_write_en),
      .clk(clk),
      .out(done_reg0_out),
      .done(done_reg0_done)
  );
  
  std_reg #(32) fsm7 (
      .in(fsm7_in),
      .write_en(fsm7_write_en),
      .clk(clk),
      .out(fsm7_out),
      .done(fsm7_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      $readmemh({ DATA, "/x.dat" }, x.mem);
      $readmemh({ DATA, "/b.dat" }, b.mem);
      $readmemh({ DATA, "/L.dat" }, L.mem);
  end
  
   final begin
      $writememh({ DATA, "/x.out" }, x.mem);
      $writememh({ DATA, "/b.out" }, b.mem);
      $writememh({ DATA, "/L.out" }, L.mem);
  end
  
  // Input / output connections
  assign done = (fsm7_out == 32'd2) ? 1'd1 : '0;
  assign x_j0_in = (fsm1_out == 32'd0 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? x_read_data : '0;
  assign x_j0_write_en = (fsm1_out == 32'd0 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign x_i0_in = (fsm6_out == 32'd2 & !x_i0_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? x_read_data : '0;
  assign x_i0_write_en = (fsm6_out == 32'd2 & !x_i0_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign x_addr0 = (fsm1_out == 32'd0 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? j0_out : (fsm6_out == 32'd2 & !x_i0_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm6_out == 32'd0 & !x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd0 & fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm6_out == 32'd3 & !x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? i0_out : '0;
  assign x_write_data = (fsm2_out == 32'd0 & fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? mult0_out : (fsm6_out == 32'd3 & !x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? div0_out : (fsm6_out == 32'd0 & !x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? b_read_data : '0;
  assign x_write_en = (fsm6_out == 32'd0 & !x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd0 & fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm6_out == 32'd3 & !x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign mult0_left = (fsm2_out == 32'd0 & fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? L_read_data : '0;
  assign mult0_right = (fsm2_out == 32'd0 & fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? x_j0_out : '0;
  assign lt0_left = (fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? j0_out : '0;
  assign lt0_right = (fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? i0_out : '0;
  assign le0_left = (!cond_computed0_out & fsm7_out == 32'd1 & !done_reg0_out & go) ? i0_out : '0;
  assign le0_right = (!cond_computed0_out & fsm7_out == 32'd1 & !done_reg0_out & go) ? const1_out : '0;
  assign j0_in = (fsm5_out == 32'd0 & !j0_done & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? const2_out : (fsm2_out == 32'd1 & fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? add0_out : '0;
  assign j0_write_en = (fsm5_out == 32'd0 & !j0_done & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd1 & fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign i0_in = (fsm7_out == 32'd0 & !i0_done & go) ? const0_out : (fsm6_out == 32'd4 & !i0_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? add1_out : '0;
  assign i0_write_en = (fsm7_out == 32'd0 & !i0_done & go | fsm6_out == 32'd4 & !i0_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign div0_left = (fsm6_out == 32'd3 & !x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? x_i0_out : '0;
  assign div0_right = (fsm6_out == 32'd3 & !x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? L_read_data : '0;
  assign b_addr0 = (fsm6_out == 32'd0 & !x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? i0_out : '0;
  assign add1_left = (fsm6_out == 32'd4 & !i0_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? i0_out : '0;
  assign add1_right = (fsm6_out == 32'd4 & !i0_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? const4_out : '0;
  assign add0_left = (fsm2_out == 32'd1 & fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? j0_out : '0;
  assign add0_right = (fsm2_out == 32'd1 & fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? const3_out : '0;
  assign L_addr0 = (fsm2_out == 32'd0 & fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm6_out == 32'd3 & !x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? i0_out : '0;
  assign L_addr1 = (fsm2_out == 32'd0 & fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? j0_out : (fsm6_out == 32'd3 & !x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? i0_out : '0;
  assign fsm0_in = (fsm0_out != 32'd0 & fsm1_out <= 32'd0 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? incr0_out : (fsm0_out == 32'd0) ? 32'd0 : '0;
  assign fsm0_write_en = (fsm0_out != 32'd0 & fsm1_out <= 32'd0 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm0_out == 32'd0) ? 1'd1 : '0;
  assign incr0_left = (fsm1_out <= 32'd0 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd1 : '0;
  assign incr0_right = (fsm1_out <= 32'd0 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? fsm0_out : '0;
  assign fsm1_in = (fsm1_out != 32'd1 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? incr1_out : (fsm1_out == 32'd1) ? 32'd0 : '0;
  assign fsm1_write_en = (fsm1_out != 32'd1 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm1_out == 32'd1) ? 1'd1 : '0;
  assign incr1_left = (fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd1 : '0;
  assign incr1_right = (fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? fsm1_out : '0;
  assign fsm2_in = (fsm2_out != 32'd2 & fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? incr2_out : (fsm2_out == 32'd2) ? 32'd0 : '0;
  assign fsm2_write_en = (fsm2_out != 32'd2 & fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm2_out == 32'd2) ? 1'd1 : '0;
  assign incr2_left = (fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd1 : '0;
  assign incr2_right = (fsm3_out >= 32'd1 & fsm3_out < 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? fsm2_out : '0;
  assign fsm3_in = (fsm3_out != 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? incr3_out : (fsm3_out == 32'd3) ? 32'd0 : '0;
  assign fsm3_write_en = (fsm3_out != 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm3_out == 32'd3) ? 1'd1 : '0;
  assign incr3_left = (fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd1 : '0;
  assign incr3_right = (fsm4_out > 32'd0 & fsm4_out < 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? fsm3_out : '0;
  assign fsm4_in = (fsm4_out != 32'd4 & fsm4_out != 32'd0 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? incr4_out : (fsm4_out == 32'd0 & !lt0_out & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm4_out == 32'd4 & !lt0_out & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd5 : (fsm4_out == 32'd5) ? 32'd0 : (fsm4_out == 32'd0 & lt0_out & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm4_out == 32'd4 & lt0_out & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd1 : '0;
  assign fsm4_write_en = (fsm4_out != 32'd4 & fsm4_out != 32'd0 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm4_out == 32'd0 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm4_out == 32'd4 & fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm4_out == 32'd5) ? 1'd1 : '0;
  assign incr4_left = (fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? fsm4_out : '0;
  assign incr4_right = (fsm5_out == 32'd1 & !(fsm4_out == 32'd5) & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd1 : '0;
  assign fsm5_in = (fsm5_out == 32'd1 & fsm4_out == 32'd5 & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd2 : (fsm5_out == 32'd2) ? 32'd0 : (fsm5_out == 32'd0 & j0_done & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd1 : '0;
  assign fsm5_write_en = (fsm5_out == 32'd0 & j0_done & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm5_out == 32'd1 & fsm4_out == 32'd5 & fsm6_out == 32'd1 & !(fsm5_out == 32'd2) & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm5_out == 32'd2) ? 1'd1 : '0;
  assign fsm6_in = (fsm6_out == 32'd3 & x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd4 : (fsm6_out == 32'd4 & i0_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd5 : (fsm6_out == 32'd2 & x_i0_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd3 : (fsm6_out == 32'd1 & fsm5_out == 32'd2 & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd2 : (fsm6_out == 32'd5) ? 32'd0 : (fsm6_out == 32'd0 & x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go) ? 32'd1 : '0;
  assign fsm6_write_en = (fsm6_out == 32'd0 & x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm6_out == 32'd1 & fsm5_out == 32'd2 & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm6_out == 32'd2 & x_i0_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm6_out == 32'd3 & x_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm6_out == 32'd4 & i0_done & cond_stored0_out & cond_computed0_out & !(fsm6_out == 32'd5) & fsm7_out == 32'd1 & !done_reg0_out & go | fsm6_out == 32'd5) ? 1'd1 : '0;
  assign cond_computed0_in = (cond_stored0_out & cond_computed0_out & fsm6_out == 32'd5 & fsm7_out == 32'd1 & !done_reg0_out & go | cond_computed0_out & !cond_stored0_out & fsm7_out == 32'd1 & !done_reg0_out & go) ? 1'd0 : (!cond_computed0_out & fsm7_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign cond_computed0_write_en = (!cond_computed0_out & fsm7_out == 32'd1 & !done_reg0_out & go | cond_stored0_out & cond_computed0_out & fsm6_out == 32'd5 & fsm7_out == 32'd1 & !done_reg0_out & go | cond_computed0_out & !cond_stored0_out & fsm7_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign cond_stored0_in = (!cond_computed0_out & fsm7_out == 32'd1 & !done_reg0_out & go) ? le0_out : '0;
  assign cond_stored0_write_en = (!cond_computed0_out & fsm7_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign done_reg0_in = done_reg0_out ? 1'd0 : (cond_computed0_out & !cond_stored0_out & fsm7_out == 32'd1 & !done_reg0_out & go) ? 1'd1 : '0;
  assign done_reg0_write_en = (cond_computed0_out & !cond_stored0_out & fsm7_out == 32'd1 & !done_reg0_out & go | done_reg0_out) ? 1'd1 : '0;
  assign fsm7_in = (fsm7_out == 32'd1 & done_reg0_out & go) ? 32'd2 : (fsm7_out == 32'd2) ? 32'd0 : (fsm7_out == 32'd0 & i0_done & go) ? 32'd1 : '0;
  assign fsm7_write_en = (fsm7_out == 32'd0 & i0_done & go | fsm7_out == 32'd1 & done_reg0_out & go | fsm7_out == 32'd2) ? 1'd1 : '0;
endmodule // end main