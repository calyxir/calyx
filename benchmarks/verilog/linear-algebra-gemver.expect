/* verilator lint_off PINMISSING */
/* verilator lint_off WIDTH */
module std_mem_d2
  #(parameter width = 32,
    parameter d0_size = 16,
    parameter d1_size = 16,
    parameter d0_idx_size = 4,
    parameter d1_idx_size = 4)
   (input logic [d0_idx_size-1:0] addr0,
    input logic [d1_idx_size-1:0] addr1,
    input logic [width-1:0]   write_data,
    input logic               write_en,
    input logic               clk,
    output logic [width-1:0]  read_data,
    output logic done);

  logic [width-1:0]  mem[d0_size-1:0][d1_size-1:0];

  assign read_data = mem[addr0][addr1];
  always_ff @(posedge clk) begin
    if (write_en) begin
      mem[addr0][addr1] <= write_data;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_mem_d1
  #(parameter width = 32,
    parameter size = 16,
    parameter idx_size = 4)
   (input logic [idx_size-1:0] addr0,
    input logic [width-1:0]   write_data,
    input logic               write_en,
    input logic               clk,
    output logic [width-1:0]  read_data,
    output logic done);

  logic [width-1:0]  mem[size-1:0];

  assign read_data = mem[addr0];
  always_ff @(posedge clk) begin
    if (write_en) begin
      mem[addr0] <= write_data;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (input logic                valid,
    output logic               ready,
    output logic [width - 1:0] out,
    output logic               out_read_out);
  assign out = value;
  assign ready = valid;
  assign out_read_out = valid;
endmodule

module std_le
  #(parameter width = 32)
  (input logic [width-1:0] left,
   input logic [width-1:0] right,
   output logic            out);
  assign out = left <= right;
endmodule

module std_mult
  #(parameter width = 32)
  (input logic  [width-1:0] left,
    input logic  [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left * right;
endmodule

// Component Signature
module main (
      input wire clk,
      input wire go,
      output wire done
  );
  
  // Structure wire declarations
  wire [3:0] A_addr0;
  wire [3:0] A_addr1;
  wire [31:0] A_write_data;
  wire A_write_en;
  wire A_clk;
  wire [31:0] A_read_data;
  wire A_done;
  wire [31:0] A_i_j0_in;
  wire A_i_j0_write_en;
  wire A_i_j0_clk;
  wire [31:0] A_i_j0_out;
  wire A_i_j0_done;
  wire [31:0] add0_left;
  wire [31:0] add0_right;
  wire [31:0] add0_out;
  wire [31:0] add1_left;
  wire [31:0] add1_right;
  wire [31:0] add1_out;
  wire [3:0] add10_left;
  wire [3:0] add10_right;
  wire [3:0] add10_out;
  wire [3:0] add11_left;
  wire [3:0] add11_right;
  wire [3:0] add11_out;
  wire [3:0] add2_left;
  wire [3:0] add2_right;
  wire [3:0] add2_out;
  wire [3:0] add3_left;
  wire [3:0] add3_right;
  wire [3:0] add3_out;
  wire [31:0] add4_left;
  wire [31:0] add4_right;
  wire [31:0] add4_out;
  wire [3:0] add5_left;
  wire [3:0] add5_right;
  wire [3:0] add5_out;
  wire [3:0] add6_left;
  wire [3:0] add6_right;
  wire [3:0] add6_out;
  wire [31:0] add7_left;
  wire [31:0] add7_right;
  wire [31:0] add7_out;
  wire [3:0] add8_left;
  wire [3:0] add8_right;
  wire [3:0] add8_out;
  wire [31:0] add9_left;
  wire [31:0] add9_right;
  wire [31:0] add9_out;
  wire alpha_addr0;
  wire [31:0] alpha_write_data;
  wire alpha_write_en;
  wire alpha_clk;
  wire [31:0] alpha_read_data;
  wire alpha_done;
  wire beta_addr0;
  wire [31:0] beta_write_data;
  wire beta_write_en;
  wire beta_clk;
  wire [31:0] beta_read_data;
  wire beta_done;
  wire const0_valid;
  wire [3:0] const0_out;
  wire const0_out_read_out;
  wire const0_ready;
  wire const1_valid;
  wire [3:0] const1_out;
  wire const1_out_read_out;
  wire const1_ready;
  wire const10_valid;
  wire const10_out;
  wire const10_out_read_out;
  wire const10_ready;
  wire const11_valid;
  wire [3:0] const11_out;
  wire const11_out_read_out;
  wire const11_ready;
  wire const12_valid;
  wire [3:0] const12_out;
  wire const12_out_read_out;
  wire const12_ready;
  wire const13_valid;
  wire [3:0] const13_out;
  wire const13_out_read_out;
  wire const13_ready;
  wire const14_valid;
  wire [3:0] const14_out;
  wire const14_out_read_out;
  wire const14_ready;
  wire const15_valid;
  wire [3:0] const15_out;
  wire const15_out_read_out;
  wire const15_ready;
  wire const16_valid;
  wire [3:0] const16_out;
  wire const16_out_read_out;
  wire const16_ready;
  wire const17_valid;
  wire [3:0] const17_out;
  wire const17_out_read_out;
  wire const17_ready;
  wire const18_valid;
  wire [3:0] const18_out;
  wire const18_out_read_out;
  wire const18_ready;
  wire const19_valid;
  wire [3:0] const19_out;
  wire const19_out_read_out;
  wire const19_ready;
  wire const2_valid;
  wire [3:0] const2_out;
  wire const2_out_read_out;
  wire const2_ready;
  wire const20_valid;
  wire const20_out;
  wire const20_out_read_out;
  wire const20_ready;
  wire const21_valid;
  wire [3:0] const21_out;
  wire const21_out_read_out;
  wire const21_ready;
  wire const22_valid;
  wire [3:0] const22_out;
  wire const22_out_read_out;
  wire const22_ready;
  wire const3_valid;
  wire [3:0] const3_out;
  wire const3_out_read_out;
  wire const3_ready;
  wire const4_valid;
  wire [3:0] const4_out;
  wire const4_out_read_out;
  wire const4_ready;
  wire const5_valid;
  wire [3:0] const5_out;
  wire const5_out_read_out;
  wire const5_ready;
  wire const6_valid;
  wire [3:0] const6_out;
  wire const6_out_read_out;
  wire const6_ready;
  wire const7_valid;
  wire [3:0] const7_out;
  wire const7_out_read_out;
  wire const7_ready;
  wire const8_valid;
  wire [3:0] const8_out;
  wire const8_out_read_out;
  wire const8_ready;
  wire const9_valid;
  wire [3:0] const9_out;
  wire const9_out_read_out;
  wire const9_ready;
  wire [3:0] i0_in;
  wire i0_write_en;
  wire i0_clk;
  wire [3:0] i0_out;
  wire i0_done;
  wire [3:0] i1_in;
  wire i1_write_en;
  wire i1_clk;
  wire [3:0] i1_out;
  wire i1_done;
  wire [3:0] i2_in;
  wire i2_write_en;
  wire i2_clk;
  wire [3:0] i2_out;
  wire i2_done;
  wire [3:0] i3_in;
  wire i3_write_en;
  wire i3_clk;
  wire [3:0] i3_out;
  wire i3_done;
  wire [3:0] j0_in;
  wire j0_write_en;
  wire j0_clk;
  wire [3:0] j0_out;
  wire j0_done;
  wire [3:0] j1_in;
  wire j1_write_en;
  wire j1_clk;
  wire [3:0] j1_out;
  wire j1_done;
  wire [3:0] j2_in;
  wire j2_write_en;
  wire j2_clk;
  wire [3:0] j2_out;
  wire j2_done;
  wire [3:0] le0_left;
  wire [3:0] le0_right;
  wire le0_out;
  wire [3:0] le1_left;
  wire [3:0] le1_right;
  wire le1_out;
  wire [3:0] le2_left;
  wire [3:0] le2_right;
  wire le2_out;
  wire [3:0] le3_left;
  wire [3:0] le3_right;
  wire le3_out;
  wire [3:0] le4_left;
  wire [3:0] le4_right;
  wire le4_out;
  wire [3:0] le5_left;
  wire [3:0] le5_right;
  wire le5_out;
  wire [3:0] le6_left;
  wire [3:0] le6_right;
  wire le6_out;
  wire [31:0] mult0_left;
  wire [31:0] mult0_right;
  wire [31:0] mult0_out;
  wire [31:0] mult1_left;
  wire [31:0] mult1_right;
  wire [31:0] mult1_out;
  wire [31:0] mult2_left;
  wire [31:0] mult2_right;
  wire [31:0] mult2_out;
  wire [31:0] mult3_left;
  wire [31:0] mult3_right;
  wire [31:0] mult3_out;
  wire [31:0] mult4_left;
  wire [31:0] mult4_right;
  wire [31:0] mult4_out;
  wire [31:0] mult5_left;
  wire [31:0] mult5_right;
  wire [31:0] mult5_out;
  wire [3:0] u1_addr0;
  wire [31:0] u1_write_data;
  wire u1_write_en;
  wire u1_clk;
  wire [31:0] u1_read_data;
  wire u1_done;
  wire [3:0] u2_addr0;
  wire [31:0] u2_write_data;
  wire u2_write_en;
  wire u2_clk;
  wire [31:0] u2_read_data;
  wire u2_done;
  wire [3:0] v1_addr0;
  wire [31:0] v1_write_data;
  wire v1_write_en;
  wire v1_clk;
  wire [31:0] v1_read_data;
  wire v1_done;
  wire [3:0] v2_addr0;
  wire [31:0] v2_write_data;
  wire v2_write_en;
  wire v2_clk;
  wire [31:0] v2_read_data;
  wire v2_done;
  wire [3:0] w_addr0;
  wire [31:0] w_write_data;
  wire w_write_en;
  wire w_clk;
  wire [31:0] w_read_data;
  wire w_done;
  wire [31:0] w_i0_in;
  wire w_i0_write_en;
  wire w_i0_clk;
  wire [31:0] w_i0_out;
  wire w_i0_done;
  wire [3:0] x_addr0;
  wire [31:0] x_write_data;
  wire x_write_en;
  wire x_clk;
  wire [31:0] x_read_data;
  wire x_done;
  wire [31:0] x_i0_in;
  wire x_i0_write_en;
  wire x_i0_clk;
  wire [31:0] x_i0_out;
  wire x_i0_done;
  wire [31:0] x_i1_in;
  wire x_i1_write_en;
  wire x_i1_clk;
  wire [31:0] x_i1_out;
  wire x_i1_done;
  wire [3:0] y_addr0;
  wire [31:0] y_write_data;
  wire y_write_en;
  wire y_clk;
  wire [31:0] y_read_data;
  wire y_done;
  wire [3:0] z_addr0;
  wire [31:0] z_write_data;
  wire z_write_en;
  wire z_clk;
  wire [31:0] z_read_data;
  wire z_done;
  wire [31:0] fsm0_in;
  wire fsm0_write_en;
  wire fsm0_clk;
  wire [31:0] fsm0_out;
  wire fsm0_done;
  wire cond_computed0_in;
  wire cond_computed0_write_en;
  wire cond_computed0_clk;
  wire cond_computed0_out;
  wire cond_computed0_done;
  wire cond_stored0_in;
  wire cond_stored0_write_en;
  wire cond_stored0_clk;
  wire cond_stored0_out;
  wire cond_stored0_done;
  wire done_reg0_in;
  wire done_reg0_write_en;
  wire done_reg0_clk;
  wire done_reg0_out;
  wire done_reg0_done;
  wire [31:0] fsm1_in;
  wire fsm1_write_en;
  wire fsm1_clk;
  wire [31:0] fsm1_out;
  wire fsm1_done;
  wire cond_computed1_in;
  wire cond_computed1_write_en;
  wire cond_computed1_clk;
  wire cond_computed1_out;
  wire cond_computed1_done;
  wire cond_stored1_in;
  wire cond_stored1_write_en;
  wire cond_stored1_clk;
  wire cond_stored1_out;
  wire cond_stored1_done;
  wire done_reg1_in;
  wire done_reg1_write_en;
  wire done_reg1_clk;
  wire done_reg1_out;
  wire done_reg1_done;
  wire [31:0] fsm2_in;
  wire fsm2_write_en;
  wire fsm2_clk;
  wire [31:0] fsm2_out;
  wire fsm2_done;
  wire cond_computed2_in;
  wire cond_computed2_write_en;
  wire cond_computed2_clk;
  wire cond_computed2_out;
  wire cond_computed2_done;
  wire cond_stored2_in;
  wire cond_stored2_write_en;
  wire cond_stored2_clk;
  wire cond_stored2_out;
  wire cond_stored2_done;
  wire done_reg2_in;
  wire done_reg2_write_en;
  wire done_reg2_clk;
  wire done_reg2_out;
  wire done_reg2_done;
  wire [31:0] fsm3_in;
  wire fsm3_write_en;
  wire fsm3_clk;
  wire [31:0] fsm3_out;
  wire fsm3_done;
  wire cond_computed3_in;
  wire cond_computed3_write_en;
  wire cond_computed3_clk;
  wire cond_computed3_out;
  wire cond_computed3_done;
  wire cond_stored3_in;
  wire cond_stored3_write_en;
  wire cond_stored3_clk;
  wire cond_stored3_out;
  wire cond_stored3_done;
  wire done_reg3_in;
  wire done_reg3_write_en;
  wire done_reg3_clk;
  wire done_reg3_out;
  wire done_reg3_done;
  wire [31:0] fsm4_in;
  wire fsm4_write_en;
  wire fsm4_clk;
  wire [31:0] fsm4_out;
  wire fsm4_done;
  wire cond_computed4_in;
  wire cond_computed4_write_en;
  wire cond_computed4_clk;
  wire cond_computed4_out;
  wire cond_computed4_done;
  wire cond_stored4_in;
  wire cond_stored4_write_en;
  wire cond_stored4_clk;
  wire cond_stored4_out;
  wire cond_stored4_done;
  wire done_reg4_in;
  wire done_reg4_write_en;
  wire done_reg4_clk;
  wire done_reg4_out;
  wire done_reg4_done;
  wire [31:0] fsm5_in;
  wire fsm5_write_en;
  wire fsm5_clk;
  wire [31:0] fsm5_out;
  wire fsm5_done;
  wire cond_computed5_in;
  wire cond_computed5_write_en;
  wire cond_computed5_clk;
  wire cond_computed5_out;
  wire cond_computed5_done;
  wire cond_stored5_in;
  wire cond_stored5_write_en;
  wire cond_stored5_clk;
  wire cond_stored5_out;
  wire cond_stored5_done;
  wire done_reg5_in;
  wire done_reg5_write_en;
  wire done_reg5_clk;
  wire done_reg5_out;
  wire done_reg5_done;
  wire [31:0] fsm6_in;
  wire fsm6_write_en;
  wire fsm6_clk;
  wire [31:0] fsm6_out;
  wire fsm6_done;
  wire cond_computed6_in;
  wire cond_computed6_write_en;
  wire cond_computed6_clk;
  wire cond_computed6_out;
  wire cond_computed6_done;
  wire cond_stored6_in;
  wire cond_stored6_write_en;
  wire cond_stored6_clk;
  wire cond_stored6_out;
  wire cond_stored6_done;
  wire done_reg6_in;
  wire done_reg6_write_en;
  wire done_reg6_clk;
  wire done_reg6_out;
  wire done_reg6_done;
  wire [31:0] fsm7_in;
  wire fsm7_write_en;
  wire fsm7_clk;
  wire [31:0] fsm7_out;
  wire fsm7_done;
  
  // Subcomponent Instances
  std_mem_d2 #(32, 8, 8, 4, 4) A (
      .addr0(A_addr0),
      .addr1(A_addr1),
      .write_data(A_write_data),
      .write_en(A_write_en),
      .clk(clk),
      .read_data(A_read_data),
      .done(A_done)
  );
  
  std_reg #(32) A_i_j0 (
      .in(A_i_j0_in),
      .write_en(A_i_j0_write_en),
      .clk(clk),
      .out(A_i_j0_out),
      .done(A_i_j0_done)
  );
  
  std_add #(32) add0 (
      .left(add0_left),
      .right(add0_right),
      .out(add0_out)
  );
  
  std_add #(32) add1 (
      .left(add1_left),
      .right(add1_right),
      .out(add1_out)
  );
  
  std_add #(4) add10 (
      .left(add10_left),
      .right(add10_right),
      .out(add10_out)
  );
  
  std_add #(4) add11 (
      .left(add11_left),
      .right(add11_right),
      .out(add11_out)
  );
  
  std_add #(4) add2 (
      .left(add2_left),
      .right(add2_right),
      .out(add2_out)
  );
  
  std_add #(4) add3 (
      .left(add3_left),
      .right(add3_right),
      .out(add3_out)
  );
  
  std_add #(32) add4 (
      .left(add4_left),
      .right(add4_right),
      .out(add4_out)
  );
  
  std_add #(4) add5 (
      .left(add5_left),
      .right(add5_right),
      .out(add5_out)
  );
  
  std_add #(4) add6 (
      .left(add6_left),
      .right(add6_right),
      .out(add6_out)
  );
  
  std_add #(32) add7 (
      .left(add7_left),
      .right(add7_right),
      .out(add7_out)
  );
  
  std_add #(4) add8 (
      .left(add8_left),
      .right(add8_right),
      .out(add8_out)
  );
  
  std_add #(32) add9 (
      .left(add9_left),
      .right(add9_right),
      .out(add9_out)
  );
  
  std_mem_d1 #(32, 1, 1) alpha (
      .addr0(alpha_addr0),
      .clk(clk),
      .read_data(alpha_read_data),
      .done(alpha_done)
  );
  
  std_mem_d1 #(32, 1, 1) beta (
      .addr0(beta_addr0),
      .clk(clk),
      .read_data(beta_read_data),
      .done(beta_done)
  );
  
  std_const #(4, 0) const0 (
      .out(const0_out),
      .out_read_out(const0_out_read_out),
      .ready(const0_ready)
  );
  
  std_const #(4, 7) const1 (
      .out(const1_out),
      .out_read_out(const1_out_read_out),
      .ready(const1_ready)
  );
  
  std_const #(1, 0) const10 (
      .out(const10_out),
      .out_read_out(const10_out_read_out),
      .ready(const10_ready)
  );
  
  std_const #(4, 1) const11 (
      .out(const11_out),
      .out_read_out(const11_out_read_out),
      .ready(const11_ready)
  );
  
  std_const #(4, 1) const12 (
      .out(const12_out),
      .out_read_out(const12_out_read_out),
      .ready(const12_ready)
  );
  
  std_const #(4, 0) const13 (
      .out(const13_out),
      .out_read_out(const13_out_read_out),
      .ready(const13_ready)
  );
  
  std_const #(4, 7) const14 (
      .out(const14_out),
      .out_read_out(const14_out_read_out),
      .ready(const14_ready)
  );
  
  std_const #(4, 1) const15 (
      .out(const15_out),
      .out_read_out(const15_out_read_out),
      .ready(const15_ready)
  );
  
  std_const #(4, 0) const16 (
      .out(const16_out),
      .out_read_out(const16_out_read_out),
      .ready(const16_ready)
  );
  
  std_const #(4, 7) const17 (
      .out(const17_out),
      .out_read_out(const17_out_read_out),
      .ready(const17_ready)
  );
  
  std_const #(4, 0) const18 (
      .out(const18_out),
      .out_read_out(const18_out_read_out),
      .ready(const18_ready)
  );
  
  std_const #(4, 7) const19 (
      .out(const19_out),
      .out_read_out(const19_out_read_out),
      .ready(const19_ready)
  );
  
  std_const #(4, 0) const2 (
      .out(const2_out),
      .out_read_out(const2_out_read_out),
      .ready(const2_ready)
  );
  
  std_const #(1, 0) const20 (
      .out(const20_out),
      .out_read_out(const20_out_read_out),
      .ready(const20_ready)
  );
  
  std_const #(4, 1) const21 (
      .out(const21_out),
      .out_read_out(const21_out_read_out),
      .ready(const21_ready)
  );
  
  std_const #(4, 1) const22 (
      .out(const22_out),
      .out_read_out(const22_out_read_out),
      .ready(const22_ready)
  );
  
  std_const #(4, 7) const3 (
      .out(const3_out),
      .out_read_out(const3_out_read_out),
      .ready(const3_ready)
  );
  
  std_const #(4, 1) const4 (
      .out(const4_out),
      .out_read_out(const4_out_read_out),
      .ready(const4_ready)
  );
  
  std_const #(4, 1) const5 (
      .out(const5_out),
      .out_read_out(const5_out_read_out),
      .ready(const5_ready)
  );
  
  std_const #(4, 0) const6 (
      .out(const6_out),
      .out_read_out(const6_out_read_out),
      .ready(const6_ready)
  );
  
  std_const #(4, 7) const7 (
      .out(const7_out),
      .out_read_out(const7_out_read_out),
      .ready(const7_ready)
  );
  
  std_const #(4, 0) const8 (
      .out(const8_out),
      .out_read_out(const8_out_read_out),
      .ready(const8_ready)
  );
  
  std_const #(4, 7) const9 (
      .out(const9_out),
      .out_read_out(const9_out_read_out),
      .ready(const9_ready)
  );
  
  std_reg #(4) i0 (
      .in(i0_in),
      .write_en(i0_write_en),
      .clk(clk),
      .out(i0_out),
      .done(i0_done)
  );
  
  std_reg #(4) i1 (
      .in(i1_in),
      .write_en(i1_write_en),
      .clk(clk),
      .out(i1_out),
      .done(i1_done)
  );
  
  std_reg #(4) i2 (
      .in(i2_in),
      .write_en(i2_write_en),
      .clk(clk),
      .out(i2_out),
      .done(i2_done)
  );
  
  std_reg #(4) i3 (
      .in(i3_in),
      .write_en(i3_write_en),
      .clk(clk),
      .out(i3_out),
      .done(i3_done)
  );
  
  std_reg #(4) j0 (
      .in(j0_in),
      .write_en(j0_write_en),
      .clk(clk),
      .out(j0_out),
      .done(j0_done)
  );
  
  std_reg #(4) j1 (
      .in(j1_in),
      .write_en(j1_write_en),
      .clk(clk),
      .out(j1_out),
      .done(j1_done)
  );
  
  std_reg #(4) j2 (
      .in(j2_in),
      .write_en(j2_write_en),
      .clk(clk),
      .out(j2_out),
      .done(j2_done)
  );
  
  std_le #(4) le0 (
      .left(le0_left),
      .right(le0_right),
      .out(le0_out)
  );
  
  std_le #(4) le1 (
      .left(le1_left),
      .right(le1_right),
      .out(le1_out)
  );
  
  std_le #(4) le2 (
      .left(le2_left),
      .right(le2_right),
      .out(le2_out)
  );
  
  std_le #(4) le3 (
      .left(le3_left),
      .right(le3_right),
      .out(le3_out)
  );
  
  std_le #(4) le4 (
      .left(le4_left),
      .right(le4_right),
      .out(le4_out)
  );
  
  std_le #(4) le5 (
      .left(le5_left),
      .right(le5_right),
      .out(le5_out)
  );
  
  std_le #(4) le6 (
      .left(le6_left),
      .right(le6_right),
      .out(le6_out)
  );
  
  std_mult #(32) mult0 (
      .left(mult0_left),
      .right(mult0_right),
      .out(mult0_out)
  );
  
  std_mult #(32) mult1 (
      .left(mult1_left),
      .right(mult1_right),
      .out(mult1_out)
  );
  
  std_mult #(32) mult2 (
      .left(mult2_left),
      .right(mult2_right),
      .out(mult2_out)
  );
  
  std_mult #(32) mult3 (
      .left(mult3_left),
      .right(mult3_right),
      .out(mult3_out)
  );
  
  std_mult #(32) mult4 (
      .left(mult4_left),
      .right(mult4_right),
      .out(mult4_out)
  );
  
  std_mult #(32) mult5 (
      .left(mult5_left),
      .right(mult5_right),
      .out(mult5_out)
  );
  
  std_mem_d1 #(32, 8, 4) u1 (
      .addr0(u1_addr0),
      .clk(clk),
      .read_data(u1_read_data),
      .done(u1_done)
  );
  
  std_mem_d1 #(32, 8, 4) u2 (
      .addr0(u2_addr0),
      .clk(clk),
      .read_data(u2_read_data),
      .done(u2_done)
  );
  
  std_mem_d1 #(32, 8, 4) v1 (
      .addr0(v1_addr0),
      .clk(clk),
      .read_data(v1_read_data),
      .done(v1_done)
  );
  
  std_mem_d1 #(32, 8, 4) v2 (
      .addr0(v2_addr0),
      .clk(clk),
      .read_data(v2_read_data),
      .done(v2_done)
  );
  
  std_mem_d1 #(32, 8, 4) w (
      .addr0(w_addr0),
      .write_data(w_write_data),
      .write_en(w_write_en),
      .clk(clk),
      .read_data(w_read_data),
      .done(w_done)
  );
  
  std_reg #(32) w_i0 (
      .in(w_i0_in),
      .write_en(w_i0_write_en),
      .clk(clk),
      .out(w_i0_out),
      .done(w_i0_done)
  );
  
  std_mem_d1 #(32, 8, 4) x (
      .addr0(x_addr0),
      .write_data(x_write_data),
      .write_en(x_write_en),
      .clk(clk),
      .read_data(x_read_data),
      .done(x_done)
  );
  
  std_reg #(32) x_i0 (
      .in(x_i0_in),
      .write_en(x_i0_write_en),
      .clk(clk),
      .out(x_i0_out),
      .done(x_i0_done)
  );
  
  std_reg #(32) x_i1 (
      .in(x_i1_in),
      .write_en(x_i1_write_en),
      .clk(clk),
      .out(x_i1_out),
      .done(x_i1_done)
  );
  
  std_mem_d1 #(32, 8, 4) y (
      .addr0(y_addr0),
      .clk(clk),
      .read_data(y_read_data),
      .done(y_done)
  );
  
  std_mem_d1 #(32, 8, 4) z (
      .addr0(z_addr0),
      .clk(clk),
      .read_data(z_read_data),
      .done(z_done)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  std_reg #(1) cond_computed0 (
      .in(cond_computed0_in),
      .write_en(cond_computed0_write_en),
      .clk(clk),
      .out(cond_computed0_out),
      .done(cond_computed0_done)
  );
  
  std_reg #(1) cond_stored0 (
      .in(cond_stored0_in),
      .write_en(cond_stored0_write_en),
      .clk(clk),
      .out(cond_stored0_out),
      .done(cond_stored0_done)
  );
  
  std_reg #(1) done_reg0 (
      .in(done_reg0_in),
      .write_en(done_reg0_write_en),
      .clk(clk),
      .out(done_reg0_out),
      .done(done_reg0_done)
  );
  
  std_reg #(32) fsm1 (
      .in(fsm1_in),
      .write_en(fsm1_write_en),
      .clk(clk),
      .out(fsm1_out),
      .done(fsm1_done)
  );
  
  std_reg #(1) cond_computed1 (
      .in(cond_computed1_in),
      .write_en(cond_computed1_write_en),
      .clk(clk),
      .out(cond_computed1_out),
      .done(cond_computed1_done)
  );
  
  std_reg #(1) cond_stored1 (
      .in(cond_stored1_in),
      .write_en(cond_stored1_write_en),
      .clk(clk),
      .out(cond_stored1_out),
      .done(cond_stored1_done)
  );
  
  std_reg #(1) done_reg1 (
      .in(done_reg1_in),
      .write_en(done_reg1_write_en),
      .clk(clk),
      .out(done_reg1_out),
      .done(done_reg1_done)
  );
  
  std_reg #(32) fsm2 (
      .in(fsm2_in),
      .write_en(fsm2_write_en),
      .clk(clk),
      .out(fsm2_out),
      .done(fsm2_done)
  );
  
  std_reg #(1) cond_computed2 (
      .in(cond_computed2_in),
      .write_en(cond_computed2_write_en),
      .clk(clk),
      .out(cond_computed2_out),
      .done(cond_computed2_done)
  );
  
  std_reg #(1) cond_stored2 (
      .in(cond_stored2_in),
      .write_en(cond_stored2_write_en),
      .clk(clk),
      .out(cond_stored2_out),
      .done(cond_stored2_done)
  );
  
  std_reg #(1) done_reg2 (
      .in(done_reg2_in),
      .write_en(done_reg2_write_en),
      .clk(clk),
      .out(done_reg2_out),
      .done(done_reg2_done)
  );
  
  std_reg #(32) fsm3 (
      .in(fsm3_in),
      .write_en(fsm3_write_en),
      .clk(clk),
      .out(fsm3_out),
      .done(fsm3_done)
  );
  
  std_reg #(1) cond_computed3 (
      .in(cond_computed3_in),
      .write_en(cond_computed3_write_en),
      .clk(clk),
      .out(cond_computed3_out),
      .done(cond_computed3_done)
  );
  
  std_reg #(1) cond_stored3 (
      .in(cond_stored3_in),
      .write_en(cond_stored3_write_en),
      .clk(clk),
      .out(cond_stored3_out),
      .done(cond_stored3_done)
  );
  
  std_reg #(1) done_reg3 (
      .in(done_reg3_in),
      .write_en(done_reg3_write_en),
      .clk(clk),
      .out(done_reg3_out),
      .done(done_reg3_done)
  );
  
  std_reg #(32) fsm4 (
      .in(fsm4_in),
      .write_en(fsm4_write_en),
      .clk(clk),
      .out(fsm4_out),
      .done(fsm4_done)
  );
  
  std_reg #(1) cond_computed4 (
      .in(cond_computed4_in),
      .write_en(cond_computed4_write_en),
      .clk(clk),
      .out(cond_computed4_out),
      .done(cond_computed4_done)
  );
  
  std_reg #(1) cond_stored4 (
      .in(cond_stored4_in),
      .write_en(cond_stored4_write_en),
      .clk(clk),
      .out(cond_stored4_out),
      .done(cond_stored4_done)
  );
  
  std_reg #(1) done_reg4 (
      .in(done_reg4_in),
      .write_en(done_reg4_write_en),
      .clk(clk),
      .out(done_reg4_out),
      .done(done_reg4_done)
  );
  
  std_reg #(32) fsm5 (
      .in(fsm5_in),
      .write_en(fsm5_write_en),
      .clk(clk),
      .out(fsm5_out),
      .done(fsm5_done)
  );
  
  std_reg #(1) cond_computed5 (
      .in(cond_computed5_in),
      .write_en(cond_computed5_write_en),
      .clk(clk),
      .out(cond_computed5_out),
      .done(cond_computed5_done)
  );
  
  std_reg #(1) cond_stored5 (
      .in(cond_stored5_in),
      .write_en(cond_stored5_write_en),
      .clk(clk),
      .out(cond_stored5_out),
      .done(cond_stored5_done)
  );
  
  std_reg #(1) done_reg5 (
      .in(done_reg5_in),
      .write_en(done_reg5_write_en),
      .clk(clk),
      .out(done_reg5_out),
      .done(done_reg5_done)
  );
  
  std_reg #(32) fsm6 (
      .in(fsm6_in),
      .write_en(fsm6_write_en),
      .clk(clk),
      .out(fsm6_out),
      .done(fsm6_done)
  );
  
  std_reg #(1) cond_computed6 (
      .in(cond_computed6_in),
      .write_en(cond_computed6_write_en),
      .clk(clk),
      .out(cond_computed6_out),
      .done(cond_computed6_done)
  );
  
  std_reg #(1) cond_stored6 (
      .in(cond_stored6_in),
      .write_en(cond_stored6_write_en),
      .clk(clk),
      .out(cond_stored6_out),
      .done(cond_stored6_done)
  );
  
  std_reg #(1) done_reg6 (
      .in(done_reg6_in),
      .write_en(done_reg6_write_en),
      .clk(clk),
      .out(done_reg6_out),
      .done(done_reg6_done)
  );
  
  std_reg #(32) fsm7 (
      .in(fsm7_in),
      .write_en(fsm7_write_en),
      .clk(clk),
      .out(fsm7_out),
      .done(fsm7_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      $readmemh({ DATA, "/A.dat" }, A.mem);
      $readmemh({ DATA, "/alpha.dat" }, alpha.mem);
      $readmemh({ DATA, "/beta.dat" }, beta.mem);
      $readmemh({ DATA, "/u1.dat" }, u1.mem);
      $readmemh({ DATA, "/u2.dat" }, u2.mem);
      $readmemh({ DATA, "/v1.dat" }, v1.mem);
      $readmemh({ DATA, "/v2.dat" }, v2.mem);
      $readmemh({ DATA, "/w.dat" }, w.mem);
      $readmemh({ DATA, "/x.dat" }, x.mem);
      $readmemh({ DATA, "/y.dat" }, y.mem);
      $readmemh({ DATA, "/z.dat" }, z.mem);
  end
  
   final begin
      $writememh({ DATA, "/A.out" }, A.mem);
      $writememh({ DATA, "/alpha.out" }, alpha.mem);
      $writememh({ DATA, "/beta.out" }, beta.mem);
      $writememh({ DATA, "/u1.out" }, u1.mem);
      $writememh({ DATA, "/u2.out" }, u2.mem);
      $writememh({ DATA, "/v1.out" }, v1.mem);
      $writememh({ DATA, "/v2.out" }, v2.mem);
      $writememh({ DATA, "/w.out" }, w.mem);
      $writememh({ DATA, "/x.out" }, x.mem);
      $writememh({ DATA, "/y.out" }, y.mem);
      $writememh({ DATA, "/z.out" }, z.mem);
  end
  
  // Input / output connections
  assign done = (fsm7_out == 32'd8) ? 1'd1 : '0;
  assign A_addr0 = (fsm2_out == 32'd1 & !x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? j1_out : (fsm5_out == 32'd1 & !w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? i3_out : (fsm0_out == 32'd0 & !A_i_j0_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go | fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? i0_out : '0;
  assign A_addr1 = (fsm5_out == 32'd1 & !w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? j2_out : (fsm0_out == 32'd0 & !A_i_j0_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go | fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? j0_out : (fsm2_out == 32'd1 & !x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? i1_out : '0;
  assign A_write_data = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? add1_out : '0;
  assign A_write_en = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd1 : '0;
  assign A_i_j0_in = (fsm0_out == 32'd0 & !A_i_j0_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? A_read_data : '0;
  assign A_i_j0_write_en = (fsm0_out == 32'd0 & !A_i_j0_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd1 : '0;
  assign add0_left = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? A_i_j0_out : '0;
  assign add0_right = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? mult0_out : '0;
  assign add1_left = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? add0_out : '0;
  assign add1_right = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? mult1_out : '0;
  assign add10_left = (fsm5_out == 32'd2 & !j2_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? j2_out : '0;
  assign add10_right = (fsm5_out == 32'd2 & !j2_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? const21_out : '0;
  assign add11_left = (fsm6_out == 32'd2 & !i3_done & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? i3_out : '0;
  assign add11_right = (fsm6_out == 32'd2 & !i3_done & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? const22_out : '0;
  assign add2_left = (fsm0_out == 32'd2 & !j0_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? j0_out : '0;
  assign add2_right = (fsm0_out == 32'd2 & !j0_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? const4_out : '0;
  assign add3_left = (fsm1_out == 32'd2 & !i0_done & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? i0_out : '0;
  assign add3_right = (fsm1_out == 32'd2 & !i0_done & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? const5_out : '0;
  assign add4_left = (fsm2_out == 32'd1 & !x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? x_i0_out : '0;
  assign add4_right = (fsm2_out == 32'd1 & !x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? mult3_out : '0;
  assign add5_left = (fsm2_out == 32'd2 & !j1_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? j1_out : '0;
  assign add5_right = (fsm2_out == 32'd2 & !j1_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? const11_out : '0;
  assign add6_left = (fsm3_out == 32'd2 & !i1_done & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? i1_out : '0;
  assign add6_right = (fsm3_out == 32'd2 & !i1_done & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? const12_out : '0;
  assign add7_left = (fsm4_out == 32'd1 & !x_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? x_i1_out : '0;
  assign add7_right = (fsm4_out == 32'd1 & !x_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? z_read_data : '0;
  assign add8_left = (fsm4_out == 32'd2 & !i2_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? i2_out : '0;
  assign add8_right = (fsm4_out == 32'd2 & !i2_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? const15_out : '0;
  assign add9_left = (fsm5_out == 32'd1 & !w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? w_i0_out : '0;
  assign add9_right = (fsm5_out == 32'd1 & !w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? mult5_out : '0;
  assign alpha_addr0 = (fsm5_out == 32'd1 & !w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? const20_out : '0;
  assign beta_addr0 = (fsm2_out == 32'd1 & !x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? const10_out : '0;
  assign i0_in = (fsm7_out == 32'd0 & !i0_done & go) ? const0_out : (fsm1_out == 32'd2 & !i0_done & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? add3_out : '0;
  assign i0_write_en = (fsm7_out == 32'd0 & !i0_done & go | fsm1_out == 32'd2 & !i0_done & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd1 : '0;
  assign i1_in = (fsm7_out == 32'd2 & !i1_done & go) ? const6_out : (fsm3_out == 32'd2 & !i1_done & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? add6_out : '0;
  assign i1_write_en = (fsm7_out == 32'd2 & !i1_done & go | fsm3_out == 32'd2 & !i1_done & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 1'd1 : '0;
  assign i2_in = (fsm7_out == 32'd4 & !i2_done & go) ? const13_out : (fsm4_out == 32'd2 & !i2_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? add8_out : '0;
  assign i2_write_en = (fsm7_out == 32'd4 & !i2_done & go | fsm4_out == 32'd2 & !i2_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? 1'd1 : '0;
  assign i3_in = (fsm7_out == 32'd6 & !i3_done & go) ? const16_out : (fsm6_out == 32'd2 & !i3_done & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? add11_out : '0;
  assign i3_write_en = (fsm7_out == 32'd6 & !i3_done & go | fsm6_out == 32'd2 & !i3_done & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd1 : '0;
  assign j0_in = (fsm1_out == 32'd0 & !j0_done & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? const2_out : (fsm0_out == 32'd2 & !j0_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? add2_out : '0;
  assign j0_write_en = (fsm1_out == 32'd0 & !j0_done & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go | fsm0_out == 32'd2 & !j0_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd1 : '0;
  assign j1_in = (fsm3_out == 32'd0 & !j1_done & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? const8_out : (fsm2_out == 32'd2 & !j1_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? add5_out : '0;
  assign j1_write_en = (fsm3_out == 32'd0 & !j1_done & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go | fsm2_out == 32'd2 & !j1_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 1'd1 : '0;
  assign j2_in = (fsm6_out == 32'd0 & !j2_done & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? const18_out : (fsm5_out == 32'd2 & !j2_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? add10_out : '0;
  assign j2_write_en = (fsm6_out == 32'd0 & !j2_done & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go | fsm5_out == 32'd2 & !j2_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd1 : '0;
  assign le0_left = (!cond_computed1_out & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? i0_out : '0;
  assign le0_right = (!cond_computed1_out & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? const1_out : '0;
  assign le1_left = (!cond_computed0_out & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? j0_out : '0;
  assign le1_right = (!cond_computed0_out & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? const3_out : '0;
  assign le2_left = (!cond_computed3_out & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? i1_out : '0;
  assign le2_right = (!cond_computed3_out & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? const7_out : '0;
  assign le3_left = (!cond_computed2_out & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? j1_out : '0;
  assign le3_right = (!cond_computed2_out & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? const9_out : '0;
  assign le4_left = (!cond_computed4_out & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? i2_out : '0;
  assign le4_right = (!cond_computed4_out & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? const14_out : '0;
  assign le5_left = (!cond_computed6_out & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? i3_out : '0;
  assign le5_right = (!cond_computed6_out & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? const17_out : '0;
  assign le6_left = (!cond_computed5_out & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? j2_out : '0;
  assign le6_right = (!cond_computed5_out & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? const19_out : '0;
  assign mult0_left = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? u1_read_data : '0;
  assign mult0_right = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? v1_read_data : '0;
  assign mult1_left = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? u2_read_data : '0;
  assign mult1_right = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? v2_read_data : '0;
  assign mult2_left = (fsm2_out == 32'd1 & !x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? beta_read_data : '0;
  assign mult2_right = (fsm2_out == 32'd1 & !x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? A_read_data : '0;
  assign mult3_left = (fsm2_out == 32'd1 & !x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? mult2_out : '0;
  assign mult3_right = (fsm2_out == 32'd1 & !x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? y_read_data : '0;
  assign mult4_left = (fsm5_out == 32'd1 & !w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? alpha_read_data : '0;
  assign mult4_right = (fsm5_out == 32'd1 & !w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? A_read_data : '0;
  assign mult5_left = (fsm5_out == 32'd1 & !w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? mult4_out : '0;
  assign mult5_right = (fsm5_out == 32'd1 & !w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? x_read_data : '0;
  assign u1_addr0 = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? i0_out : '0;
  assign u2_addr0 = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? i0_out : '0;
  assign v1_addr0 = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? j0_out : '0;
  assign v2_addr0 = (fsm0_out == 32'd1 & !A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? j0_out : '0;
  assign w_addr0 = (fsm5_out == 32'd0 & !w_i0_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go | fsm5_out == 32'd1 & !w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? i3_out : '0;
  assign w_write_data = (fsm5_out == 32'd1 & !w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? add9_out : '0;
  assign w_write_en = (fsm5_out == 32'd1 & !w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd1 : '0;
  assign w_i0_in = (fsm5_out == 32'd0 & !w_i0_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? w_read_data : '0;
  assign w_i0_write_en = (fsm5_out == 32'd0 & !w_i0_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd1 : '0;
  assign x_addr0 = (fsm5_out == 32'd1 & !w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? j2_out : (fsm4_out == 32'd0 & !x_i1_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go | fsm4_out == 32'd1 & !x_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? i2_out : (fsm2_out == 32'd0 & !x_i0_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go | fsm2_out == 32'd1 & !x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? i1_out : '0;
  assign x_write_data = (fsm4_out == 32'd1 & !x_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? add7_out : (fsm2_out == 32'd1 & !x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? add4_out : '0;
  assign x_write_en = (fsm2_out == 32'd1 & !x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go | fsm4_out == 32'd1 & !x_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? 1'd1 : '0;
  assign x_i0_in = (fsm2_out == 32'd0 & !x_i0_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? x_read_data : '0;
  assign x_i0_write_en = (fsm2_out == 32'd0 & !x_i0_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 1'd1 : '0;
  assign x_i1_in = (fsm4_out == 32'd0 & !x_i1_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? x_read_data : '0;
  assign x_i1_write_en = (fsm4_out == 32'd0 & !x_i1_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? 1'd1 : '0;
  assign y_addr0 = (fsm2_out == 32'd1 & !x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? j1_out : '0;
  assign z_addr0 = (fsm4_out == 32'd1 & !x_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? i2_out : '0;
  assign fsm0_in = (fsm0_out == 32'd2 & j0_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 32'd3 : (fsm0_out == 32'd1 & A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 32'd2 : (fsm0_out == 32'd0 & A_i_j0_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 32'd1 : (fsm0_out == 32'd3) ? 32'd0 : '0;
  assign fsm0_write_en = (fsm0_out == 32'd0 & A_i_j0_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go | fsm0_out == 32'd1 & A_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go | fsm0_out == 32'd2 & j0_done & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go | fsm0_out == 32'd3) ? 1'd1 : '0;
  assign cond_computed0_in = (cond_stored0_out & cond_computed0_out & fsm0_out == 32'd3 & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go | cond_computed0_out & !cond_stored0_out & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd0 : (!cond_computed0_out & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd1 : '0;
  assign cond_computed0_write_en = (!cond_computed0_out & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go | cond_stored0_out & cond_computed0_out & fsm0_out == 32'd3 & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go | cond_computed0_out & !cond_stored0_out & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd1 : '0;
  assign cond_stored0_in = (!cond_computed0_out & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? le1_out : '0;
  assign cond_stored0_write_en = (!cond_computed0_out & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd1 : '0;
  assign done_reg0_in = (done_reg0_out) ? 1'd0 : (cond_computed0_out & !cond_stored0_out & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd1 : '0;
  assign done_reg0_write_en = (cond_computed0_out & !cond_stored0_out & fsm1_out == 32'd1 & !(done_reg0_out) & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go | done_reg0_out) ? 1'd1 : '0;
  assign fsm1_in = (fsm1_out == 32'd2 & i0_done & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 32'd3 : (fsm1_out == 32'd1 & done_reg0_out & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 32'd2 : (fsm1_out == 32'd0 & j0_done & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 32'd1 : (fsm1_out == 32'd3) ? 32'd0 : '0;
  assign fsm1_write_en = (fsm1_out == 32'd0 & j0_done & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go | fsm1_out == 32'd1 & done_reg0_out & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go | fsm1_out == 32'd2 & i0_done & cond_stored1_out & cond_computed1_out & !(fsm1_out == 32'd3) & fsm7_out == 32'd1 & !(done_reg1_out) & go | fsm1_out == 32'd3) ? 1'd1 : '0;
  assign cond_computed1_in = (cond_stored1_out & cond_computed1_out & fsm1_out == 32'd3 & fsm7_out == 32'd1 & !(done_reg1_out) & go | cond_computed1_out & !cond_stored1_out & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd0 : (!cond_computed1_out & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd1 : '0;
  assign cond_computed1_write_en = (!cond_computed1_out & fsm7_out == 32'd1 & !(done_reg1_out) & go | cond_stored1_out & cond_computed1_out & fsm1_out == 32'd3 & fsm7_out == 32'd1 & !(done_reg1_out) & go | cond_computed1_out & !cond_stored1_out & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd1 : '0;
  assign cond_stored1_in = (!cond_computed1_out & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? le0_out : '0;
  assign cond_stored1_write_en = (!cond_computed1_out & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd1 : '0;
  assign done_reg1_in = (done_reg1_out) ? 1'd0 : (cond_computed1_out & !cond_stored1_out & fsm7_out == 32'd1 & !(done_reg1_out) & go) ? 1'd1 : '0;
  assign done_reg1_write_en = (cond_computed1_out & !cond_stored1_out & fsm7_out == 32'd1 & !(done_reg1_out) & go | done_reg1_out) ? 1'd1 : '0;
  assign fsm2_in = (fsm2_out == 32'd2 & j1_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 32'd3 : (fsm2_out == 32'd1 & x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 32'd2 : (fsm2_out == 32'd0 & x_i0_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 32'd1 : (fsm2_out == 32'd3) ? 32'd0 : '0;
  assign fsm2_write_en = (fsm2_out == 32'd0 & x_i0_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go | fsm2_out == 32'd1 & x_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go | fsm2_out == 32'd2 & j1_done & cond_stored2_out & cond_computed2_out & !(fsm2_out == 32'd3) & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go | fsm2_out == 32'd3) ? 1'd1 : '0;
  assign cond_computed2_in = (cond_stored2_out & cond_computed2_out & fsm2_out == 32'd3 & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go | cond_computed2_out & !cond_stored2_out & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 1'd0 : (!cond_computed2_out & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 1'd1 : '0;
  assign cond_computed2_write_en = (!cond_computed2_out & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go | cond_stored2_out & cond_computed2_out & fsm2_out == 32'd3 & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go | cond_computed2_out & !cond_stored2_out & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 1'd1 : '0;
  assign cond_stored2_in = (!cond_computed2_out & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? le3_out : '0;
  assign cond_stored2_write_en = (!cond_computed2_out & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 1'd1 : '0;
  assign done_reg2_in = (done_reg2_out) ? 1'd0 : (cond_computed2_out & !cond_stored2_out & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 1'd1 : '0;
  assign done_reg2_write_en = (cond_computed2_out & !cond_stored2_out & fsm3_out == 32'd1 & !(done_reg2_out) & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go | done_reg2_out) ? 1'd1 : '0;
  assign fsm3_in = (fsm3_out == 32'd2 & i1_done & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 32'd3 : (fsm3_out == 32'd1 & done_reg2_out & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 32'd2 : (fsm3_out == 32'd0 & j1_done & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 32'd1 : (fsm3_out == 32'd3) ? 32'd0 : '0;
  assign fsm3_write_en = (fsm3_out == 32'd0 & j1_done & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go | fsm3_out == 32'd1 & done_reg2_out & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go | fsm3_out == 32'd2 & i1_done & cond_stored3_out & cond_computed3_out & !(fsm3_out == 32'd3) & fsm7_out == 32'd3 & !(done_reg3_out) & go | fsm3_out == 32'd3) ? 1'd1 : '0;
  assign cond_computed3_in = (cond_stored3_out & cond_computed3_out & fsm3_out == 32'd3 & fsm7_out == 32'd3 & !(done_reg3_out) & go | cond_computed3_out & !cond_stored3_out & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 1'd0 : (!cond_computed3_out & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 1'd1 : '0;
  assign cond_computed3_write_en = (!cond_computed3_out & fsm7_out == 32'd3 & !(done_reg3_out) & go | cond_stored3_out & cond_computed3_out & fsm3_out == 32'd3 & fsm7_out == 32'd3 & !(done_reg3_out) & go | cond_computed3_out & !cond_stored3_out & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 1'd1 : '0;
  assign cond_stored3_in = (!cond_computed3_out & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? le2_out : '0;
  assign cond_stored3_write_en = (!cond_computed3_out & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 1'd1 : '0;
  assign done_reg3_in = (done_reg3_out) ? 1'd0 : (cond_computed3_out & !cond_stored3_out & fsm7_out == 32'd3 & !(done_reg3_out) & go) ? 1'd1 : '0;
  assign done_reg3_write_en = (cond_computed3_out & !cond_stored3_out & fsm7_out == 32'd3 & !(done_reg3_out) & go | done_reg3_out) ? 1'd1 : '0;
  assign fsm4_in = (fsm4_out == 32'd2 & i2_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? 32'd3 : (fsm4_out == 32'd1 & x_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? 32'd2 : (fsm4_out == 32'd0 & x_i1_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? 32'd1 : (fsm4_out == 32'd3) ? 32'd0 : '0;
  assign fsm4_write_en = (fsm4_out == 32'd0 & x_i1_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go | fsm4_out == 32'd1 & x_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go | fsm4_out == 32'd2 & i2_done & cond_stored4_out & cond_computed4_out & !(fsm4_out == 32'd3) & fsm7_out == 32'd5 & !(done_reg4_out) & go | fsm4_out == 32'd3) ? 1'd1 : '0;
  assign cond_computed4_in = (cond_stored4_out & cond_computed4_out & fsm4_out == 32'd3 & fsm7_out == 32'd5 & !(done_reg4_out) & go | cond_computed4_out & !cond_stored4_out & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? 1'd0 : (!cond_computed4_out & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? 1'd1 : '0;
  assign cond_computed4_write_en = (!cond_computed4_out & fsm7_out == 32'd5 & !(done_reg4_out) & go | cond_stored4_out & cond_computed4_out & fsm4_out == 32'd3 & fsm7_out == 32'd5 & !(done_reg4_out) & go | cond_computed4_out & !cond_stored4_out & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? 1'd1 : '0;
  assign cond_stored4_in = (!cond_computed4_out & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? le4_out : '0;
  assign cond_stored4_write_en = (!cond_computed4_out & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? 1'd1 : '0;
  assign done_reg4_in = (done_reg4_out) ? 1'd0 : (cond_computed4_out & !cond_stored4_out & fsm7_out == 32'd5 & !(done_reg4_out) & go) ? 1'd1 : '0;
  assign done_reg4_write_en = (cond_computed4_out & !cond_stored4_out & fsm7_out == 32'd5 & !(done_reg4_out) & go | done_reg4_out) ? 1'd1 : '0;
  assign fsm5_in = (fsm5_out == 32'd2 & j2_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 32'd3 : (fsm5_out == 32'd1 & w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 32'd2 : (fsm5_out == 32'd0 & w_i0_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 32'd1 : (fsm5_out == 32'd3) ? 32'd0 : '0;
  assign fsm5_write_en = (fsm5_out == 32'd0 & w_i0_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go | fsm5_out == 32'd1 & w_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go | fsm5_out == 32'd2 & j2_done & cond_stored5_out & cond_computed5_out & !(fsm5_out == 32'd3) & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go | fsm5_out == 32'd3) ? 1'd1 : '0;
  assign cond_computed5_in = (cond_stored5_out & cond_computed5_out & fsm5_out == 32'd3 & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go | cond_computed5_out & !cond_stored5_out & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd0 : (!cond_computed5_out & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd1 : '0;
  assign cond_computed5_write_en = (!cond_computed5_out & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go | cond_stored5_out & cond_computed5_out & fsm5_out == 32'd3 & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go | cond_computed5_out & !cond_stored5_out & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd1 : '0;
  assign cond_stored5_in = (!cond_computed5_out & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? le6_out : '0;
  assign cond_stored5_write_en = (!cond_computed5_out & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd1 : '0;
  assign done_reg5_in = (done_reg5_out) ? 1'd0 : (cond_computed5_out & !cond_stored5_out & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd1 : '0;
  assign done_reg5_write_en = (cond_computed5_out & !cond_stored5_out & fsm6_out == 32'd1 & !(done_reg5_out) & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go | done_reg5_out) ? 1'd1 : '0;
  assign fsm6_in = (fsm6_out == 32'd2 & i3_done & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 32'd3 : (fsm6_out == 32'd1 & done_reg5_out & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 32'd2 : (fsm6_out == 32'd0 & j2_done & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 32'd1 : (fsm6_out == 32'd3) ? 32'd0 : '0;
  assign fsm6_write_en = (fsm6_out == 32'd0 & j2_done & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go | fsm6_out == 32'd1 & done_reg5_out & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go | fsm6_out == 32'd2 & i3_done & cond_stored6_out & cond_computed6_out & !(fsm6_out == 32'd3) & fsm7_out == 32'd7 & !(done_reg6_out) & go | fsm6_out == 32'd3) ? 1'd1 : '0;
  assign cond_computed6_in = (cond_stored6_out & cond_computed6_out & fsm6_out == 32'd3 & fsm7_out == 32'd7 & !(done_reg6_out) & go | cond_computed6_out & !cond_stored6_out & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd0 : (!cond_computed6_out & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd1 : '0;
  assign cond_computed6_write_en = (!cond_computed6_out & fsm7_out == 32'd7 & !(done_reg6_out) & go | cond_stored6_out & cond_computed6_out & fsm6_out == 32'd3 & fsm7_out == 32'd7 & !(done_reg6_out) & go | cond_computed6_out & !cond_stored6_out & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd1 : '0;
  assign cond_stored6_in = (!cond_computed6_out & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? le5_out : '0;
  assign cond_stored6_write_en = (!cond_computed6_out & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd1 : '0;
  assign done_reg6_in = (done_reg6_out) ? 1'd0 : (cond_computed6_out & !cond_stored6_out & fsm7_out == 32'd7 & !(done_reg6_out) & go) ? 1'd1 : '0;
  assign done_reg6_write_en = (cond_computed6_out & !cond_stored6_out & fsm7_out == 32'd7 & !(done_reg6_out) & go | done_reg6_out) ? 1'd1 : '0;
  assign fsm7_in = (fsm7_out == 32'd6 & i3_done & go) ? 32'd7 : (fsm7_out == 32'd5 & done_reg4_out & go) ? 32'd6 : (fsm7_out == 32'd4 & i2_done & go) ? 32'd5 : (fsm7_out == 32'd3 & done_reg3_out & go) ? 32'd4 : (fsm7_out == 32'd2 & i1_done & go) ? 32'd3 : (fsm7_out == 32'd1 & done_reg1_out & go) ? 32'd2 : (fsm7_out == 32'd0 & i0_done & go) ? 32'd1 : (fsm7_out == 32'd7 & done_reg6_out & go) ? 32'd8 : (fsm7_out == 32'd8) ? 32'd0 : '0;
  assign fsm7_write_en = (fsm7_out == 32'd0 & i0_done & go | fsm7_out == 32'd1 & done_reg1_out & go | fsm7_out == 32'd2 & i1_done & go | fsm7_out == 32'd3 & done_reg3_out & go | fsm7_out == 32'd4 & i2_done & go | fsm7_out == 32'd5 & done_reg4_out & go | fsm7_out == 32'd6 & i3_done & go | fsm7_out == 32'd7 & done_reg6_out & go | fsm7_out == 32'd8) ? 1'd1 : '0;
endmodule // end main