/* verilator lint_off PINMISSING */
/* verilator lint_off WIDTH */
module std_mem_d1
  #(parameter width = 32,
    parameter size = 16,
    parameter idx_size = 4)
   (input logic [idx_size-1:0] addr0,
    input logic [width-1:0]   write_data,
    input logic               write_en,
    input logic               clk,
    output logic [width-1:0]  read_data,
    output logic done);

  logic [width-1:0]  mem[size-1:0];

  assign read_data = mem[addr0];
  always_ff @(posedge clk) begin
    if (write_en) begin
      mem[addr0] <= write_data;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (input logic                valid,
    output logic               ready,
    output logic [width - 1:0] out,
    output logic               out_read_out);
  assign out = value;
  assign ready = valid;
  assign out_read_out = valid;
endmodule

module std_le
  #(parameter width = 32)
  (input logic [width-1:0] left,
   input logic [width-1:0] right,
   output logic            out);
  assign out = left <= right;
endmodule

module std_mult
  #(parameter width = 32)
  (input logic  [width-1:0] left,
    input logic  [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left * right;
endmodule

// Component Signature
module main (
      input wire clk,
      input wire go,
      output wire done
  );
  
  // Structure wire declarations
  wire [3:0] A_addr0;
  wire [31:0] A_write_data;
  wire A_write_en;
  wire A_clk;
  wire [31:0] A_read_data;
  wire A_done;
  wire [3:0] B_addr0;
  wire [31:0] B_write_data;
  wire B_write_en;
  wire B_clk;
  wire [31:0] B_read_data;
  wire B_done;
  wire [31:0] add0_left;
  wire [31:0] add0_right;
  wire [31:0] add0_out;
  wire [3:0] add1_left;
  wire [3:0] add1_right;
  wire [3:0] add1_out;
  wire const0_valid;
  wire [31:0] const0_out;
  wire const0_out_read_out;
  wire const0_ready;
  wire const1_valid;
  wire [3:0] const1_out;
  wire const1_out_read_out;
  wire const1_ready;
  wire const2_valid;
  wire [3:0] const2_out;
  wire const2_out_read_out;
  wire const2_ready;
  wire const3_valid;
  wire [3:0] const3_out;
  wire const3_out_read_out;
  wire const3_ready;
  wire [31:0] dot0_in;
  wire dot0_write_en;
  wire dot0_clk;
  wire [31:0] dot0_out;
  wire dot0_done;
  wire [3:0] i0_in;
  wire i0_write_en;
  wire i0_clk;
  wire [3:0] i0_out;
  wire i0_done;
  wire [3:0] le0_left;
  wire [3:0] le0_right;
  wire le0_out;
  wire [31:0] mult0_left;
  wire [31:0] mult0_right;
  wire [31:0] mult0_out;
  wire [31:0] v0_in;
  wire v0_write_en;
  wire v0_clk;
  wire [31:0] v0_out;
  wire v0_done;
  wire [31:0] fsm0_in;
  wire fsm0_write_en;
  wire fsm0_clk;
  wire [31:0] fsm0_out;
  wire fsm0_done;
  wire [31:0] incr0_left;
  wire [31:0] incr0_right;
  wire [31:0] incr0_out;
  wire cond_computed0_in;
  wire cond_computed0_write_en;
  wire cond_computed0_clk;
  wire cond_computed0_out;
  wire cond_computed0_done;
  wire cond_stored0_in;
  wire cond_stored0_write_en;
  wire cond_stored0_clk;
  wire cond_stored0_out;
  wire cond_stored0_done;
  wire done_reg0_in;
  wire done_reg0_write_en;
  wire done_reg0_clk;
  wire done_reg0_out;
  wire done_reg0_done;
  wire [31:0] fsm1_in;
  wire fsm1_write_en;
  wire fsm1_clk;
  wire [31:0] fsm1_out;
  wire fsm1_done;
  
  // Subcomponent Instances
  std_mem_d1 #(32, 8, 4) A (
      .addr0(A_addr0),
      .clk(clk),
      .read_data(A_read_data),
      .done(A_done)
  );
  
  std_mem_d1 #(32, 8, 4) B (
      .addr0(B_addr0),
      .clk(clk),
      .read_data(B_read_data),
      .done(B_done)
  );
  
  std_add #(32) add0 (
      .left(add0_left),
      .right(add0_right),
      .out(add0_out)
  );
  
  std_add #(4) add1 (
      .left(add1_left),
      .right(add1_right),
      .out(add1_out)
  );
  
  std_const #(32, 0) const0 (
      .out(const0_out),
      .out_read_out(const0_out_read_out),
      .ready(const0_ready)
  );
  
  std_const #(4, 0) const1 (
      .out(const1_out),
      .out_read_out(const1_out_read_out),
      .ready(const1_ready)
  );
  
  std_const #(4, 7) const2 (
      .out(const2_out),
      .out_read_out(const2_out_read_out),
      .ready(const2_ready)
  );
  
  std_const #(4, 1) const3 (
      .out(const3_out),
      .out_read_out(const3_out_read_out),
      .ready(const3_ready)
  );
  
  std_reg #(32) dot0 (
      .in(dot0_in),
      .write_en(dot0_write_en),
      .clk(clk),
      .out(dot0_out),
      .done(dot0_done)
  );
  
  std_reg #(4) i0 (
      .in(i0_in),
      .write_en(i0_write_en),
      .clk(clk),
      .out(i0_out),
      .done(i0_done)
  );
  
  std_le #(4) le0 (
      .left(le0_left),
      .right(le0_right),
      .out(le0_out)
  );
  
  std_mult #(32) mult0 (
      .left(mult0_left),
      .right(mult0_right),
      .out(mult0_out)
  );
  
  std_reg #(32) v0 (
      .in(v0_in),
      .write_en(v0_write_en),
      .clk(clk),
      .out(v0_out),
      .done(v0_done)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  std_add #(32) incr0 (
      .left(incr0_left),
      .right(incr0_right),
      .out(incr0_out)
  );
  
  std_reg #(1) cond_computed0 (
      .in(cond_computed0_in),
      .write_en(cond_computed0_write_en),
      .clk(clk),
      .out(cond_computed0_out),
      .done(cond_computed0_done)
  );
  
  std_reg #(1) cond_stored0 (
      .in(cond_stored0_in),
      .write_en(cond_stored0_write_en),
      .clk(clk),
      .out(cond_stored0_out),
      .done(cond_stored0_done)
  );
  
  std_reg #(1) done_reg0 (
      .in(done_reg0_in),
      .write_en(done_reg0_write_en),
      .clk(clk),
      .out(done_reg0_out),
      .done(done_reg0_done)
  );
  
  std_reg #(32) fsm1 (
      .in(fsm1_in),
      .write_en(fsm1_write_en),
      .clk(clk),
      .out(fsm1_out),
      .done(fsm1_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      $readmemh({ DATA, "/A.dat" }, A.mem);
      $readmemh({ DATA, "/B.dat" }, B.mem);
  end
  
   final begin
      $writememh({ DATA, "/A.out" }, A.mem);
      $writememh({ DATA, "/B.out" }, B.mem);
  end
  
  // Input / output connections
  assign done = (fsm1_out == 32'd3) ? 1'd1 : '0;
  assign A_addr0 = (fsm0_out == 32'd0 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? i0_out : '0;
  assign B_addr0 = (fsm0_out == 32'd0 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? i0_out : '0;
  assign add0_left = (fsm0_out == 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? dot0_out : '0;
  assign add0_right = (fsm0_out == 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? v0_out : '0;
  assign add1_left = (fsm0_out == 32'd2 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? i0_out : '0;
  assign add1_right = (fsm0_out == 32'd2 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? const3_out : '0;
  assign dot0_in = (fsm1_out == 32'd0 & !dot0_done & go) ? const0_out : (fsm0_out == 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? add0_out : '0;
  assign dot0_write_en = (fsm1_out == 32'd0 & !dot0_done & go | fsm0_out == 32'd1 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? 1'd1 : '0;
  assign i0_in = (fsm1_out == 32'd1 & !i0_done & go) ? const1_out : (fsm0_out == 32'd2 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? add1_out : '0;
  assign i0_write_en = (fsm1_out == 32'd1 & !i0_done & go | fsm0_out == 32'd2 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? 1'd1 : '0;
  assign le0_left = (!cond_computed0_out & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? i0_out : '0;
  assign le0_right = (!cond_computed0_out & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? const2_out : '0;
  assign mult0_left = (fsm0_out == 32'd0 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? A_read_data : '0;
  assign mult0_right = (fsm0_out == 32'd0 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? B_read_data : '0;
  assign v0_in = (fsm0_out == 32'd0 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? mult0_out : '0;
  assign v0_write_en = (fsm0_out == 32'd0 & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? 1'd1 : '0;
  assign fsm0_in = (!(fsm0_out == 32'd3) & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? incr0_out : (fsm0_out == 32'd3) ? 32'd0 : '0;
  assign fsm0_write_en = (!(fsm0_out == 32'd3) & cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go | fsm0_out == 32'd3) ? 1'd1 : '0;
  assign incr0_left = (cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? 32'd1 : '0;
  assign incr0_right = (cond_stored0_out & cond_computed0_out & !(fsm0_out == 32'd3) & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? fsm0_out : '0;
  assign cond_computed0_in = (cond_stored0_out & cond_computed0_out & fsm0_out == 32'd3 & fsm1_out == 32'd2 & !(done_reg0_out) & go | cond_computed0_out & !cond_stored0_out & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? 1'd0 : (!cond_computed0_out & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? 1'd1 : '0;
  assign cond_computed0_write_en = (!cond_computed0_out & fsm1_out == 32'd2 & !(done_reg0_out) & go | cond_stored0_out & cond_computed0_out & fsm0_out == 32'd3 & fsm1_out == 32'd2 & !(done_reg0_out) & go | cond_computed0_out & !cond_stored0_out & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? 1'd1 : '0;
  assign cond_stored0_in = (!cond_computed0_out & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? le0_out : '0;
  assign cond_stored0_write_en = (!cond_computed0_out & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? 1'd1 : '0;
  assign done_reg0_in = (done_reg0_out) ? 1'd0 : (cond_computed0_out & !cond_stored0_out & fsm1_out == 32'd2 & !(done_reg0_out) & go) ? 1'd1 : '0;
  assign done_reg0_write_en = (cond_computed0_out & !cond_stored0_out & fsm1_out == 32'd2 & !(done_reg0_out) & go | done_reg0_out) ? 1'd1 : '0;
  assign fsm1_in = (fsm1_out == 32'd2 & done_reg0_out & go) ? 32'd3 : (fsm1_out == 32'd1 & i0_done & go) ? 32'd2 : (fsm1_out == 32'd0 & dot0_done & go) ? 32'd1 : (fsm1_out == 32'd3) ? 32'd0 : '0;
  assign fsm1_write_en = (fsm1_out == 32'd0 & dot0_done & go | fsm1_out == 32'd1 & i0_done & go | fsm1_out == 32'd2 & done_reg0_out & go | fsm1_out == 32'd3) ? 1'd1 : '0;
endmodule // end main