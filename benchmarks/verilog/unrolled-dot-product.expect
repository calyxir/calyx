/* verilator lint_off WIDTH */
module std_mem_d1
  #(parameter width = 32,
    parameter size = 16,
    parameter idx_size = 4)
   (input logic [idx_size-1:0] addr0,
    input logic [width-1:0]   write_data,
    input logic               write_en,
    input logic               clk,
    output logic [width-1:0]  read_data,
    output logic done);

  logic [width-1:0]  mem[size-1:0];

  assign read_data = mem[addr0];
  always_ff @(posedge clk) begin
    if (write_en) begin
      mem[addr0] <= write_data;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_reg
  #(parameter width = 32)
   (input wire [width-1:0] in,
    input wire write_en,
    input wire clk,
    // output
    output logic [width - 1:0] out,
    output logic done);

  always_ff @(posedge clk) begin
    if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else
      done <= 1'd0;
  end
endmodule

module std_add
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left + right;
endmodule

module std_and
  #(parameter width = 32)
  (input logic  [width-1:0] left,
    input logic  [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left & right;
endmodule

module std_const
  #(parameter width = 32,
    parameter value = 0)
   (output logic [width - 1:0] out);
  assign out = value;
endmodule

module std_eq
  #(parameter width = 32)
  (input logic [width-1:0] left,
    input logic [width-1:0] right,
    output logic            out);
  assign out = left == right;
endmodule

module std_le
  #(parameter width = 32)
  (input logic [width-1:0] left,
   input logic [width-1:0] right,
   output logic            out);
  assign out = left <= right;
endmodule

module std_mult
  #(parameter width = 32)
  (input logic  [width-1:0] left,
    input logic  [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left * right;
endmodule

module std_rsh
  #(parameter width = 32)
  (input  logic [width-1:0] left,
    input  logic [width-1:0] right,
    output logic [width-1:0] out);
  assign out = left >> right;
endmodule

module std_slice
  #(parameter IN_WIDTH = 32,
    parameter OUT_WIDTH = 32)
  (input  logic [IN_WIDTH-1:0] in,
   output logic [OUT_WIDTH-1:0] out);
  assign out = in[OUT_WIDTH-1:0];
endmodule

// Component Signature
module main (
      input wire go,
      input wire clk,
      output wire done
  );
  
  // Structure wire declarations
  wire [31:0] v_10_in;
  wire v_10_write_en;
  wire v_10_clk;
  wire [31:0] v_10_out;
  wire v_10_done;
  wire [31:0] v_00_in;
  wire v_00_write_en;
  wire v_00_clk;
  wire [31:0] v_00_out;
  wire v_00_done;
  wire [2:0] slice7_in;
  wire [1:0] slice7_out;
  wire [2:0] slice6_in;
  wire [1:0] slice6_out;
  wire [2:0] slice5_in;
  wire [1:0] slice5_out;
  wire [2:0] slice4_in;
  wire [1:0] slice4_out;
  wire [2:0] slice3_in;
  wire [1:0] slice3_out;
  wire [2:0] slice2_in;
  wire [1:0] slice2_out;
  wire [2:0] slice1_in;
  wire [1:0] slice1_out;
  wire [2:0] slice0_in;
  wire [1:0] slice0_out;
  wire [2:0] rsh3_left;
  wire [2:0] rsh3_right;
  wire [2:0] rsh3_out;
  wire [2:0] rsh2_left;
  wire [2:0] rsh2_right;
  wire [2:0] rsh2_out;
  wire [2:0] rsh1_left;
  wire [2:0] rsh1_right;
  wire [2:0] rsh1_out;
  wire [2:0] rsh0_left;
  wire [2:0] rsh0_right;
  wire [2:0] rsh0_out;
  wire result0_addr0;
  wire [31:0] result0_write_data;
  wire result0_write_en;
  wire result0_clk;
  wire [31:0] result0_read_data;
  wire result0_done;
  wire [31:0] mult1_left;
  wire [31:0] mult1_right;
  wire [31:0] mult1_out;
  wire [31:0] mult0_left;
  wire [31:0] mult0_right;
  wire [31:0] mult0_out;
  wire [2:0] le1_left;
  wire [2:0] le1_right;
  wire le1_out;
  wire [2:0] le0_left;
  wire [2:0] le0_right;
  wire le0_out;
  wire [2:0] i1_in;
  wire i1_write_en;
  wire i1_clk;
  wire [2:0] i1_out;
  wire i1_done;
  wire [2:0] i0_in;
  wire i0_write_en;
  wire i0_clk;
  wire [2:0] i0_out;
  wire i0_done;
  wire [2:0] eq3_left;
  wire [2:0] eq3_right;
  wire eq3_out;
  wire [2:0] eq2_left;
  wire [2:0] eq2_right;
  wire eq2_out;
  wire [2:0] eq1_left;
  wire [2:0] eq1_right;
  wire eq1_out;
  wire [2:0] eq0_left;
  wire [2:0] eq0_right;
  wire eq0_out;
  wire [2:0] const9_out;
  wire [2:0] const8_out;
  wire [2:0] const7_out;
  wire [2:0] const6_out;
  wire [2:0] const5_out;
  wire [2:0] const4_out;
  wire [2:0] const3_out;
  wire [2:0] const2_out;
  wire [2:0] const19_out;
  wire const18_out;
  wire const17_out;
  wire [2:0] const16_out;
  wire [2:0] const15_out;
  wire [2:0] const14_out;
  wire [2:0] const13_out;
  wire [2:0] const12_out;
  wire [2:0] const11_out;
  wire [2:0] const10_out;
  wire [2:0] const1_out;
  wire [2:0] const0_out;
  wire [31:0] b_read0_10_in;
  wire b_read0_10_write_en;
  wire b_read0_10_clk;
  wire [31:0] b_read0_10_out;
  wire b_read0_10_done;
  wire [31:0] b_read0_00_in;
  wire b_read0_00_write_en;
  wire b_read0_00_clk;
  wire [31:0] b_read0_00_out;
  wire b_read0_00_done;
  wire [31:0] b_int_read0_0_in;
  wire b_int_read0_0_write_en;
  wire b_int_read0_0_clk;
  wire [31:0] b_int_read0_0_out;
  wire b_int_read0_0_done;
  wire [2:0] b_int0_addr0;
  wire [31:0] b_int0_write_data;
  wire b_int0_write_en;
  wire b_int0_clk;
  wire [31:0] b_int0_read_data;
  wire b_int0_done;
  wire [1:0] b1_addr0;
  wire [31:0] b1_write_data;
  wire b1_write_en;
  wire b1_clk;
  wire [31:0] b1_read_data;
  wire b1_done;
  wire [1:0] b0_addr0;
  wire [31:0] b0_write_data;
  wire b0_write_en;
  wire b0_clk;
  wire [31:0] b0_read_data;
  wire b0_done;
  wire [2:0] and3_left;
  wire [2:0] and3_right;
  wire [2:0] and3_out;
  wire [2:0] and2_left;
  wire [2:0] and2_right;
  wire [2:0] and2_out;
  wire [2:0] and1_left;
  wire [2:0] and1_right;
  wire [2:0] and1_out;
  wire [2:0] and0_left;
  wire [2:0] and0_right;
  wire [2:0] and0_out;
  wire [2:0] add3_left;
  wire [2:0] add3_right;
  wire [2:0] add3_out;
  wire [31:0] add2_left;
  wire [31:0] add2_right;
  wire [31:0] add2_out;
  wire [31:0] add1_left;
  wire [31:0] add1_right;
  wire [31:0] add1_out;
  wire [2:0] add0_left;
  wire [2:0] add0_right;
  wire [2:0] add0_out;
  wire [31:0] a_read0_10_in;
  wire a_read0_10_write_en;
  wire a_read0_10_clk;
  wire [31:0] a_read0_10_out;
  wire a_read0_10_done;
  wire [31:0] a_read0_00_in;
  wire a_read0_00_write_en;
  wire a_read0_00_clk;
  wire [31:0] a_read0_00_out;
  wire a_read0_00_done;
  wire [31:0] a_int_read0_0_in;
  wire a_int_read0_0_write_en;
  wire a_int_read0_0_clk;
  wire [31:0] a_int_read0_0_out;
  wire a_int_read0_0_done;
  wire [2:0] a_int0_addr0;
  wire [31:0] a_int0_write_data;
  wire a_int0_write_en;
  wire a_int0_clk;
  wire [31:0] a_int0_read_data;
  wire a_int0_done;
  wire [1:0] a1_addr0;
  wire [31:0] a1_write_data;
  wire a1_write_en;
  wire a1_clk;
  wire [31:0] a1_read_data;
  wire a1_done;
  wire [1:0] a0_addr0;
  wire [31:0] a0_write_data;
  wire a0_write_en;
  wire a0_clk;
  wire [31:0] a0_read_data;
  wire a0_done;
  wire [31:0] fsm0_in;
  wire fsm0_write_en;
  wire fsm0_clk;
  wire [31:0] fsm0_out;
  wire fsm0_done;
  wire [31:0] incr0_left;
  wire [31:0] incr0_right;
  wire [31:0] incr0_out;
  wire [31:0] fsm1_in;
  wire fsm1_write_en;
  wire fsm1_clk;
  wire [31:0] fsm1_out;
  wire fsm1_done;
  wire [31:0] incr1_left;
  wire [31:0] incr1_right;
  wire [31:0] incr1_out;
  wire [31:0] fsm2_in;
  wire fsm2_write_en;
  wire fsm2_clk;
  wire [31:0] fsm2_out;
  wire fsm2_done;
  wire [31:0] incr2_left;
  wire [31:0] incr2_right;
  wire [31:0] incr2_out;
  wire [31:0] fsm3_in;
  wire fsm3_write_en;
  wire fsm3_clk;
  wire [31:0] fsm3_out;
  wire fsm3_done;
  wire [31:0] incr3_left;
  wire [31:0] incr3_right;
  wire [31:0] incr3_out;
  wire [31:0] fsm4_in;
  wire fsm4_write_en;
  wire fsm4_clk;
  wire [31:0] fsm4_out;
  wire fsm4_done;
  wire [31:0] incr4_left;
  wire [31:0] incr4_right;
  wire [31:0] incr4_out;
  wire cond_computed0_in;
  wire cond_computed0_write_en;
  wire cond_computed0_clk;
  wire cond_computed0_out;
  wire cond_computed0_done;
  wire cond_stored0_in;
  wire cond_stored0_write_en;
  wire cond_stored0_clk;
  wire cond_stored0_out;
  wire cond_stored0_done;
  wire done_reg0_in;
  wire done_reg0_write_en;
  wire done_reg0_clk;
  wire done_reg0_out;
  wire done_reg0_done;
  wire cond_computed1_in;
  wire cond_computed1_write_en;
  wire cond_computed1_clk;
  wire cond_computed1_out;
  wire cond_computed1_done;
  wire cond_stored1_in;
  wire cond_stored1_write_en;
  wire cond_stored1_clk;
  wire cond_stored1_out;
  wire cond_stored1_done;
  wire done_reg1_in;
  wire done_reg1_write_en;
  wire done_reg1_clk;
  wire done_reg1_out;
  wire done_reg1_done;
  wire par_reset0_in;
  wire par_reset0_write_en;
  wire par_reset0_clk;
  wire par_reset0_out;
  wire par_reset0_done;
  wire par_done_reg0_in;
  wire par_done_reg0_write_en;
  wire par_done_reg0_clk;
  wire par_done_reg0_out;
  wire par_done_reg0_done;
  wire par_done_reg1_in;
  wire par_done_reg1_write_en;
  wire par_done_reg1_clk;
  wire par_done_reg1_out;
  wire par_done_reg1_done;
  wire cond_computed2_in;
  wire cond_computed2_write_en;
  wire cond_computed2_clk;
  wire cond_computed2_out;
  wire cond_computed2_done;
  wire cond_stored2_in;
  wire cond_stored2_write_en;
  wire cond_stored2_clk;
  wire cond_stored2_out;
  wire cond_stored2_done;
  wire done_reg2_in;
  wire done_reg2_write_en;
  wire done_reg2_clk;
  wire done_reg2_out;
  wire done_reg2_done;
  wire cond_computed3_in;
  wire cond_computed3_write_en;
  wire cond_computed3_clk;
  wire cond_computed3_out;
  wire cond_computed3_done;
  wire cond_stored3_in;
  wire cond_stored3_write_en;
  wire cond_stored3_clk;
  wire cond_stored3_out;
  wire cond_stored3_done;
  wire done_reg3_in;
  wire done_reg3_write_en;
  wire done_reg3_clk;
  wire done_reg3_out;
  wire done_reg3_done;
  wire par_reset1_in;
  wire par_reset1_write_en;
  wire par_reset1_clk;
  wire par_reset1_out;
  wire par_reset1_done;
  wire par_done_reg2_in;
  wire par_done_reg2_write_en;
  wire par_done_reg2_clk;
  wire par_done_reg2_out;
  wire par_done_reg2_done;
  wire par_done_reg3_in;
  wire par_done_reg3_write_en;
  wire par_done_reg3_clk;
  wire par_done_reg3_out;
  wire par_done_reg3_done;
  wire [31:0] fsm5_in;
  wire fsm5_write_en;
  wire fsm5_clk;
  wire [31:0] fsm5_out;
  wire fsm5_done;
  wire cond_computed4_in;
  wire cond_computed4_write_en;
  wire cond_computed4_clk;
  wire cond_computed4_out;
  wire cond_computed4_done;
  wire cond_stored4_in;
  wire cond_stored4_write_en;
  wire cond_stored4_clk;
  wire cond_stored4_out;
  wire cond_stored4_done;
  wire done_reg4_in;
  wire done_reg4_write_en;
  wire done_reg4_clk;
  wire done_reg4_out;
  wire done_reg4_done;
  wire [31:0] fsm6_in;
  wire fsm6_write_en;
  wire fsm6_clk;
  wire [31:0] fsm6_out;
  wire fsm6_done;
  
  // Subcomponent Instances
  std_reg #(32) v_10 (
      .in(v_10_in),
      .write_en(v_10_write_en),
      .clk(clk),
      .out(v_10_out),
      .done(v_10_done)
  );
  
  std_reg #(32) v_00 (
      .in(v_00_in),
      .write_en(v_00_write_en),
      .clk(clk),
      .out(v_00_out),
      .done(v_00_done)
  );
  
  std_slice #(3, 2) slice7 (
      .in(slice7_in),
      .out(slice7_out)
  );
  
  std_slice #(3, 2) slice6 (
      .in(slice6_in),
      .out(slice6_out)
  );
  
  std_slice #(3, 2) slice5 (
      .in(slice5_in),
      .out(slice5_out)
  );
  
  std_slice #(3, 2) slice4 (
      .in(slice4_in),
      .out(slice4_out)
  );
  
  std_slice #(3, 2) slice3 (
      .in(slice3_in),
      .out(slice3_out)
  );
  
  std_slice #(3, 2) slice2 (
      .in(slice2_in),
      .out(slice2_out)
  );
  
  std_slice #(3, 2) slice1 (
      .in(slice1_in),
      .out(slice1_out)
  );
  
  std_slice #(3, 2) slice0 (
      .in(slice0_in),
      .out(slice0_out)
  );
  
  std_rsh #(3) rsh3 (
      .left(rsh3_left),
      .right(rsh3_right),
      .out(rsh3_out)
  );
  
  std_rsh #(3) rsh2 (
      .left(rsh2_left),
      .right(rsh2_right),
      .out(rsh2_out)
  );
  
  std_rsh #(3) rsh1 (
      .left(rsh1_left),
      .right(rsh1_right),
      .out(rsh1_out)
  );
  
  std_rsh #(3) rsh0 (
      .left(rsh0_left),
      .right(rsh0_right),
      .out(rsh0_out)
  );
  
  std_mem_d1 #(32, 1, 1) result0 (
      .addr0(result0_addr0),
      .write_data(result0_write_data),
      .write_en(result0_write_en),
      .clk(clk),
      .read_data(result0_read_data),
      .done(result0_done)
  );
  
  std_mult #(32) mult1 (
      .left(mult1_left),
      .right(mult1_right),
      .out(mult1_out)
  );
  
  std_mult #(32) mult0 (
      .left(mult0_left),
      .right(mult0_right),
      .out(mult0_out)
  );
  
  std_le #(3) le1 (
      .left(le1_left),
      .right(le1_right),
      .out(le1_out)
  );
  
  std_le #(3) le0 (
      .left(le0_left),
      .right(le0_right),
      .out(le0_out)
  );
  
  std_reg #(3) i1 (
      .in(i1_in),
      .write_en(i1_write_en),
      .clk(clk),
      .out(i1_out),
      .done(i1_done)
  );
  
  std_reg #(3) i0 (
      .in(i0_in),
      .write_en(i0_write_en),
      .clk(clk),
      .out(i0_out),
      .done(i0_done)
  );
  
  std_eq #(3) eq3 (
      .left(eq3_left),
      .right(eq3_right),
      .out(eq3_out)
  );
  
  std_eq #(3) eq2 (
      .left(eq2_left),
      .right(eq2_right),
      .out(eq2_out)
  );
  
  std_eq #(3) eq1 (
      .left(eq1_left),
      .right(eq1_right),
      .out(eq1_out)
  );
  
  std_eq #(3) eq0 (
      .left(eq0_left),
      .right(eq0_right),
      .out(eq0_out)
  );
  
  std_const #(3, 0) const9 (
      .out(const9_out)
  );
  
  std_const #(3, 1) const8 (
      .out(const8_out)
  );
  
  std_const #(3, 1) const7 (
      .out(const7_out)
  );
  
  std_const #(3, 1) const6 (
      .out(const6_out)
  );
  
  std_const #(3, 1) const5 (
      .out(const5_out)
  );
  
  std_const #(3, 1) const4 (
      .out(const4_out)
  );
  
  std_const #(3, 0) const3 (
      .out(const3_out)
  );
  
  std_const #(3, 1) const2 (
      .out(const2_out)
  );
  
  std_const #(3, 1) const19 (
      .out(const19_out)
  );
  
  std_const #(1, 0) const18 (
      .out(const18_out)
  );
  
  std_const #(1, 0) const17 (
      .out(const17_out)
  );
  
  std_const #(3, 2) const16 (
      .out(const16_out)
  );
  
  std_const #(3, 0) const15 (
      .out(const15_out)
  );
  
  std_const #(3, 1) const14 (
      .out(const14_out)
  );
  
  std_const #(3, 1) const13 (
      .out(const13_out)
  );
  
  std_const #(3, 1) const12 (
      .out(const12_out)
  );
  
  std_const #(3, 1) const11 (
      .out(const11_out)
  );
  
  std_const #(3, 1) const10 (
      .out(const10_out)
  );
  
  std_const #(3, 5) const1 (
      .out(const1_out)
  );
  
  std_const #(3, 0) const0 (
      .out(const0_out)
  );
  
  std_reg #(32) b_read0_10 (
      .in(b_read0_10_in),
      .write_en(b_read0_10_write_en),
      .clk(clk),
      .out(b_read0_10_out),
      .done(b_read0_10_done)
  );
  
  std_reg #(32) b_read0_00 (
      .in(b_read0_00_in),
      .write_en(b_read0_00_write_en),
      .clk(clk),
      .out(b_read0_00_out),
      .done(b_read0_00_done)
  );
  
  std_reg #(32) b_int_read0_0 (
      .in(b_int_read0_0_in),
      .write_en(b_int_read0_0_write_en),
      .clk(clk),
      .out(b_int_read0_0_out),
      .done(b_int_read0_0_done)
  );
  
  std_mem_d1 #(32, 6, 3) b_int0 (
      .addr0(b_int0_addr0),
      .write_data(b_int0_write_data),
      .write_en(b_int0_write_en),
      .clk(clk),
      .read_data(b_int0_read_data),
      .done(b_int0_done)
  );
  
  std_mem_d1 #(32, 3, 2) b1 (
      .addr0(b1_addr0),
      .write_data(b1_write_data),
      .write_en(b1_write_en),
      .clk(clk),
      .read_data(b1_read_data),
      .done(b1_done)
  );
  
  std_mem_d1 #(32, 3, 2) b0 (
      .addr0(b0_addr0),
      .write_data(b0_write_data),
      .write_en(b0_write_en),
      .clk(clk),
      .read_data(b0_read_data),
      .done(b0_done)
  );
  
  std_and #(3) and3 (
      .left(and3_left),
      .right(and3_right),
      .out(and3_out)
  );
  
  std_and #(3) and2 (
      .left(and2_left),
      .right(and2_right),
      .out(and2_out)
  );
  
  std_and #(3) and1 (
      .left(and1_left),
      .right(and1_right),
      .out(and1_out)
  );
  
  std_and #(3) and0 (
      .left(and0_left),
      .right(and0_right),
      .out(and0_out)
  );
  
  std_add #(3) add3 (
      .left(add3_left),
      .right(add3_right),
      .out(add3_out)
  );
  
  std_add #(32) add2 (
      .left(add2_left),
      .right(add2_right),
      .out(add2_out)
  );
  
  std_add #(32) add1 (
      .left(add1_left),
      .right(add1_right),
      .out(add1_out)
  );
  
  std_add #(3) add0 (
      .left(add0_left),
      .right(add0_right),
      .out(add0_out)
  );
  
  std_reg #(32) a_read0_10 (
      .in(a_read0_10_in),
      .write_en(a_read0_10_write_en),
      .clk(clk),
      .out(a_read0_10_out),
      .done(a_read0_10_done)
  );
  
  std_reg #(32) a_read0_00 (
      .in(a_read0_00_in),
      .write_en(a_read0_00_write_en),
      .clk(clk),
      .out(a_read0_00_out),
      .done(a_read0_00_done)
  );
  
  std_reg #(32) a_int_read0_0 (
      .in(a_int_read0_0_in),
      .write_en(a_int_read0_0_write_en),
      .clk(clk),
      .out(a_int_read0_0_out),
      .done(a_int_read0_0_done)
  );
  
  std_mem_d1 #(32, 6, 3) a_int0 (
      .addr0(a_int0_addr0),
      .write_data(a_int0_write_data),
      .write_en(a_int0_write_en),
      .clk(clk),
      .read_data(a_int0_read_data),
      .done(a_int0_done)
  );
  
  std_mem_d1 #(32, 3, 2) a1 (
      .addr0(a1_addr0),
      .write_data(a1_write_data),
      .write_en(a1_write_en),
      .clk(clk),
      .read_data(a1_read_data),
      .done(a1_done)
  );
  
  std_mem_d1 #(32, 3, 2) a0 (
      .addr0(a0_addr0),
      .write_data(a0_write_data),
      .write_en(a0_write_en),
      .clk(clk),
      .read_data(a0_read_data),
      .done(a0_done)
  );
  
  std_reg #(32) fsm0 (
      .in(fsm0_in),
      .write_en(fsm0_write_en),
      .clk(clk),
      .out(fsm0_out),
      .done(fsm0_done)
  );
  
  std_add #(32) incr0 (
      .left(incr0_left),
      .right(incr0_right),
      .out(incr0_out)
  );
  
  std_reg #(32) fsm1 (
      .in(fsm1_in),
      .write_en(fsm1_write_en),
      .clk(clk),
      .out(fsm1_out),
      .done(fsm1_done)
  );
  
  std_add #(32) incr1 (
      .left(incr1_left),
      .right(incr1_right),
      .out(incr1_out)
  );
  
  std_reg #(32) fsm2 (
      .in(fsm2_in),
      .write_en(fsm2_write_en),
      .clk(clk),
      .out(fsm2_out),
      .done(fsm2_done)
  );
  
  std_add #(32) incr2 (
      .left(incr2_left),
      .right(incr2_right),
      .out(incr2_out)
  );
  
  std_reg #(32) fsm3 (
      .in(fsm3_in),
      .write_en(fsm3_write_en),
      .clk(clk),
      .out(fsm3_out),
      .done(fsm3_done)
  );
  
  std_add #(32) incr3 (
      .left(incr3_left),
      .right(incr3_right),
      .out(incr3_out)
  );
  
  std_reg #(32) fsm4 (
      .in(fsm4_in),
      .write_en(fsm4_write_en),
      .clk(clk),
      .out(fsm4_out),
      .done(fsm4_done)
  );
  
  std_add #(32) incr4 (
      .left(incr4_left),
      .right(incr4_right),
      .out(incr4_out)
  );
  
  std_reg #(1) cond_computed0 (
      .in(cond_computed0_in),
      .write_en(cond_computed0_write_en),
      .clk(clk),
      .out(cond_computed0_out),
      .done(cond_computed0_done)
  );
  
  std_reg #(1) cond_stored0 (
      .in(cond_stored0_in),
      .write_en(cond_stored0_write_en),
      .clk(clk),
      .out(cond_stored0_out),
      .done(cond_stored0_done)
  );
  
  std_reg #(1) done_reg0 (
      .in(done_reg0_in),
      .write_en(done_reg0_write_en),
      .clk(clk),
      .out(done_reg0_out),
      .done(done_reg0_done)
  );
  
  std_reg #(1) cond_computed1 (
      .in(cond_computed1_in),
      .write_en(cond_computed1_write_en),
      .clk(clk),
      .out(cond_computed1_out),
      .done(cond_computed1_done)
  );
  
  std_reg #(1) cond_stored1 (
      .in(cond_stored1_in),
      .write_en(cond_stored1_write_en),
      .clk(clk),
      .out(cond_stored1_out),
      .done(cond_stored1_done)
  );
  
  std_reg #(1) done_reg1 (
      .in(done_reg1_in),
      .write_en(done_reg1_write_en),
      .clk(clk),
      .out(done_reg1_out),
      .done(done_reg1_done)
  );
  
  std_reg #(1) par_reset0 (
      .in(par_reset0_in),
      .write_en(par_reset0_write_en),
      .clk(clk),
      .out(par_reset0_out),
      .done(par_reset0_done)
  );
  
  std_reg #(1) par_done_reg0 (
      .in(par_done_reg0_in),
      .write_en(par_done_reg0_write_en),
      .clk(clk),
      .out(par_done_reg0_out),
      .done(par_done_reg0_done)
  );
  
  std_reg #(1) par_done_reg1 (
      .in(par_done_reg1_in),
      .write_en(par_done_reg1_write_en),
      .clk(clk),
      .out(par_done_reg1_out),
      .done(par_done_reg1_done)
  );
  
  std_reg #(1) cond_computed2 (
      .in(cond_computed2_in),
      .write_en(cond_computed2_write_en),
      .clk(clk),
      .out(cond_computed2_out),
      .done(cond_computed2_done)
  );
  
  std_reg #(1) cond_stored2 (
      .in(cond_stored2_in),
      .write_en(cond_stored2_write_en),
      .clk(clk),
      .out(cond_stored2_out),
      .done(cond_stored2_done)
  );
  
  std_reg #(1) done_reg2 (
      .in(done_reg2_in),
      .write_en(done_reg2_write_en),
      .clk(clk),
      .out(done_reg2_out),
      .done(done_reg2_done)
  );
  
  std_reg #(1) cond_computed3 (
      .in(cond_computed3_in),
      .write_en(cond_computed3_write_en),
      .clk(clk),
      .out(cond_computed3_out),
      .done(cond_computed3_done)
  );
  
  std_reg #(1) cond_stored3 (
      .in(cond_stored3_in),
      .write_en(cond_stored3_write_en),
      .clk(clk),
      .out(cond_stored3_out),
      .done(cond_stored3_done)
  );
  
  std_reg #(1) done_reg3 (
      .in(done_reg3_in),
      .write_en(done_reg3_write_en),
      .clk(clk),
      .out(done_reg3_out),
      .done(done_reg3_done)
  );
  
  std_reg #(1) par_reset1 (
      .in(par_reset1_in),
      .write_en(par_reset1_write_en),
      .clk(clk),
      .out(par_reset1_out),
      .done(par_reset1_done)
  );
  
  std_reg #(1) par_done_reg2 (
      .in(par_done_reg2_in),
      .write_en(par_done_reg2_write_en),
      .clk(clk),
      .out(par_done_reg2_out),
      .done(par_done_reg2_done)
  );
  
  std_reg #(1) par_done_reg3 (
      .in(par_done_reg3_in),
      .write_en(par_done_reg3_write_en),
      .clk(clk),
      .out(par_done_reg3_out),
      .done(par_done_reg3_done)
  );
  
  std_reg #(32) fsm5 (
      .in(fsm5_in),
      .write_en(fsm5_write_en),
      .clk(clk),
      .out(fsm5_out),
      .done(fsm5_done)
  );
  
  std_reg #(1) cond_computed4 (
      .in(cond_computed4_in),
      .write_en(cond_computed4_write_en),
      .clk(clk),
      .out(cond_computed4_out),
      .done(cond_computed4_done)
  );
  
  std_reg #(1) cond_stored4 (
      .in(cond_stored4_in),
      .write_en(cond_stored4_write_en),
      .clk(clk),
      .out(cond_stored4_out),
      .done(cond_stored4_done)
  );
  
  std_reg #(1) done_reg4 (
      .in(done_reg4_in),
      .write_en(done_reg4_write_en),
      .clk(clk),
      .out(done_reg4_out),
      .done(done_reg4_done)
  );
  
  std_reg #(32) fsm6 (
      .in(fsm6_in),
      .write_en(fsm6_write_en),
      .clk(clk),
      .out(fsm6_out),
      .done(fsm6_done)
  );
  
  // Memory initialization / finalization 
  import "DPI-C" function string futil_getenv (input string env_var);
  string DATA;
   initial begin
  DATA = futil_getenv("DATA");
      $fdisplay(2, "DATA (path to meminit files): %s", DATA);
      $readmemh({ DATA, "/result0.dat" }, result0.mem);
      $readmemh({ DATA, "/b_int0.dat" }, b_int0.mem);
      $readmemh({ DATA, "/b1.dat" }, b1.mem);
      $readmemh({ DATA, "/b0.dat" }, b0.mem);
      $readmemh({ DATA, "/a_int0.dat" }, a_int0.mem);
      $readmemh({ DATA, "/a1.dat" }, a1.mem);
      $readmemh({ DATA, "/a0.dat" }, a0.mem);
  end
  
   final begin
      $writememh({ DATA, "/result0.out" }, result0.mem);
      $writememh({ DATA, "/b_int0.out" }, b_int0.mem);
      $writememh({ DATA, "/b1.out" }, b1.mem);
      $writememh({ DATA, "/b0.out" }, b0.mem);
      $writememh({ DATA, "/a_int0.out" }, a_int0.mem);
      $writememh({ DATA, "/a1.out" }, a1.mem);
      $writememh({ DATA, "/a0.out" }, a0.mem);
  end
  
  // Input / output connections
  assign done = (fsm6_out == 32'd4) ? 1'd1 : '0;
  assign v_10_in = (fsm2_out <= 32'd1 & fsm3_out == 32'd2 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? mult1_out : '0;
  assign v_10_write_en = (fsm2_out <= 32'd1 & fsm3_out == 32'd2 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 1'd1 : '0;
  assign v_00_in = (fsm2_out <= 32'd1 & fsm3_out == 32'd2 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? mult0_out : '0;
  assign v_00_write_en = (fsm2_out <= 32'd1 & fsm3_out == 32'd2 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 1'd1 : '0;
  assign slice7_in = (fsm1_out <= 32'd1 & fsm3_out == 32'd1 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? i1_out : '0;
  assign slice6_in = (fsm1_out <= 32'd1 & fsm3_out == 32'd1 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? i1_out : '0;
  assign slice5_in = (fsm0_out <= 32'd1 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? i1_out : '0;
  assign slice4_in = (fsm0_out <= 32'd1 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? i1_out : '0;
  assign slice3_in = (cond_computed3_out & cond_stored3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? rsh3_out : '0;
  assign slice2_in = (cond_computed2_out & cond_stored2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? rsh2_out : '0;
  assign slice1_in = (cond_computed1_out & cond_stored1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? rsh1_out : '0;
  assign slice0_in = (cond_computed0_out & cond_stored0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? rsh0_out : '0;
  assign rsh3_left = (cond_computed3_out & cond_stored3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? i0_out : '0;
  assign rsh3_right = (cond_computed3_out & cond_stored3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? const13_out : '0;
  assign rsh2_left = (cond_computed2_out & cond_stored2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? i0_out : '0;
  assign rsh2_right = (cond_computed2_out & cond_stored2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? const10_out : '0;
  assign rsh1_left = (cond_computed1_out & cond_stored1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? i0_out : '0;
  assign rsh1_right = (cond_computed1_out & cond_stored1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? const7_out : '0;
  assign rsh0_left = (cond_computed0_out & cond_stored0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? i0_out : '0;
  assign rsh0_right = (cond_computed0_out & cond_stored0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? const4_out : '0;
  assign result0_addr0 = (fsm3_out == 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? const18_out : (fsm3_out == 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? const17_out : '0;
  assign result0_write_data = (fsm3_out == 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? add2_out : '0;
  assign result0_write_en = (fsm3_out == 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 1'd1 : '0;
  assign mult1_left = (fsm2_out <= 32'd1 & fsm3_out == 32'd2 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? a_read0_10_out : '0;
  assign mult1_right = (fsm2_out <= 32'd1 & fsm3_out == 32'd2 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? b_read0_10_out : '0;
  assign mult0_left = (fsm2_out <= 32'd1 & fsm3_out == 32'd2 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? a_read0_00_out : '0;
  assign mult0_right = (fsm2_out <= 32'd1 & fsm3_out == 32'd2 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? b_read0_00_out : '0;
  assign le1_left = (fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? i1_out : '0;
  assign le1_right = (fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? const16_out : '0;
  assign le0_left = (!cond_computed4_out & fsm6_out == 32'd1 & !done_reg4_out & go) ? i0_out : '0;
  assign le0_right = (!cond_computed4_out & fsm6_out == 32'd1 & !done_reg4_out & go) ? const1_out : '0;
  assign i1_in = (fsm6_out == 32'd2 & !i1_done & go) ? const15_out : (fsm3_out == 32'd4 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? add3_out : '0;
  assign i1_write_en = (fsm6_out == 32'd2 & !i1_done & go | fsm3_out == 32'd4 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 1'd1 : '0;
  assign i0_in = (fsm6_out == 32'd0 & !i0_done & go) ? const0_out : (fsm5_out == 32'd4 & !i0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? add0_out : '0;
  assign i0_write_en = (fsm6_out == 32'd0 & !i0_done & go | fsm5_out == 32'd4 & !i0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign eq3_left = (!cond_computed3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? and3_out : '0;
  assign eq3_right = (!cond_computed3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? const12_out : '0;
  assign eq2_left = (!cond_computed2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? and2_out : '0;
  assign eq2_right = (!cond_computed2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? const9_out : '0;
  assign eq1_left = (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? and1_out : '0;
  assign eq1_right = (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? const6_out : '0;
  assign eq0_left = (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? and0_out : '0;
  assign eq0_right = (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? const3_out : '0;
  assign b_read0_10_in = (fsm1_out <= 32'd1 & fsm3_out == 32'd1 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? b1_read_data : '0;
  assign b_read0_10_write_en = (fsm1_out <= 32'd1 & fsm3_out == 32'd1 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 1'd1 : '0;
  assign b_read0_00_in = (fsm1_out <= 32'd1 & fsm3_out == 32'd1 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? b0_read_data : '0;
  assign b_read0_00_write_en = (fsm1_out <= 32'd1 & fsm3_out == 32'd1 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 1'd1 : '0;
  assign b_int_read0_0_in = (fsm5_out == 32'd2 & !b_int_read0_0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? b_int0_read_data : '0;
  assign b_int_read0_0_write_en = (fsm5_out == 32'd2 & !b_int_read0_0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign b_int0_addr0 = (fsm5_out == 32'd2 & !b_int_read0_0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? i0_out : '0;
  assign b1_addr0 = (fsm1_out <= 32'd1 & fsm3_out == 32'd1 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? slice7_out : (cond_computed3_out & cond_stored3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? slice3_out : '0;
  assign b1_write_data = (cond_computed3_out & cond_stored3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? b_int_read0_0_out : '0;
  assign b1_write_en = (cond_computed3_out & cond_stored3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign b0_addr0 = (fsm1_out <= 32'd1 & fsm3_out == 32'd1 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? slice6_out : (cond_computed2_out & cond_stored2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? slice2_out : '0;
  assign b0_write_data = (cond_computed2_out & cond_stored2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? b_int_read0_0_out : '0;
  assign b0_write_en = (cond_computed2_out & cond_stored2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign and3_left = (!cond_computed3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? i0_out : '0;
  assign and3_right = (!cond_computed3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? const11_out : '0;
  assign and2_left = (!cond_computed2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? i0_out : '0;
  assign and2_right = (!cond_computed2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? const8_out : '0;
  assign and1_left = (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? i0_out : '0;
  assign and1_right = (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? const5_out : '0;
  assign and0_left = (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? i0_out : '0;
  assign and0_right = (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? const2_out : '0;
  assign add3_left = (fsm3_out == 32'd4 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? i1_out : '0;
  assign add3_right = (fsm3_out == 32'd4 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? const19_out : '0;
  assign add2_left = (fsm3_out == 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? result0_read_data : '0;
  assign add2_right = (fsm3_out == 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? add1_out : '0;
  assign add1_left = (fsm3_out == 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? v_00_out : '0;
  assign add1_right = (fsm3_out == 32'd3 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? v_10_out : '0;
  assign add0_left = (fsm5_out == 32'd4 & !i0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? i0_out : '0;
  assign add0_right = (fsm5_out == 32'd4 & !i0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? const14_out : '0;
  assign a_read0_10_in = (fsm0_out <= 32'd1 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? a1_read_data : '0;
  assign a_read0_10_write_en = (fsm0_out <= 32'd1 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 1'd1 : '0;
  assign a_read0_00_in = (fsm0_out <= 32'd1 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? a0_read_data : '0;
  assign a_read0_00_write_en = (fsm0_out <= 32'd1 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 1'd1 : '0;
  assign a_int_read0_0_in = (fsm5_out == 32'd0 & !a_int_read0_0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? a_int0_read_data : '0;
  assign a_int_read0_0_write_en = (fsm5_out == 32'd0 & !a_int_read0_0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign a_int0_addr0 = (fsm5_out == 32'd0 & !a_int_read0_0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? i0_out : '0;
  assign a1_addr0 = (fsm0_out <= 32'd1 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? slice5_out : (cond_computed1_out & cond_stored1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? slice1_out : '0;
  assign a1_write_data = (cond_computed1_out & cond_stored1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? a_int_read0_0_out : '0;
  assign a1_write_en = (cond_computed1_out & cond_stored1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign a0_addr0 = (fsm0_out <= 32'd1 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? slice4_out : (cond_computed0_out & cond_stored0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? slice0_out : '0;
  assign a0_write_data = (cond_computed0_out & cond_stored0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? a_int_read0_0_out : '0;
  assign a0_write_en = (cond_computed0_out & cond_stored0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign fsm0_in = (fsm0_out != 32'd1 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? incr0_out : (fsm0_out == 32'd1) ? 32'd0 : '0;
  assign fsm0_write_en = (fsm0_out != 32'd1 & fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go | fsm0_out == 32'd1) ? 1'd1 : '0;
  assign incr0_left = (fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 32'd1 : '0;
  assign incr0_right = (fsm3_out == 32'd0 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? fsm0_out : '0;
  assign fsm1_in = (fsm1_out != 32'd1 & fsm3_out == 32'd1 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? incr1_out : (fsm1_out == 32'd1) ? 32'd0 : '0;
  assign fsm1_write_en = (fsm1_out != 32'd1 & fsm3_out == 32'd1 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go | fsm1_out == 32'd1) ? 1'd1 : '0;
  assign incr1_left = (fsm3_out == 32'd1 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 32'd1 : '0;
  assign incr1_right = (fsm3_out == 32'd1 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? fsm1_out : '0;
  assign fsm2_in = (fsm2_out != 32'd1 & fsm3_out == 32'd2 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? incr2_out : (fsm2_out == 32'd1) ? 32'd0 : '0;
  assign fsm2_write_en = (fsm2_out != 32'd1 & fsm3_out == 32'd2 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go | fsm2_out == 32'd1) ? 1'd1 : '0;
  assign incr2_left = (fsm3_out == 32'd2 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 32'd1 : '0;
  assign incr2_right = (fsm3_out == 32'd2 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? fsm2_out : '0;
  assign fsm3_in = (fsm3_out != 32'd5 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? incr3_out : (fsm3_out == 32'd5) ? 32'd0 : '0;
  assign fsm3_write_en = (fsm3_out != 32'd5 & fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go | fsm3_out == 32'd5) ? 1'd1 : '0;
  assign incr3_left = (fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 32'd1 : '0;
  assign incr3_right = (fsm4_out > 32'd0 & fsm4_out < 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? fsm3_out : '0;
  assign fsm4_in = (fsm4_out != 32'd6 & fsm4_out != 32'd0 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? incr4_out : (fsm4_out == 32'd0 & !le1_out & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go | fsm4_out == 32'd6 & !le1_out & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 32'd7 : (fsm4_out == 32'd7) ? 32'd0 : (fsm4_out == 32'd0 & le1_out & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go | fsm4_out == 32'd6 & le1_out & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 32'd1 : '0;
  assign fsm4_write_en = (fsm4_out != 32'd6 & fsm4_out != 32'd0 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go | fsm4_out == 32'd0 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go | fsm4_out == 32'd6 & fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go | fsm4_out == 32'd7) ? 1'd1 : '0;
  assign incr4_left = (fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? fsm4_out : '0;
  assign incr4_right = (fsm6_out == 32'd3 & !(fsm4_out == 32'd7) & go) ? 32'd1 : '0;
  assign cond_computed0_in = done_reg0_out ? 1'd0 : (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign cond_computed0_write_en = (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | done_reg0_out) ? 1'd1 : '0;
  assign cond_stored0_in = (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? eq0_out : '0;
  assign cond_stored0_write_en = (!cond_computed0_out & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? eq0_out : '0;
  assign done_reg0_in = done_reg0_out ? 1'd0 : ((cond_computed0_out & cond_stored0_out & a0_done | cond_computed0_out & !cond_stored0_out) & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign done_reg0_write_en = ((cond_computed0_out & cond_stored0_out & a0_done | cond_computed0_out & !cond_stored0_out) & !(par_done_reg0_out | done_reg0_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | done_reg0_out) ? 1'd1 : '0;
  assign cond_computed1_in = done_reg1_out ? 1'd0 : (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign cond_computed1_write_en = (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | done_reg1_out) ? 1'd1 : '0;
  assign cond_stored1_in = (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? eq1_out : '0;
  assign cond_stored1_write_en = (!cond_computed1_out & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? eq1_out : '0;
  assign done_reg1_in = done_reg1_out ? 1'd0 : ((cond_computed1_out & cond_stored1_out & a1_done | cond_computed1_out & !cond_stored1_out) & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign done_reg1_write_en = ((cond_computed1_out & cond_stored1_out & a1_done | cond_computed1_out & !cond_stored1_out) & !(par_done_reg1_out | done_reg1_out) & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | done_reg1_out) ? 1'd1 : '0;
  assign par_reset0_in = par_reset0_out ? 1'd0 : (par_done_reg0_out & par_done_reg1_out & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign par_reset0_write_en = (par_done_reg0_out & par_done_reg1_out & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | par_reset0_out) ? 1'd1 : '0;
  assign par_done_reg0_in = par_reset0_out ? 1'd0 : (done_reg0_out & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign par_done_reg0_write_en = (done_reg0_out & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | par_reset0_out) ? 1'd1 : '0;
  assign par_done_reg1_in = par_reset0_out ? 1'd0 : (done_reg1_out & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign par_done_reg1_write_en = (done_reg1_out & fsm5_out == 32'd1 & !par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | par_reset0_out) ? 1'd1 : '0;
  assign cond_computed2_in = done_reg2_out ? 1'd0 : (!cond_computed2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign cond_computed2_write_en = (!cond_computed2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | done_reg2_out) ? 1'd1 : '0;
  assign cond_stored2_in = (!cond_computed2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? eq2_out : '0;
  assign cond_stored2_write_en = (!cond_computed2_out & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? eq2_out : '0;
  assign done_reg2_in = done_reg2_out ? 1'd0 : ((cond_computed2_out & cond_stored2_out & b0_done | cond_computed2_out & !cond_stored2_out) & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign done_reg2_write_en = ((cond_computed2_out & cond_stored2_out & b0_done | cond_computed2_out & !cond_stored2_out) & !(par_done_reg2_out | done_reg2_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | done_reg2_out) ? 1'd1 : '0;
  assign cond_computed3_in = done_reg3_out ? 1'd0 : (!cond_computed3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign cond_computed3_write_en = (!cond_computed3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | done_reg3_out) ? 1'd1 : '0;
  assign cond_stored3_in = (!cond_computed3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? eq3_out : '0;
  assign cond_stored3_write_en = (!cond_computed3_out & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? eq3_out : '0;
  assign done_reg3_in = done_reg3_out ? 1'd0 : ((cond_computed3_out & cond_stored3_out & b1_done | cond_computed3_out & !cond_stored3_out) & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign done_reg3_write_en = ((cond_computed3_out & cond_stored3_out & b1_done | cond_computed3_out & !cond_stored3_out) & !(par_done_reg3_out | done_reg3_out) & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | done_reg3_out) ? 1'd1 : '0;
  assign par_reset1_in = par_reset1_out ? 1'd0 : (par_done_reg2_out & par_done_reg3_out & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign par_reset1_write_en = (par_done_reg2_out & par_done_reg3_out & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | par_reset1_out) ? 1'd1 : '0;
  assign par_done_reg2_in = par_reset1_out ? 1'd0 : (done_reg2_out & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign par_done_reg2_write_en = (done_reg2_out & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | par_reset1_out) ? 1'd1 : '0;
  assign par_done_reg3_in = par_reset1_out ? 1'd0 : (done_reg3_out & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign par_done_reg3_write_en = (done_reg3_out & fsm5_out == 32'd3 & !par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | par_reset1_out) ? 1'd1 : '0;
  assign fsm5_in = (fsm5_out == 32'd4 & i0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 32'd5 : (fsm5_out == 32'd3 & par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 32'd4 : (fsm5_out == 32'd2 & b_int_read0_0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 32'd3 : (fsm5_out == 32'd1 & par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 32'd2 : (fsm5_out == 32'd5) ? 32'd0 : (fsm5_out == 32'd0 & a_int_read0_0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go) ? 32'd1 : '0;
  assign fsm5_write_en = (fsm5_out == 32'd0 & a_int_read0_0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | fsm5_out == 32'd1 & par_reset0_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | fsm5_out == 32'd2 & b_int_read0_0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | fsm5_out == 32'd3 & par_reset1_out & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | fsm5_out == 32'd4 & i0_done & cond_stored4_out & cond_computed4_out & !(fsm5_out == 32'd5) & fsm6_out == 32'd1 & !done_reg4_out & go | fsm5_out == 32'd5) ? 1'd1 : '0;
  assign cond_computed4_in = (cond_stored4_out & cond_computed4_out & fsm5_out == 32'd5 & fsm6_out == 32'd1 & !done_reg4_out & go | cond_computed4_out & !cond_stored4_out & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd0 : (!cond_computed4_out & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign cond_computed4_write_en = (!cond_computed4_out & fsm6_out == 32'd1 & !done_reg4_out & go | cond_stored4_out & cond_computed4_out & fsm5_out == 32'd5 & fsm6_out == 32'd1 & !done_reg4_out & go | cond_computed4_out & !cond_stored4_out & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign cond_stored4_in = (!cond_computed4_out & fsm6_out == 32'd1 & !done_reg4_out & go) ? le0_out : '0;
  assign cond_stored4_write_en = (!cond_computed4_out & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign done_reg4_in = done_reg4_out ? 1'd0 : (cond_computed4_out & !cond_stored4_out & fsm6_out == 32'd1 & !done_reg4_out & go) ? 1'd1 : '0;
  assign done_reg4_write_en = (cond_computed4_out & !cond_stored4_out & fsm6_out == 32'd1 & !done_reg4_out & go | done_reg4_out) ? 1'd1 : '0;
  assign fsm6_in = (fsm6_out == 32'd3 & fsm4_out == 32'd7 & go) ? 32'd4 : (fsm6_out == 32'd2 & i1_done & go) ? 32'd3 : (fsm6_out == 32'd1 & done_reg4_out & go) ? 32'd2 : (fsm6_out == 32'd4) ? 32'd0 : (fsm6_out == 32'd0 & i0_done & go) ? 32'd1 : '0;
  assign fsm6_write_en = (fsm6_out == 32'd0 & i0_done & go | fsm6_out == 32'd1 & done_reg4_out & go | fsm6_out == 32'd2 & i1_done & go | fsm6_out == 32'd3 & fsm4_out == 32'd7 & go | fsm6_out == 32'd4) ? 1'd1 : '0;
endmodule // end main