// BEGIN macro definitions




// END macro definitions

decl L_int: ubit<32>[64][64];
decl x_int: ubit<32>[64];
decl b_int: ubit<32>[64];

for (let i: ubit<7> = 0..64) {
  x_int[i] := b_int[i];
  ---
  let j: ubit<7> = 0;
  // XXX: Try rewriting this as a for loop.
  while (j < i) {
    decor "#pragma HLS loop_tripcount min=0 max=7 avg=4"
    // XXX: This is a reduction pattern.
    let x_j: ubit<32> = x_int[j];
    ---
    x_int[i] := L_int[i][j] * x_j;

    // Update loop counter
    j := j + 1;
  }
  ---
  let x_i: ubit<32> = x_int[i];
  ---
  x_int[i] := x_i / L_int[i][i];
}
