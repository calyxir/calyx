// BEGIN macro definition








// END macro definition

decl alpha_int: ubit<32>[1];
decl beta_int: ubit<32>[1];
decl C_int: ubit<32>[80][80];
decl A_int: ubit<32>[80][60];
decl B_int: ubit<32>[80][60];

let alpha_ = alpha_int[0];
let beta_ = beta_int[0];
let A: ubit<32>[80][60];
let B: ubit<32>[80][60];

view A_sh = A[_: bank 1][_: bank 1];
view B_sh = B[_: bank 1][_: bank 1];

for (let i0: ubit<7> = 0..80) {
  for (let j0: ubit<6> = 0..60) {
    A_sh[i0][j0] := A_int[i0][j0];
    B_sh[i0][j0] := B_int[i0][j0];
  }
}

---

for (let i: ubit<7> = 0..80) {
  let j: ubit<7> = 0;
  while (j <= i) {
    decor "#pragma HLS loop_tripcount WHILE0"
    let C_i_j: ubit<32> = C_int[i][j];
    ---
    C_int[i][j] := C_i_j * beta_;

    // Update loop counter
    j := j + 1;
  }
  ---
  let j2: ubit<7> = 0;
  while (j2 <= i) {
    decor "#pragma HLS loop_tripcount WHILE1"
    for (let k: ubit<6> = 0..60) {
      let B_i_k: ubit<32> = B[i][k];
      let A_j2_k: ubit<32> = A[j2][k]
      ---
      let t = A_j2_k * alpha_ * B_i_k + B[j2][k] * alpha_ * A[i][k];
      // Update loop counter
    } combine {
      C_int[i][j2] += t;
    }
    j2 := j2 + 1;
  }
}

---

for (let i0: ubit<7> = 0..80) {
  for (let j0: ubit<6> = 0..60) {
    A_int[i0][j0] := A_sh[i0][j0];
    B_int[i0][j0] := B_sh[i0][j0];
  }
}
