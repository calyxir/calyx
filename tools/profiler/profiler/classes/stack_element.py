from dataclasses import dataclass, field

class StackElementType(Enum):
    GROUP = 1
    PRIMITIVE = 2
    CELL = 3
    CONTROL_GROUP = 4  # TDCC-generated groups that manage control


@dataclass
class StackElement:
    """
    An element on a trace stack.
    """

    # the name of the element determined by the profiler process; may not be the original name of the entity
    internal_name: str
    element_type: StackElementType
    is_main: bool = field(default=False)

    # should only contain a value if element_type is CELL
    component_name: str | None = field(default=None)
    # should only contain a value if element_type is CELL
    replacement_cell_name: str | None = field(default=None)

    # ADL source location of the stack element
    sourceloc: SourceLoc | None = field(default=None)
    # ADL source location of the replacement cell
    # Should only contain a value if element_type is CELL
    replacement_cell_sourceloc: SourceLoc | None = field(default=None)
    # ADL source location of the original component definition
    # Should only contain a value if element_type is CELL
    component_sourceloc: SourceLoc | None = field(default=None)

    # Calyx source location of the control node.
    # Should only contain a value if element_type is CONTROL
    ctrl_loc_str: str | None = field(default=None)

    compiler_generated_msg = "compiler-generated"

    # suffix after control enable group name generated by the unique-control compiler pass
    unique_group_str = "UG"

    @property
    def name(self) -> str:
        if (
            self.element_type == StackElementType.GROUP
            and self.unique_group_str in self.internal_name
        ):
            # control enabled group given a unique identifier name
            return self.internal_name.split(self.unique_group_str)[0]
        else:
            return self.internal_name

    def __repr__(self):
        match self.element_type:
            case StackElementType.GROUP:
                return self.name
            case StackElementType.PRIMITIVE:
                return (
                    f"{self.name} (primitive)"
                    if self.replacement_cell_name is None
                    else f"{self.name} (primitive) -> {self.replacement_cell_name}"
                )
            case StackElementType.CELL:
                if self.is_main:
                    return f"{self.name}"
                elif self.replacement_cell_name is not None:
                    return f"{self.name} ({self.replacement_cell_name}) [{self.component_name}]"
                else:
                    return f"{self.name} [{self.component_name}]"
            case StackElementType.CONTROL_GROUP:
                ctrl_string = (
                    f" ~ {self.ctrl_loc_str}" if self.ctrl_loc_str is not None else ""
                )
                return f"{self.name}{ctrl_string} (ctrl)"

    def adl_str(self):
        """
        String representation for ADL flame graph.
        Any name in '' (single quotes) indicates an entity created by the compiler (doesn't exist in the original ADL code).
        """
        match self.element_type:
            case StackElementType.GROUP:
                if self.sourceloc is None:
                    return f"'{self.name}' {{{self.compiler_generated_msg}}}"
                else:
                    return self.sourceloc.adl_str()
            case StackElementType.PRIMITIVE:
                return f"{self.sourceloc.adl_str()} (primitive)"
            case StackElementType.CELL:
                if self.is_main:
                    return self.sourceloc.adl_str()
                else:
                    og_sourceloc_str = self.sourceloc.adl_str()
                    component_sourceloc_str = self.component_sourceloc.adl_str()
                    if self.replacement_cell_name is not None:
                        replacement_sourceloc_str = (
                            self.replacement_cell_sourceloc.adl_str()
                        )
                        return f"{og_sourceloc_str} ({replacement_sourceloc_str}) [{component_sourceloc_str}]"
                    else:
                        return f"{og_sourceloc_str} [{component_sourceloc_str}]"
            case StackElementType.CONTROL_GROUP:
                return f"{self.compiler_generated_msg} (ctrl)"

    def mixed_str(self):
        """
        String representation for mixed (group/cell/component names in Calyx, along with sourceloc file and line #) flame graph.
        """
        match self.element_type:
            case StackElementType.GROUP:
                if self.sourceloc is None:
                    return f"{self.name} {{{self.compiler_generated_msg}}}"
                else:
                    return f"{self.name} {self.sourceloc.loc_str()}"
            case StackElementType.PRIMITIVE:
                return f"{self.name} (primitive) {self.sourceloc.loc_str()}"
            case StackElementType.CELL:
                if self.is_main:
                    return f"{self.name} {self.sourceloc.loc_str()}"
                else:
                    og_str = f"{self.name} {self.sourceloc.loc_str()}"
                    component_str = (
                        f"{self.component_name} {self.component_sourceloc.loc_str()}"
                    )
                    if self.replacement_cell_name is not None:
                        replacement_str = self.replacement_cell_sourceloc.loc_str()
                        return f"{og_str} ({replacement_str}) [{component_str}]"
                    else:
                        return f"{og_str} [{component_str}]"
            case StackElementType.CONTROL_GROUP:
                return f"{self.name} (ctrl) {{{self.compiler_generated_msg}}}"
