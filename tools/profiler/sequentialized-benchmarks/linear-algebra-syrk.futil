// git.status = clean, build.date = Tue Sep 10 15:01:49 EDT 2024, git.hash = 164c2dd
import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    A0_0 = seq_mem_d2(32,12,8,4,4);
    A_i_k_0 = std_reg(32);
    @external(1) A_int = seq_mem_d2(32,12,8,4,4);
    A_int_read0_0 = std_reg(32);
    A_read0_0 = std_reg(32);
    A_sh_read0_0 = std_reg(32);
    @external(1) C = seq_mem_d2(32,12,12,4,4);
    C_i_j_0 = std_reg(32);
    add0 = std_add(4);
    add1 = std_add(4);
    add2 = std_add(4);
    add3 = std_add(32);
    add4 = std_add(4);
    add5 = std_add(4);
    add6 = std_add(4);
    add7 = std_add(4);
    add8 = std_add(4);
    @external(1) alpha_int = seq_mem_d1(32,1,1);
    alpha_int_read0_0 = std_reg(32);
    @external(1) beta_int = seq_mem_d1(32,1,1);
    beta_int_read0_0 = std_reg(32);
    bin_read0_0 = std_reg(32);
    bin_read1_0 = std_reg(32);
    bin_read2_0 = std_reg(32);
    const0 = std_const(4,0);
    const1 = std_const(4,0);
    const10 = std_const(1,0);
    const11 = std_const(4,1);
    const12 = std_const(4,1);
    const13 = std_const(4,1);
    const14 = std_const(4,0);
    const15 = std_const(4,0);
    const16 = std_const(4,1);
    const17 = std_const(4,1);
    const2 = std_const(4,1);
    const3 = std_const(4,1);
    const4 = std_const(4,0);
    const5 = std_const(4,0);
    const6 = std_const(1,0);
    const7 = std_const(4,1);
    const8 = std_const(4,0);
    const9 = std_const(4,0);
    i0 = std_reg(4);
    i00 = std_reg(4);
    i01 = std_reg(4);
    j00 = std_reg(4);
    j01 = std_reg(4);
    j2_0 = std_reg(4);
    j_0 = std_reg(4);
    k0 = std_reg(4);
    le0 = std_le(4);
    le1 = std_le(4);
    mult_pipe0 = std_mult_pipe(32);
    mult_pipe1 = std_mult_pipe(32);
    mult_pipe2 = std_mult_pipe(32);
    red_read00 = std_reg(32);
    t_0 = std_reg(32);
  }
  wires {
    comb group cond0 {
      le0.left = j_0.out;
      le0.right = i0.out;
    }
    comb group cond1 {
      le1.left = j2_0.out;
      le1.right = i0.out;
    }
    group let0<"promotable"=1> {
      i00.in = const0.out;
      i00.write_en = 1'd1;
      let0[done] = i00.done;
    }
    group let1<"promotable"=1> {
      j00.in = const1.out;
      j00.write_en = 1'd1;
      let1[done] = j00.done;
    }
    group let10<"promotable"=2> {
      alpha_int_read0_0.in = alpha_int.read_data;
      alpha_int_read0_0.write_en = alpha_int.done;
      let10[done] = alpha_int_read0_0.done;
      alpha_int.content_en = 1'd1;
      alpha_int.addr0 = const10.out;
    }
    group let11<"promotable"=4> {
      bin_read1_0.in = mult_pipe1.out;
      bin_read1_0.write_en = mult_pipe1.done;
      let11[done] = bin_read1_0.done;
      mult_pipe1.left = alpha_int_read0_0.out;
      mult_pipe1.right = A_i_k_0.out;
      mult_pipe1.go = !mult_pipe1.done ? 1'd1;
    }
    group let12<"promotable"=4> {
      bin_read2_0.in = mult_pipe2.out;
      bin_read2_0.write_en = mult_pipe2.done;
      let12[done] = bin_read2_0.done;
      mult_pipe2.left = bin_read1_0.out;
      mult_pipe2.right = A_read0_0.out;
      mult_pipe2.go = !mult_pipe2.done ? 1'd1;
    }
    group let13<"promotable"=1> {
      t_0.in = bin_read2_0.out;
      t_0.write_en = 1'd1;
      let13[done] = t_0.done;
    }
    group let14<"promotable"=2> {
      red_read00.in = C.read_data;
      red_read00.write_en = C.done;
      let14[done] = red_read00.done;
      C.content_en = 1'd1;
      C.addr1 = j2_0.out;
      C.addr0 = i0.out;
    }
    group let15<"promotable"=1> {
      i01.in = const14.out;
      i01.write_en = 1'd1;
      let15[done] = i01.done;
    }
    group let16<"promotable"=1> {
      j01.in = const15.out;
      j01.write_en = 1'd1;
      let16[done] = j01.done;
    }
    group let2<"promotable"=2> {
      A_int_read0_0.in = A_int.read_data;
      A_int_read0_0.write_en = A_int.done;
      let2[done] = A_int_read0_0.done;
      A_int.content_en = 1'd1;
      A_int.addr1 = j00.out;
      A_int.addr0 = i00.out;
    }
    group let3<"promotable"=1> {
      i0.in = const4.out;
      i0.write_en = 1'd1;
      let3[done] = i0.done;
    }
    group let4<"promotable"=1> {
      j_0.in = const5.out;
      j_0.write_en = 1'd1;
      let4[done] = j_0.done;
    }
    group let5<"promotable"=2> {
      C_i_j_0.in = C.read_data;
      C_i_j_0.write_en = C.done;
      let5[done] = C_i_j_0.done;
      C.content_en = 1'd1;
      C.addr1 = j_0.out;
      C.addr0 = i0.out;
    }
    group let6<"promotable"=2> {
      beta_int_read0_0.in = beta_int.read_data;
      beta_int_read0_0.write_en = beta_int.done;
      let6[done] = beta_int_read0_0.done;
      beta_int.content_en = 1'd1;
      beta_int.addr0 = const6.out;
    }
    group let7<"promotable"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let7[done] = bin_read0_0.done;
      mult_pipe0.left = C_i_j_0.out;
      mult_pipe0.right = beta_int_read0_0.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group let8<"promotable"=1> {
      j2_0.in = const8.out;
      j2_0.write_en = 1'd1;
      let8[done] = j2_0.done;
    }
    group let9<"promotable"=1> {
      k0.in = const9.out;
      k0.write_en = 1'd1;
      let9[done] = k0.done;
    }
    group upd0<"promotable"=1> {
      A0_0.content_en = 1'd1;
      A0_0.addr1 = j00.out;
      A0_0.addr0 = i00.out;
      A0_0.write_en = 1'd1;
      A0_0.write_data = A_int_read0_0.out;
      upd0[done] = A0_0.done;
    }
    group upd1<"promotable"=1> {
      j00.write_en = 1'd1;
      add0.left = j00.out;
      add0.right = const2.out;
      j00.in = add0.out;
      upd1[done] = j00.done;
    }
    group upd10<"promotable"=1> {
      i0.write_en = 1'd1;
      add6.left = i0.out;
      add6.right = const13.out;
      i0.in = add6.out;
      upd10[done] = i0.done;
    }
    group upd11<"promotable"=2> {
      A_sh_read0_0.write_en = A0_0.done;
      A0_0.content_en = 1'd1;
      A0_0.addr1 = j01.out;
      A0_0.addr0 = i01.out;
      A_sh_read0_0.in = A0_0.read_data;
      upd11[done] = A_sh_read0_0.done;
    }
    group upd12<"promotable"=1> {
      A_int.content_en = 1'd1;
      A_int.addr1 = j01.out;
      A_int.addr0 = i01.out;
      A_int.write_en = 1'd1;
      A_int.write_data = A_sh_read0_0.out;
      upd12[done] = A_int.done;
    }
    group upd13<"promotable"=1> {
      j01.write_en = 1'd1;
      add7.left = j01.out;
      add7.right = const16.out;
      j01.in = add7.out;
      upd13[done] = j01.done;
    }
    group upd14<"promotable"=1> {
      i01.write_en = 1'd1;
      add8.left = i01.out;
      add8.right = const17.out;
      i01.in = add8.out;
      upd14[done] = i01.done;
    }
    group upd2<"promotable"=1> {
      i00.write_en = 1'd1;
      add1.left = i00.out;
      add1.right = const3.out;
      i00.in = add1.out;
      upd2[done] = i00.done;
    }
    group upd3<"promotable"=1> {
      C.content_en = 1'd1;
      C.addr1 = j_0.out;
      C.addr0 = i0.out;
      C.write_en = 1'd1;
      C.write_data = bin_read0_0.out;
      upd3[done] = C.done;
    }
    group upd4<"promotable"=1> {
      j_0.write_en = 1'd1;
      add2.left = j_0.out;
      add2.right = const7.out;
      j_0.in = add2.out;
      upd4[done] = j_0.done;
    }
    group upd5<"promotable"=2> {
      A_i_k_0.write_en = A0_0.done;
      A0_0.content_en = 1'd1;
      A0_0.addr1 = k0.out;
      A0_0.addr0 = i0.out;
      A_i_k_0.in = A0_0.read_data;
      upd5[done] = A_i_k_0.done;
    }
    group upd6<"promotable"=2> {
      A_read0_0.write_en = A0_0.done;
      A0_0.content_en = 1'd1;
      A0_0.addr1 = k0.out;
      A0_0.addr0 = j2_0.out;
      A_read0_0.in = A0_0.read_data;
      upd6[done] = A_read0_0.done;
    }
    group upd7<"promotable"=1> {
      C.content_en = 1'd1;
      C.addr1 = j2_0.out;
      C.addr0 = i0.out;
      C.write_en = 1'd1;
      add3.left = red_read00.out;
      add3.right = t_0.out;
      C.write_data = add3.out;
      upd7[done] = C.done;
    }
    group upd8<"promotable"=1> {
      k0.write_en = 1'd1;
      add4.left = k0.out;
      add4.right = const11.out;
      k0.in = add4.out;
      upd8[done] = k0.done;
    }
    group upd9<"promotable"=1> {
      j2_0.write_en = 1'd1;
      add5.left = j2_0.out;
      add5.right = const12.out;
      j2_0.in = add5.out;
      upd9[done] = j2_0.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      repeat 12 {
        seq {
          @pos(1) let1;
          repeat 8 {
            seq {
              @pos(2) let2;
              @pos(3) upd0;
              @pos(1) upd1;
            }
          }
          @pos(0) upd2;
        }
      }
      @pos(4) let3;
      repeat 12 {
        seq {
          @pos(5) let4;
          while le0.out with cond0 {
            seq {
              @pos(6) let5;
              @pos(7) let6;
              let7;
              upd3;
              @pos(8) upd4;
            }
          }
          @pos(9) let8;
          while le1.out with cond1 {
            seq {
              @pos(10) let9;
              repeat 8 {
                seq {
                  @pos(11) upd5;
                  seq {
                    @pos(12) let10;
                    @pos(13) upd6;
                  }
                  let11;
                  let12;
                  let13;
                  let14;
                  upd7;
                  @pos(10) upd8;
                }
              }
              @pos(14) upd9;
            }
          }
          @pos(4) upd10;
        }
      }
      @pos(15) let15;
      repeat 12 {
        seq {
          @pos(16) let16;
          repeat 8 {
            seq {
              @pos(17) upd11;
              @pos(18) upd12;
              @pos(16) upd13;
            }
          }
          @pos(15) upd14;
        }
      }
    }
  }
}
metadata #{
  0: for (let i0: ubit<4> = 0..12) {
  1:   for (let j0: ubit<4> = 0..8) {
  2:     A_sh[i0][j0] := A_int[i0][j0];
  3:     A_sh[i0][j0] := A_int[i0][j0];
  4: for (let i: ubit<4> = 0..12) {
  5:   let j: ubit<4> = 0;
  6:     let C_i_j: ubit<32> = C[i][j];
  7:     C[i][j] := C_i_j * beta_int[0];
  8:     j := j + (1 as ubit<4>);
  9:   let j2: ubit<4> = 0;
  10:     for (let k: ubit<4> = 0..8) {
  11:       let A_i_k: ubit<32> = A[i][k];
  12:       let t = alpha_int[0] * A_i_k * A[j2][k];
  13:       let t = alpha_int[0] * A_i_k * A[j2][k];
  14:     j2 := j2 + (1 as ubit<4>);
  15: for (let i0: ubit<4> = 0..12) {
  16:   for (let j0: ubit<4> = 0..8) {
  17:     A_int[i0][j0] := A_sh[i0][j0];
  18:     A_int[i0][j0] := A_sh[i0][j0];
}#
