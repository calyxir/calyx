// git.status = clean, build.date = Tue Sep 10 15:01:49 EDT 2024, git.hash = 164c2dd
import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    @external(1) A_int = seq_mem_d2(32,8,8,4,4);
    A_int_read0_0 = std_reg(32);
    B_i_j_0 = std_reg(32);
    B_i_j_1 = std_reg(32);
    @external(1) B_int = seq_mem_d2(32,8,12,4,4);
    B_k_j_0 = std_reg(32);
    add0 = std_add(4);
    add1 = std_add(32);
    add2 = std_add(4);
    add3 = std_add(4);
    add4 = std_add(4);
    @external(1) alpha_int = seq_mem_d1(32,1,1);
    alpha_int_read0_0 = std_reg(32);
    bin_read0_0 = std_reg(32);
    bin_read1_0 = std_reg(32);
    const0 = std_const(4,0);
    const1 = std_const(4,0);
    const2 = std_const(4,1);
    const3 = std_const(4,1);
    const4 = std_const(4,8);
    const5 = std_const(1,0);
    const6 = std_const(4,1);
    const7 = std_const(4,1);
    i0 = std_reg(4);
    j0 = std_reg(4);
    k_0 = std_reg(4);
    lt0 = std_lt(4);
    mult_pipe0 = std_mult_pipe(32);
    mult_pipe1 = std_mult_pipe(32);
  }
  wires {
    comb group cond0 {
      lt0.left = k_0.out;
      lt0.right = const4.out;
    }
    group let0<"promotable"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"promotable"=1> {
      j0.in = const1.out;
      j0.write_en = 1'd1;
      let1[done] = j0.done;
    }
    group let2<"promotable"=1> {
      k_0.in = add0.out;
      k_0.write_en = 1'd1;
      let2[done] = k_0.done;
      add0.left = i0.out;
      add0.right = const2.out;
    }
    group let3<"promotable"=2> {
      B_i_j_0.in = B_int.read_data;
      B_i_j_0.write_en = B_int.done;
      let3[done] = B_i_j_0.done;
      B_int.content_en = 1'd1;
      B_int.addr1 = j0.out;
      B_int.addr0 = i0.out;
    }
    group let4<"promotable"=2> {
      B_k_j_0.in = B_int.read_data;
      B_k_j_0.write_en = B_int.done;
      let4[done] = B_k_j_0.done;
      B_int.content_en = 1'd1;
      B_int.addr1 = j0.out;
      B_int.addr0 = k_0.out;
    }
    group let5<"promotable"=2> {
      A_int_read0_0.in = A_int.read_data;
      A_int_read0_0.write_en = A_int.done;
      let5[done] = A_int_read0_0.done;
      A_int.content_en = 1'd1;
      A_int.addr1 = i0.out;
      A_int.addr0 = k_0.out;
    }
    group let6<"promotable"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let6[done] = bin_read0_0.done;
      mult_pipe0.left = A_int_read0_0.out;
      mult_pipe0.right = B_k_j_0.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group let7<"promotable"=2> {
      B_i_j_1.in = B_int.read_data;
      B_i_j_1.write_en = B_int.done;
      let7[done] = B_i_j_1.done;
      B_int.content_en = 1'd1;
      B_int.addr1 = j0.out;
      B_int.addr0 = i0.out;
    }
    group let8<"promotable"=2> {
      alpha_int_read0_0.in = alpha_int.read_data;
      alpha_int_read0_0.write_en = alpha_int.done;
      let8[done] = alpha_int_read0_0.done;
      alpha_int.content_en = 1'd1;
      alpha_int.addr0 = const5.out;
    }
    group let9<"promotable"=4> {
      bin_read1_0.in = mult_pipe1.out;
      bin_read1_0.write_en = mult_pipe1.done;
      let9[done] = bin_read1_0.done;
      mult_pipe1.left = alpha_int_read0_0.out;
      mult_pipe1.right = B_i_j_1.out;
      mult_pipe1.go = !mult_pipe1.done ? 1'd1;
    }
    group upd0<"promotable"=1> {
      B_int.content_en = 1'd1;
      B_int.addr1 = j0.out;
      B_int.addr0 = i0.out;
      B_int.write_en = 1'd1;
      add1.left = bin_read0_0.out;
      add1.right = B_i_j_0.out;
      B_int.write_data = add1.out;
      upd0[done] = B_int.done;
    }
    group upd1<"promotable"=1> {
      k_0.write_en = 1'd1;
      add2.left = k_0.out;
      add2.right = const3.out;
      k_0.in = add2.out;
      upd1[done] = k_0.done;
    }
    group upd2<"promotable"=1> {
      B_int.content_en = 1'd1;
      B_int.addr1 = j0.out;
      B_int.addr0 = i0.out;
      B_int.write_en = 1'd1;
      B_int.write_data = bin_read1_0.out;
      upd2[done] = B_int.done;
    }
    group upd3<"promotable"=1> {
      j0.write_en = 1'd1;
      add3.left = j0.out;
      add3.right = const6.out;
      j0.in = add3.out;
      upd3[done] = j0.done;
    }
    group upd4<"promotable"=1> {
      i0.write_en = 1'd1;
      add4.left = i0.out;
      add4.right = const7.out;
      i0.in = add4.out;
      upd4[done] = i0.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      repeat 8 {
        seq {
          @pos(1) let1;
          repeat 12 {
            seq {
              @pos(2) let2;
              while lt0.out with cond0 {
                seq {
                  @pos(3) let3;
                  @pos(4) let4;
                  @pos(5) let5;
                  seq {
                    seq {
                      let6;
                      upd0;
                    }
                    @pos(6) upd1;
                  }
                }
              }
              @pos(7) let7;
              @pos(8) let8;
              let9;
              upd2;
              @pos(1) upd3;
            }
          }
          @pos(0) upd4;
        }
      }
    }
  }
}
metadata #{
  0: for (let i: ubit<4> = 0..8) {
  1:   for (let j: ubit<4> = 0..12) {
  2:     let k: ubit<4> = i + (1 as ubit<4>);
  3:       let B_i_j: ubit<32> = B_int[i][j];
  4:       let B_k_j: ubit<32> = B_int[k][j];
  5:       B_int[i][j] := A_int[k][i] * B_k_j + B_i_j;
  6:       k := k + (1 as ubit<4>);
  7:     let B_i_j: ubit<32> = B_int[i][j];
  8:     B_int[i][j] := alpha_int[0] * B_i_j;
}#
