// git.status = clean, build.date = Tue Sep 10 15:01:49 EDT 2024, git.hash = 164c2dd
import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    @external(1) L_int = seq_mem_d2(32,8,8,4,4);
    L_int_read0_0 = std_reg(32);
    L_int_read1_0 = std_reg(32);
    add0 = std_add(4);
    add1 = std_add(4);
    @external(1) b_int = seq_mem_d1(32,8,4);
    b_int_read0_0 = std_reg(32);
    bin_read0_0 = std_reg(32);
    bin_read1_0 = std_reg(32);
    const0 = std_const(4,0);
    const1 = std_const(4,0);
    const2 = std_const(4,1);
    const3 = std_const(4,1);
    div_pipe0 = std_div_pipe(32);
    i0 = std_reg(4);
    j_0 = std_reg(4);
    lt0 = std_lt(4);
    mult_pipe0 = std_mult_pipe(32);
    x_i_0 = std_reg(32);
    @external(1) x_int = seq_mem_d1(32,8,4);
    x_j_0 = std_reg(32);
  }
  wires {
    comb group cond0 {
      lt0.left = j_0.out;
      lt0.right = i0.out;
    }
    group let0<"promotable"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group let1<"promotable"=2> {
      b_int_read0_0.in = b_int.read_data;
      b_int_read0_0.write_en = b_int.done;
      let1[done] = b_int_read0_0.done;
      b_int.content_en = 1'd1;
      b_int.addr0 = i0.out;
    }
    group let2<"promotable"=1> {
      j_0.in = const1.out;
      j_0.write_en = 1'd1;
      let2[done] = j_0.done;
    }
    group let3<"promotable"=2> {
      x_j_0.in = x_int.read_data;
      x_j_0.write_en = x_int.done;
      let3[done] = x_j_0.done;
      x_int.content_en = 1'd1;
      x_int.addr0 = j_0.out;
    }
    group let4<"promotable"=2> {
      L_int_read0_0.in = L_int.read_data;
      L_int_read0_0.write_en = L_int.done;
      let4[done] = L_int_read0_0.done;
      L_int.content_en = 1'd1;
      L_int.addr1 = j_0.out;
      L_int.addr0 = i0.out;
    }
    group let5<"promotable"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let5[done] = bin_read0_0.done;
      mult_pipe0.left = L_int_read0_0.out;
      mult_pipe0.right = x_j_0.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group let6<"promotable"=2> {
      x_i_0.in = x_int.read_data;
      x_i_0.write_en = x_int.done;
      let6[done] = x_i_0.done;
      x_int.content_en = 1'd1;
      x_int.addr0 = i0.out;
    }
    group let7<"promotable"=2> {
      L_int_read1_0.in = L_int.read_data;
      L_int_read1_0.write_en = L_int.done;
      let7[done] = L_int_read1_0.done;
      L_int.content_en = 1'd1;
      L_int.addr1 = i0.out;
      L_int.addr0 = i0.out;
    }
    group let8 {
      bin_read1_0.in = div_pipe0.out_quotient;
      bin_read1_0.write_en = div_pipe0.done;
      let8[done] = bin_read1_0.done;
      div_pipe0.left = x_i_0.out;
      div_pipe0.right = L_int_read1_0.out;
      div_pipe0.go = !div_pipe0.done ? 1'd1;
    }
    group upd0<"promotable"=1> {
      x_int.content_en = 1'd1;
      x_int.addr0 = i0.out;
      x_int.write_en = 1'd1;
      x_int.write_data = b_int_read0_0.out;
      upd0[done] = x_int.done;
    }
    group upd1<"promotable"=1> {
      x_int.content_en = 1'd1;
      x_int.addr0 = i0.out;
      x_int.write_en = 1'd1;
      x_int.write_data = bin_read0_0.out;
      upd1[done] = x_int.done;
    }
    group upd2<"promotable"=1> {
      j_0.write_en = 1'd1;
      add0.left = j_0.out;
      add0.right = const2.out;
      j_0.in = add0.out;
      upd2[done] = j_0.done;
    }
    group upd3<"promotable"=1> {
      x_int.content_en = 1'd1;
      x_int.addr0 = i0.out;
      x_int.write_en = 1'd1;
      x_int.write_data = bin_read1_0.out;
      upd3[done] = x_int.done;
    }
    group upd4<"promotable"=1> {
      i0.write_en = 1'd1;
      add1.left = i0.out;
      add1.right = const3.out;
      i0.in = add1.out;
      upd4[done] = i0.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      repeat 8 {
        seq {
          @pos(1) let1;
          @pos(2) upd0;
          @pos(3) let2;
          while lt0.out with cond0 {
            seq {
              @pos(4) let3;
              @pos(5) let4;
              seq {
                seq {
                  let5;
                  upd1;
                }
                @pos(6) upd2;
              }
            }
          }
          @pos(7) let6;
          @pos(8) let7;
          let8;
          upd3;
          @pos(0) upd4;
        }
      }
    }
  }
}
metadata #{
  0: for (let i: ubit<4> = 0..8) {
  1:   x_int[i] := b_int[i];
  2:   x_int[i] := b_int[i];
  3:   let j: ubit<4> = 0;
  4:     let x_j: ubit<32> = x_int[j];
  5:     x_int[i] := L_int[i][j] * x_j;
  6:     j := j + 1;
  7:   let x_i: ubit<32> = x_int[i];
  8:   x_int[i] := x_i / L_int[i][i];
}#
