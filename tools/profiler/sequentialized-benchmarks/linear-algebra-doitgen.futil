// git.status = clean, build.date = Tue Sep 10 15:01:49 EDT 2024, git.hash = 164c2dd
import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    @external(1) A_int = seq_mem_d3(32,8,8,8,4,4,4);
    A_int_read0_0 = std_reg(32);
    @external(1) C4_int = seq_mem_d2(32,8,8,4,4);
    C4_int_read0_0 = std_reg(32);
    add0 = std_add(32);
    add1 = std_add(4);
    add2 = std_add(4);
    add3 = std_add(4);
    add4 = std_add(4);
    add5 = std_add(4);
    bin_read0_0 = std_reg(32);
    const0 = std_const(4,0);
    const1 = std_const(4,0);
    const10 = std_const(4,1);
    const2 = std_const(4,0);
    const3 = std_const(32,0);
    const4 = std_const(4,0);
    const5 = std_const(4,1);
    const6 = std_const(4,1);
    const7 = std_const(4,0);
    const8 = std_const(4,1);
    const9 = std_const(4,1);
    mult_pipe0 = std_mult_pipe(32);
    p0 = std_reg(4);
    p1 = std_reg(4);
    q0 = std_reg(4);
    r0 = std_reg(4);
    red_read00 = std_reg(32);
    s0 = std_reg(4);
    @external(1) sum_int = seq_mem_d1(32,8,4);
    sum_int_read0_0 = std_reg(32);
    v_0 = std_reg(32);
  }
  wires {
    group let0<"promotable"=1> {
      r0.in = const0.out;
      r0.write_en = 1'd1;
      let0[done] = r0.done;
    }
    group let1<"promotable"=1> {
      q0.in = const1.out;
      q0.write_en = 1'd1;
      let1[done] = q0.done;
    }
    group let10<"promotable"=2> {
      sum_int_read0_0.in = sum_int.read_data;
      sum_int_read0_0.write_en = sum_int.done;
      let10[done] = sum_int_read0_0.done;
      sum_int.content_en = 1'd1;
      sum_int.addr0 = p1.out;
    }
    group let2<"promotable"=1> {
      p0.in = const2.out;
      p0.write_en = 1'd1;
      let2[done] = p0.done;
    }
    group let3<"promotable"=1> {
      s0.in = const4.out;
      s0.write_en = 1'd1;
      let3[done] = s0.done;
    }
    group let4<"promotable"=2> {
      A_int_read0_0.in = A_int.read_data;
      A_int_read0_0.write_en = A_int.done;
      let4[done] = A_int_read0_0.done;
      A_int.content_en = 1'd1;
      A_int.addr2 = s0.out;
      A_int.addr1 = q0.out;
      A_int.addr0 = r0.out;
    }
    group let5<"promotable"=2> {
      C4_int_read0_0.in = C4_int.read_data;
      C4_int_read0_0.write_en = C4_int.done;
      let5[done] = C4_int_read0_0.done;
      C4_int.content_en = 1'd1;
      C4_int.addr1 = p0.out;
      C4_int.addr0 = s0.out;
    }
    group let6<"promotable"=4> {
      bin_read0_0.in = mult_pipe0.out;
      bin_read0_0.write_en = mult_pipe0.done;
      let6[done] = bin_read0_0.done;
      mult_pipe0.left = A_int_read0_0.out;
      mult_pipe0.right = C4_int_read0_0.out;
      mult_pipe0.go = !mult_pipe0.done ? 1'd1;
    }
    group let7<"promotable"=1> {
      v_0.in = bin_read0_0.out;
      v_0.write_en = 1'd1;
      let7[done] = v_0.done;
    }
    group let8<"promotable"=2> {
      red_read00.in = sum_int.read_data;
      red_read00.write_en = sum_int.done;
      let8[done] = red_read00.done;
      sum_int.content_en = 1'd1;
      sum_int.addr0 = p0.out;
    }
    group let9<"promotable"=1> {
      p1.in = const7.out;
      p1.write_en = 1'd1;
      let9[done] = p1.done;
    }
    group upd0<"promotable"=1> {
      sum_int.content_en = 1'd1;
      sum_int.addr0 = p0.out;
      sum_int.write_en = 1'd1;
      sum_int.write_data = const3.out;
      upd0[done] = sum_int.done;
    }
    group upd1<"promotable"=1> {
      sum_int.content_en = 1'd1;
      sum_int.addr0 = p0.out;
      sum_int.write_en = 1'd1;
      add0.left = red_read00.out;
      add0.right = v_0.out;
      sum_int.write_data = add0.out;
      upd1[done] = sum_int.done;
    }
    group upd2<"promotable"=1> {
      s0.write_en = 1'd1;
      add1.left = s0.out;
      add1.right = const5.out;
      s0.in = add1.out;
      upd2[done] = s0.done;
    }
    group upd3<"promotable"=1> {
      p0.write_en = 1'd1;
      add2.left = p0.out;
      add2.right = const6.out;
      p0.in = add2.out;
      upd3[done] = p0.done;
    }
    group upd4<"promotable"=1> {
      A_int.content_en = 1'd1;
      A_int.addr2 = p1.out;
      A_int.addr1 = q0.out;
      A_int.addr0 = r0.out;
      A_int.write_en = 1'd1;
      A_int.write_data = sum_int_read0_0.out;
      upd4[done] = A_int.done;
    }
    group upd5<"promotable"=1> {
      p1.write_en = 1'd1;
      add3.left = p1.out;
      add3.right = const8.out;
      p1.in = add3.out;
      upd5[done] = p1.done;
    }
    group upd6<"promotable"=1> {
      q0.write_en = 1'd1;
      add4.left = q0.out;
      add4.right = const9.out;
      q0.in = add4.out;
      upd6[done] = q0.done;
    }
    group upd7<"promotable"=1> {
      r0.write_en = 1'd1;
      add5.left = r0.out;
      add5.right = const10.out;
      r0.in = add5.out;
      upd7[done] = r0.done;
    }
  }
  control {
    seq {
      @pos(0) let0;
      repeat 8 {
        seq {
          @pos(1) let1;
          repeat 8 {
            seq {
              @pos(2) let2;
              repeat 8 {
                seq {
                  @pos(3) upd0;
                  @pos(4) let3;
                  repeat 8 {
                    seq {
                      seq {
                        @pos(5) let4;
                        @pos(6) let5;
                      }
                      let6;
                      let7;
                      let8;
                      upd1;
                      @pos(4) upd2;
                    }
                  }
                  @pos(2) upd3;
                }
              }
              @pos(7) let9;
              repeat 8 {
                seq {
                  @pos(8) let10;
                  @pos(9) upd4;
                  @pos(7) upd5;
                }
              }
              @pos(1) upd6;
            }
          }
          @pos(0) upd7;
        }
      }
    }
  }
}
metadata #{
  0: for (let r: ubit<4> = 0..8) {
  1:   for (let q: ubit<4> = 0..8) {
  2:     for (let p: ubit<4> = 0..8) {
  3:       sum_int[p] := 0;
  4:       for (let s: ubit<4> = 0..8) {
  5:         let v: ubit<32> = A_int[r][q][s] * C4_int[s][p];
  6:         let v: ubit<32> = A_int[r][q][s] * C4_int[s][p];
  7:     for (let p: ubit<4> = 0..8) {
  8:       A_int[r][q][p] := sum_int[p];
  9:       A_int[r][q][p] := sum_int[p];
}#
