import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component fifo(cmd: 1, value: 32) -> () {
  cells {
    mem = seq_mem_d1(32, 16, 4);
    reg_1 = std_reg(4);
    reg_2 = std_reg(4);
    ref ans = std_reg(32);
    ref err = std_reg(1);
    reg_3 = std_reg(5);
    eq_4 = std_eq(5);
    reg_2_incr_1_5 = std_add(4);
    reg_3_decr_1_6 = std_sub(5);
    eq_7 = std_eq(5);
    reg_1_incr_1_8 = std_add(4);
    reg_3_incr_1_9 = std_add(5);
    cmd_eq_0_10 = std_eq(1);
    cmd_eq_1_11 = std_eq(1);
  }
  wires {
    group raise_err {
      err.in = 1'd1;
      err.write_en = 1'd1;
      raise_err[done] = err.done;
    }
    comb group eq_4_group {
      eq_4.left = reg_3.out;
      eq_4.right = 5'd0;
    }
    group read_payload_from_mem_pop {
      mem.addr0 = reg_2.out;
      mem.content_en = 1'd1;
      ans.write_en = mem.done ? 1'd1;
      ans.in = mem.done ? mem.read_data;
      read_payload_from_mem_pop[done] = ans.done;
    }
    group reg_2_incr_1_5_group {
      reg_2_incr_1_5.left = reg_2.out;
      reg_2_incr_1_5.right = 4'd1;
      reg_2.write_en = 1'd1;
      reg_2.in = reg_2_incr_1_5.out;
      reg_2_incr_1_5_group[done] = reg_2.done;
    }
    group reg_3_decr_1_6_group {
      reg_3_decr_1_6.left = reg_3.out;
      reg_3_decr_1_6.right = 5'd1;
      reg_3.write_en = 1'd1;
      reg_3.in = reg_3_decr_1_6.out;
      reg_3_decr_1_6_group[done] = reg_3.done;
    }
    comb group eq_7_group {
      eq_7.left = reg_3.out;
      eq_7.right = 5'd16;
    }
    group write_payload_to_mem {
      mem.addr0 = reg_1.out;
      mem.write_en = 1'd1;
      mem.write_data = value;
      write_payload_to_mem[done] = mem.done;
      mem.content_en = 1'd1;
    }
    group reg_1_incr_1_8_group {
      reg_1_incr_1_8.left = reg_1.out;
      reg_1_incr_1_8.right = 4'd1;
      reg_1.write_en = 1'd1;
      reg_1.in = reg_1_incr_1_8.out;
      reg_1_incr_1_8_group[done] = reg_1.done;
    }
    group reg_3_incr_1_9_group {
      reg_3_incr_1_9.left = reg_3.out;
      reg_3_incr_1_9.right = 5'd1;
      reg_3.write_en = 1'd1;
      reg_3.in = reg_3_incr_1_9.out;
      reg_3_incr_1_9_group[done] = reg_3.done;
    }
    cmd_eq_0_10.left = cmd;
    cmd_eq_0_10.right = 1'd0;
    cmd_eq_1_11.left = cmd;
    cmd_eq_1_11.right = 1'd1;
  }
  control {
    par {
      if cmd_eq_0_10.out {
        if eq_4.out with eq_4_group {
          raise_err;
        } else {
          seq {
            read_payload_from_mem_pop;
            reg_2_incr_1_5_group;
            reg_3_decr_1_6_group;
          }
        }
      }
      if cmd_eq_1_11.out {
        if eq_7.out with eq_7_group {
          raise_err;
        } else {
          seq {
            write_payload_to_mem;
            reg_1_incr_1_8_group;
            reg_3_incr_1_9_group;
          }
        }
      }
    }
  }
}
component main(cmd: 1, value: 32) -> (ans: 32, err: 1) {
    cells {
        ans_reg = std_reg(32);
        err_reg = std_reg(1);
        queue = fifo();
    }
    wires {
        ans = ans_reg.out;
        err = err_reg.out;
        group dummy {
            ans_reg.in = ans_reg.out;
            ans_reg.write_en = 1'b1;
            dummy[done] = ans_reg.done;
        }
    }
    control {
        seq {
            invoke queue[ans = ans_reg, err = err_reg](cmd = cmd, value = value)();
            dummy;
        }
    }
}
