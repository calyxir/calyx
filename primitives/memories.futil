primitive seq_mem_d1[WIDTH, SIZE, IDX_SIZE](
  @clk clk: 1,
  @reset reset: 1,
  addr0: IDX_SIZE,
  // Write ports
  @write_together(1) @static(1) @go(1) write_en: 1,
  @write_together(1) in: WIDTH,
  // Read ports
  @static(1) @go(2) read_en: 1
) -> (
  @stable out: WIDTH,
  @done(1) write_done: 1,
  @done(2) read_done: 1
){
  // Internal memory 
  (* ram_style = "ultra" *)  logic [WIDTH-1:0] mem[SIZE-1:0];

  // Register for the read output
  logic [WIDTH-1:0] read_out;
  assign out = read_out;

  // Read value from the memory
  always_ff @(posedge clk) begin
    if (reset) begin
      read_out <= '0;
    end else if (read_en) begin
      /* verilator lint_off WIDTH */
      read_out <= mem[addr0];
    end else if (write_en) begin
      // Explicitly clobber the read output when a write is performed
      read_out <= 'x;
    end else begin
      read_out <= read_out;
    end
  end

  // Propagate the read_done signal
  always_ff @(posedge clk) begin
    if (reset) begin
      read_done <= '0;
    end else if (read_en) begin
      read_done <= '1;
    end else begin
      read_done <= '0;
    end
  end

  // Write value to the memory
  always_ff @(posedge clk) begin
    if (write_en)
      mem[addr0] <= in;
  end

  // Propagate the write_done signal
  always_ff @(posedge clk) begin
    if (reset) begin
      write_done <= '0;
    end else if (write_en) begin
      write_done <= 1'd1;
    end else begin
      write_done <= '0;
    end
  end

  // Check for out of bounds access
  `ifdef VERILATOR
    always_comb begin
      if (addr0 >= SIZE)
        $error(
          "std_mem_d1: Out of bounds access\n",
          "addr0: %0d\n", addr0,
          "SIZE: %0d", SIZE
        );
    end
    always_comb begin
      if (read_en && write_en)
        $error("Simultaneous read and write attempted\n");
    end
  `endif
};

primitive seq_mem_d2[WIDTH, D0_SIZE, D1_SIZE, D0_IDX_SIZE, D1_IDX_SIZE](
  @clk clk: 1,
  @reset reset: 1,
  addr0: D0_IDX_SIZE,
  addr1: D1_IDX_SIZE,
  // Write ports
  @write_together(1) @static(1) @go(1) write_en: 1,
  @write_together(1) in: WIDTH,
  // Read ports
  @static(1) @go(2) read_en: 1
) -> (
  @stable out: WIDTH,
  @done(1) write_done: 1,
  @done(2) read_done: 1
){
  wire [D0_IDX_SIZE+D1_IDX_SIZE-1:0] addr;
  assign addr = addr0 * D1_SIZE + addr1;

  seq_mem_d1 #(.WIDTH(WIDTH), .SIZE(D0_SIZE * D1_SIZE), .IDX_SIZE(D0_IDX_SIZE+D1_IDX_SIZE)) mem
     (.clk(clk), .reset(reset), .addr0(addr), 
    .read_en(read_en), .out(out), .read_done(read_done), .in(in), .write_en(write_en), 
    .write_done(write_done));
};

primitive seq_mem_d3[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE](
  @clk clk: 1,
  @reset reset: 1,
  addr0: D0_IDX_SIZE,
  addr1: D1_IDX_SIZE,
  addr2: D2_IDX_SIZE,
  // Write ports
  @write_together(1) @static(1) @go(1) write_en: 1,
  @write_together(1) in: WIDTH,
  // Read ports
  @static(1) @go(2) read_en: 1
) -> (
  @stable out: WIDTH,
  @done(1) write_done: 1,
  @done(2) read_done: 1
){
  wire [D0_IDX_SIZE+D1_IDX_SIZE+D2_IDX_SIZE-1:0] addr;
  assign addr = addr0 * (D1_SIZE * D2_SIZE) + addr1 * (D2_SIZE) + addr2;

  seq_mem_d1 #(.WIDTH(WIDTH), .SIZE(D0_SIZE * D1_SIZE * D2_SIZE), .IDX_SIZE(D0_IDX_SIZE+D1_IDX_SIZE+D2_IDX_SIZE)) mem
     (.clk(clk), .reset(reset), .addr0(addr), 
    .read_en(read_en), .out(out), .read_done(read_done), .in(in), .write_en(write_en), 
    .write_done(write_done));
};

primitive seq_mem_d4[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D3_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE, D3_IDX_SIZE](
  @clk clk: 1,
  @reset reset: 1,
  addr0: D0_IDX_SIZE,
  addr1: D1_IDX_SIZE,
  addr2: D2_IDX_SIZE,
  addr3: D3_IDX_SIZE,
  // Write ports
  @write_together(1) @static(1) @go(1) write_en: 1,
  @write_together(1) in: WIDTH,
  // Read ports
  @static(1) @go(2) read_en: 1
) -> (
  @stable out: WIDTH,
  @done(1) write_done: 1,
  @done(2) read_done: 1
){
  wire [D0_IDX_SIZE+D1_IDX_SIZE+D2_IDX_SIZE+D3_IDX_SIZE-1:0] addr;
  assign addr = addr0 * (D1_SIZE * D2_SIZE * D3_SIZE) + addr1 * (D2_SIZE * D3_SIZE) + addr2 * (D3_SIZE) + addr3;

  seq_mem_d1 #(.WIDTH(WIDTH), .SIZE(D0_SIZE * D1_SIZE * D2_SIZE * D3_SIZE), .IDX_SIZE(D0_IDX_SIZE+D1_IDX_SIZE+D2_IDX_SIZE+D3_IDX_SIZE)) mem
      (.clk(clk), .reset(reset), .addr0(addr), 
    .read_en(read_en), .out(out), .read_done(read_done), .in(in), .write_en(write_en), 
    .write_done(write_done));
};