// vim: set ft=:
// vim: set noai nocin nosi inde=:

primitive std_mem_d1[width, size, idx_size](
  addr0: idx_size,
  write_data: width,
  write_en: 1,
  clk: 1
) -> (read_data: width, done: 1);

// Represents an external memory
primitive std_mem_d1_ext[width, size, idx_size](
  addr0: idx_size,
  write_data: width,
  write_en: 1,
  clk: 1
) -> (read_data: width, done: 1);


primitive std_mem_d2[width, d0_size, d1_size, d0_idx_size, d1_idx_size](
  addr0: d0_idx_size,
  addr1: d1_idx_size,
  write_data: width,
  write_en: 1,
  clk: 1
) -> (read_data: width, done: 1);

primitive std_mem_d2_ext[width, d0_size, d1_size, d0_idx_size, d1_idx_size](
  addr0: d0_idx_size,
  addr1: d1_idx_size,
  write_data: width,
  write_en: 1,
  clk: 1
) -> (read_data: width, done: 1);

primitive std_mem_d3[
    width,
    d0_size,
    d1_size,
    d2_size,
    d0_idx_size,
    d1_idx_size,
    d2_idx_size
] (
  addr0: d0_idx_size,
  addr1: d1_idx_size,
  addr2: d2_idx_size,
  write_data: width,
  write_en: 1,
  clk: 1
) -> (read_data: width, done: 1);

primitive std_mem_d3_ext[
    width,
    d0_size,
    d1_size,
    d2_size,
    d0_idx_size,
    d1_idx_size,
    d2_idx_size
] (
  addr0: d0_idx_size,
  addr1: d1_idx_size,
  addr2: d2_idx_size,
  write_data: width,
  write_en: 1,
  clk: 1
) -> (read_data: width, done: 1);

primitive std_mem_d4[
    width,
    d0_size,
    d1_size,
    d2_size,
    d3_size,
    d0_idx_size,
    d1_idx_size,
    d2_idx_size,
    d3_idx_size
] (
  addr0: d0_idx_size,
  addr1: d1_idx_size,
  addr2: d2_idx_size,
  addr3: d3_idx_size,
  write_data: width,
  write_en: 1,
  clk: 1
) -> (read_data: width, done: 1);

primitive std_mem_d4_ext[
    width,
    d0_size,
    d1_size,
    d2_size,
    d3_size,
    d0_idx_size,
    d1_idx_size,
    d2_idx_size,
    d3_idx_size
] (
  addr0: d0_idx_size,
  addr1: d1_idx_size,
  addr2: d2_idx_size,
  addr3: d3_idx_size,
  write_data: width,
  write_en: 1,
  clk: 1
) -> (read_data: width, done: 1);

primitive std_logsize_mem_d1[width, logsize](
  addr0: logsize,
  write_data: width,
  write_en: 1,
  clk: 1
) -> (read_data: width);

primitive std_reg<"static"=1>[width](in: width, write_en: 1, clk: 1) -> (out: width, done: 1);

primitive std_shift_reg[width, depth](in: width, write_en: 1, clk: 1) -> (out: width, done: 1);

primitive std_const<"share"=1>[width, value]() -> (out: width);

primitive std_slice<"share"=1>[in_width, out_width](in: in_width) -> (out: out_width);

primitive std_lsh<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_rsh<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_add<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_sub<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_mod<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_mod_pipe[width]
(clk: 1, reset: 1, go: 1, left: width, right: width)
-> (out: width, done: 1);

primitive std_mult<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_mult_pipe[width](left: width, right: width, go: 1, clk: 1) -> (out: width, done: 1);

primitive std_div<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_div_pipe[width]
(clk: 1, reset: 1, go: 1, left: width, right: width)
-> (out: width, done: 1);


primitive std_not<"share"=1>[width](in: width) -> (out: width);

primitive std_and<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_or<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_xor[p_width](left: p_width, right: p_width) -> (out: p_width);

primitive std_gt<"share"=1>[width](left: width, right: width) -> (out: 1);

primitive std_lt<"share"=1>[width](left: width, right: width) -> (out: 1);

primitive std_eq<"share"=1>[width](left: width, right: width) -> (out: 1);

primitive std_neq<"share"=1>[width](left: width, right: width) -> (out: 1);

primitive std_ge<"share"=1>[width](left: width, right: width) -> (out: 1);

primitive std_le<"share"=1>[width](left: width, right: width) -> (out: 1);

primitive std_exp(exponent: 32, go: 1, clk: 1) -> (out: 32, done: 1);

primitive std_sqrt(in: 32, go: 1, clk: 1) -> (out: 32, done: 1);

/////// fixed_point primitive ///////////

primitive fixed_p_std_const[width, int_width, fract_width, value1, value2]() -> (out: width);

primitive fixed_p_std_add[width, int_width, fract_width] (left: width, right: width) ->(out: width);

primitive fixed_p_std_sub[width, int_width, fract_width] (left: width, right: width)->(out: width);

primitive fixed_p_std_mult[width, int_width, fract_width](left: width, right: width)->(out: width);

primitive fixed_p_std_div[width, int_width, fract_width](left: width, right: width)->(out: width);

primitive fixed_p_std_gt<"share"=1>[width, int_width, fract_width](left: width, right: width) -> (out: 1);

primitive fixed_p_std_add_dbit[width1, width2 , int_width1, fract_width1, int_width2, fract_width2, out_width] (left: width1, right: width2)
->(out: out_width);

/////// signed primitives ///////
primitive std_slsh<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_srsh<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_sadd<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_ssub<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_smod<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_smod_pipe[width](clk: 1, reset: 1, go: 1, left: width, right: width)
-> (out: width, done: 1);

primitive std_smult<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_smult_pipe[width](left: width, right: width, go: 1, clk: 1) -> (out: width, done: 1);

primitive std_sdiv<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_sdiv_pipe[width](clk: 1, reset: 1, go: 1, left: width, right: width)
-> (out: width, done: 1);

primitive std_snot<"share"=1>[width](in: width) -> (out: width);

primitive std_sand<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_sor<"share"=1>[width](left: width, right: width) -> (out: width);

primitive std_sgt<"share"=1>[width](left: width, right: width) -> (out: 1);

primitive std_slt<"share"=1>[width](left: width, right: width) -> (out: 1);

primitive std_seq<"share"=1>[width](left: width, right: width) -> (out: 1);

primitive std_sneq<"share"=1>[width](left: width, right: width) -> (out: 1);

primitive std_sge<"share"=1>[width](left: width, right: width) -> (out: 1);

primitive std_sle<"share"=1>[width](left: width, right: width) -> (out: 1);

primitive std_ssqrt(in: 32, go: 1, clk: 1) -> (out: 32, done: 1);

///signed fixedpoint

primitive fixed_p_std_sadd[width, int_width, fract_width] (left: width, right: width) ->(out: width);

primitive fixed_p_std_ssub[width, int_width, fract_width] (left: width, right: width)->(out: width);

primitive fixed_p_std_smult[width, int_width, fract_width](left: width, right: width)->(out: width);

primitive fixed_p_std_sdiv[width, int_width, fract_width](left: width, right: width)->(out: width);

primitive sfixed_p_std_add_dbit[width1, width2 , int_width1, fract_width1, int_width2, fract_width2, out_width] (left: width1, right: width2)
->(out: out_width);

primitive fixed_p_std_sgt<"share"=1>[width, int_width, fract_width](left: width, right: width) -> (out: 1);
