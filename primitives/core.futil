extern "core.sv" {
  /// Primitives
  comb primitive std_const<"share"=1>[WIDTH, VALUE]() -> (out: WIDTH);
  comb primitive std_wire<"share"=1>[WIDTH](in: WIDTH) -> (out: WIDTH);
  comb primitive std_slice<"share"=1>[IN_WIDTH, OUT_WIDTH](in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_pad<"share"=1>[IN_WIDTH, OUT_WIDTH](in: IN_WIDTH) -> (out: OUT_WIDTH);

  /// Logical operators
  comb primitive std_not<"share"=1>[WIDTH](in: WIDTH) -> (out: WIDTH);
  comb primitive std_and<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_or<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_xor<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);

  /// Numerical Operators
  comb primitive std_add<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_sub<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_gt<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_lt<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_eq<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_neq<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_ge<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_le<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: 1);
  comb primitive std_lsh<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_rsh<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  comb primitive std_mux<"share"=1>[WIDTH](cond: 1, tru: WIDTH, fal: WIDTH) -> (out: WIDTH);

  /// Memories
  // ANCHOR: std_reg_def
  primitive std_reg<"state_share"=1,"static"=1>[WIDTH](
    @write_together(1) in: WIDTH,
    @write_together(1) @go write_en: 1,
    @clk clk: 1,
    @reset reset: 1
  ) -> (
    @stable out: WIDTH,
    @done done: 1
  );
  // ANCHOR_END: std_reg_def

  primitive std_mem_d1<"static"=1>[WIDTH, SIZE, IDX_SIZE](
    @read_together(1) addr0: IDX_SIZE,
    @write_together(1) write_data: WIDTH,
    @write_together(1) @go write_en: 1,
    @clk clk: 1
  ) -> (
    @read_together(1) read_data: WIDTH,
    @done done: 1
  );

  primitive std_mem_d2<"static"=1>[WIDTH, D0_SIZE, D1_SIZE, D0_IDX_SIZE, D1_IDX_SIZE](
    @read_together(1) @write_together(2) addr0: D0_IDX_SIZE,
    @read_together(1) @write_together(2) addr1: D1_IDX_SIZE,
    @write_together(1) write_data: WIDTH,
    @write_together(1) @go write_en: 1,
    @clk clk: 1
  ) -> (
    @read_together(1) read_data: WIDTH,
    @done done: 1
  );

  primitive std_mem_d3<"static"=1>[
      WIDTH,
      D0_SIZE,
      D1_SIZE,
      D2_SIZE,
      D0_IDX_SIZE,
      D1_IDX_SIZE,
      D2_IDX_SIZE
  ] (
    @read_together(1) @write_together(2) addr0: D0_IDX_SIZE,
    @read_together(1) @write_together(2) addr1: D1_IDX_SIZE,
    @read_together(1) @write_together(2) addr2: D2_IDX_SIZE,
    @write_together(1) write_data: WIDTH,
    @write_together(1) @go write_en: 1,
    @clk clk: 1
  ) -> (
    @read_together(1) read_data: WIDTH,
    @done done: 1
  );

  primitive std_mem_d4<"static"=1>[
      WIDTH,
      D0_SIZE,
      D1_SIZE,
      D2_SIZE,
      D3_SIZE,
      D0_IDX_SIZE,
      D1_IDX_SIZE,
      D2_IDX_SIZE,
      D3_IDX_SIZE
  ] (
    @read_together(1) @write_together(2) addr0: D0_IDX_SIZE,
    @read_together(1) @write_together(2) addr1: D1_IDX_SIZE,
    @read_together(1) @write_together(2) addr2: D2_IDX_SIZE,
    @read_together(1) @write_together(2) addr3: D3_IDX_SIZE,
    @write_together(1) write_data: WIDTH,
    @write_together(1) @go write_en: 1,
    @clk clk: 1
  ) -> (
    @read_together(1) read_data: WIDTH,
    @done done: 1
  );
}
