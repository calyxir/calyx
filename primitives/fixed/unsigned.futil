/**
* Unsigned fixed point primitives.
*/
extern "signed.futil" {

  primitive fixed_p_std_const<"share"=1>[
    WIDTH, INT_WIDTH, FRACT_WIDTH, VALUE1, VALUE2
  ]() -> (out: WIDTH);

  primitive fixed_p_std_add<"share"=1>[
    WIDTH, INT_WIDTH, FRACT_WIDTH
  ](left: WIDTH, right: WIDTH) ->(out: WIDTH);

  primitive fixed_p_std_sub<"share"=1>[
    WIDTH, INT_WIDTH, FRACT_WIDTH
  ](left: WIDTH, right: WIDTH)->(out: WIDTH);

  primitive fixed_p_std_gt<"share"=1>[
    WIDTH, INT_WIDTH, FRACT_WIDTH
  ](left: WIDTH, right: WIDTH) -> (out: 1);

  primitive fixed_p_std_add_dbit<"share"=1>[
    WIDTH1,
    WIDTH2 ,
    INT_WIDTH1,
    FRACT_WIDTH1,
    INT_WIDTH2,
    FRACT_WIDTH2,
    OUT_WIDTH
  ](left: WIDTH1, right: WIDTH2) -> (out: OUT_WIDTH);

  /// ========================= Unsynthesizable Primitives ====================

  primitive fixed_p_std_mult<"share"=1>[
    WIDTH, INT_WIDTH, FRACT_WIDTH
  ](left: WIDTH, right: WIDTH) -> (out: WIDTH);

  primitive fixed_p_std_div<"share"=1>[
    WIDTH, INT_WIDTH, FRACT_WIDTH
  ](left: WIDTH, right: WIDTH) -> (out: WIDTH);


}
