// An implementation of Comparator Network Longest Prefix Match (CN-LPM), as described in:
// "TCAM-based high speed longest prefix matching with fast incremental table updates"
// Rasmussen et al. (2013) [https://ieeexplore.ieee.org/document/6602288]
//
// A lengthier write-up on the design can be found at:
// https://cgyurgyik.github.io/posts/2021/05/tcam-in-calyx/

// Sets the `match_line` signal to high if the value `in` matches the
// `prefix` with the given `length`. For example, given
//     in = 5'b11000, prefix = 5'b11001, length = 2:
//     our prefix-match may be represented as `11xxx`, where `x`
//     is a "don't care" bit. Since `in` does indeed match the
//     prefix `11xxx`, the `match_line` signal is set to high.
//
// Note: the length is an N-bit value,
//       which means length `0` really means length `1`,
//       and more generally, `N-1` length represents `N`.
//       The zero case is caught earlier so that
//       we only need N bits to represent length.
component match_element(in: 32, prefix: 32, length: 5, ml_done: 1) -> (match_line: 1, write_en: 1) {
  cells {
    sub = std_sub(5);
    pad = std_pad(5, 32);
    rsh0 = std_rsh(32);
    rsh1 = std_rsh(32);
    eq  = std_eq(32);
  }
  wires {
    group compare<"static"=1> {
      sub.left = 5'd31;
      sub.right = length;
      pad.in = sub.out;

      rsh0.left = in;
      rsh0.right = pad.out;
      rsh1.left = prefix;
      rsh1.right = pad.out;
      eq.left = rsh0.out;
      eq.right = rsh1.out;

      write_en = 1'd1;
      match_line = eq.out;
      compare[done] = ml_done;
    }
  }
  control {
    compare;
  }
}

// Given two addresses A and B with their lengths and match line, sets the `X` ports
// with the address and length of the maximum length (valid) prefix match. The output
// match line is set as the logical OR of the match lines from A and B. For example,
//
//   lenA: 4, mlA: 1, addrA: 0
//   lenB: 3, mlB: 1, addrB: 1
//   Since lenA > lenB and the match line of A is high,
//   `lenX` = 4, `mlX` = 1, and `addrX` = 0.
component comparator_element(lenA: 5, lenB: 5, addrA: 5, addrB: 5, mlA: 1, mlB: 1, len_done: 1, addr_done: 1, ml_done: 1) ->
                            (lenX: 5, addrX: 5, mlX: 1, len_write_en: 1, addr_write_en: 1, ml_write_en: 1) {
  cells {
    gt0 = std_gt(5);
    or0 = std_or(1);
    or1 = std_or(1);
    not0 = std_not(1);
    and0 = std_and(1);
  }
  wires {
    group select<"static"=0> {
      gt0.left = lenA;
      gt0.right = lenB;
      not0.in = mlB;
      or0.left = not0.out;
      or0.right = gt0.out;
      and0.left = mlA;
      and0.right = or0.out;
      select[done] = 1'd1;
    }
    group A<"static"=1> {
      len_write_en = 1'd1;
      addr_write_en = 1'd1;
      lenX = lenA;
      addrX = addrA;
      A[done] = len_done & addr_done ? 1'd1;
    }
    group B<"static"=1> {
      len_write_en = 1'd1;
      addr_write_en = 1'd1;
      lenX = lenB;
      addrX = addrB;
      B[done] = len_done & addr_done ? 1'd1;
    }
    group or_match_line<"static"=1> {
      or1.left = mlA;
      or1.right = mlB;
      ml_write_en = 1'd1;
      mlX = or1.out;
      or_match_line[done] = ml_done;
    }
  }
  control {
    par {
      if and0.out with select { A; } else { B; }
      or_match_line;
    }
  }
}

// A ternary content-addressable memory (TCAM) for IPv4, implemented
// using CN-LPM. One can either write to the TCAM or search the TCAM.
// Each stage in the TCAM is separated by registers to allow
// pipelining in the future.
//
// To write to the TCAM:
// 1. Set the `write_en` signal high.
// 2. Provide an `in` value and a corresponding `prefix_len`.
//    For example, if you want to represent the prefix-match
//    `101xx`, you'd pass in `0b'00101` with prefix_len `3`.
//
// To search the TCAM:
// 1. Set the `search_en` signal high.
// 2. Provide an `in` value indicating the data you're searching.
// 3. The signal is set to `index`, and may be saved to a register
//    using the `rdone` and `rwrite_en` signals.
//
// The `write_en` and `search_en` signals should NOT be set to high
// in the same invocation. If a zero-length prefix is written to the TCAM,
// then invalid searches will be set to the corresponding index. Otherwise,
// invalid searches will be defaulted to index zero.
component TCAM_IPv4(write_en: 1, search_en: 1, in: 32, prefix_len: 6, write_index: 5, rdone: 1) -> (index: 5, rwrite_en: 1) {
  cells {
    p0 = std_reg(32);
    p1 = std_reg(32);
    p2 = std_reg(32);
    p3 = std_reg(32);
    p4 = std_reg(32);
    p5 = std_reg(32);
    p6 = std_reg(32);
    p7 = std_reg(32);
    p8 = std_reg(32);
    p9 = std_reg(32);
    p10 = std_reg(32);
    p11 = std_reg(32);
    p12 = std_reg(32);
    p13 = std_reg(32);
    p14 = std_reg(32);
    p15 = std_reg(32);
    p16 = std_reg(32);
    p17 = std_reg(32);
    p18 = std_reg(32);
    p19 = std_reg(32);
    p20 = std_reg(32);
    p21 = std_reg(32);
    p22 = std_reg(32);
    p23 = std_reg(32);
    p24 = std_reg(32);
    p25 = std_reg(32);
    p26 = std_reg(32);
    p27 = std_reg(32);
    p28 = std_reg(32);
    p29 = std_reg(32);
    p30 = std_reg(32);
    p31 = std_reg(32);
    l0 = std_reg(5);
    l1 = std_reg(5);
    l2 = std_reg(5);
    l3 = std_reg(5);
    l4 = std_reg(5);
    l5 = std_reg(5);
    l6 = std_reg(5);
    l7 = std_reg(5);
    l8 = std_reg(5);
    l9 = std_reg(5);
    l10 = std_reg(5);
    l11 = std_reg(5);
    l12 = std_reg(5);
    l13 = std_reg(5);
    l14 = std_reg(5);
    l15 = std_reg(5);
    l16 = std_reg(5);
    l17 = std_reg(5);
    l18 = std_reg(5);
    l19 = std_reg(5);
    l20 = std_reg(5);
    l21 = std_reg(5);
    l22 = std_reg(5);
    l23 = std_reg(5);
    l24 = std_reg(5);
    l25 = std_reg(5);
    l26 = std_reg(5);
    l27 = std_reg(5);
    l28 = std_reg(5);
    l29 = std_reg(5);
    l30 = std_reg(5);
    l31 = std_reg(5);

    is_index0 = std_eq(5);
    is_index1 = std_eq(5);
    is_index2 = std_eq(5);
    is_index3 = std_eq(5);
    is_index4 = std_eq(5);
    is_index5 = std_eq(5);
    is_index6 = std_eq(5);
    is_index7 = std_eq(5);
    is_index8 = std_eq(5);
    is_index9 = std_eq(5);
    is_index10 = std_eq(5);
    is_index11 = std_eq(5);
    is_index12 = std_eq(5);
    is_index13 = std_eq(5);
    is_index14 = std_eq(5);
    is_index15 = std_eq(5);
    is_index16 = std_eq(5);
    is_index17 = std_eq(5);
    is_index18 = std_eq(5);
    is_index19 = std_eq(5);
    is_index20 = std_eq(5);
    is_index21 = std_eq(5);
    is_index22 = std_eq(5);
    is_index23 = std_eq(5);
    is_index24 = std_eq(5);
    is_index25 = std_eq(5);
    is_index26 = std_eq(5);
    is_index27 = std_eq(5);
    is_index28 = std_eq(5);
    is_index29 = std_eq(5);
    is_index30 = std_eq(5);
    is_index31 = std_eq(5);

    zero_index = std_reg(5);
    w_eq = std_eq(1);
    s_eq = std_eq(1);
    z_eq = std_eq(6);
    is_invalid = std_eq(1);

    slice = std_slice(6, 5);
    sub = std_sub(6);

    me0 = match_element();
    me1 = match_element();
    me2 = match_element();
    me3 = match_element();
    me4 = match_element();
    me5 = match_element();
    me6 = match_element();
    me7 = match_element();
    me8 = match_element();
    me9 = match_element();
    me10 = match_element();
    me11 = match_element();
    me12 = match_element();
    me13 = match_element();
    me14 = match_element();
    me15 = match_element();
    me16 = match_element();
    me17 = match_element();
    me18 = match_element();
    me19 = match_element();
    me20 = match_element();
    me21 = match_element();
    me22 = match_element();
    me23 = match_element();
    me24 = match_element();
    me25 = match_element();
    me26 = match_element();
    me27 = match_element();
    me28 = match_element();
    me29 = match_element();
    me30 = match_element();
    me31 = match_element();
    mle0 = std_reg(1);
    mle1 = std_reg(1);
    mle2 = std_reg(1);
    mle3 = std_reg(1);
    mle4 = std_reg(1);
    mle5 = std_reg(1);
    mle6 = std_reg(1);
    mle7 = std_reg(1);
    mle8 = std_reg(1);
    mle9 = std_reg(1);
    mle10 = std_reg(1);
    mle11 = std_reg(1);
    mle12 = std_reg(1);
    mle13 = std_reg(1);
    mle14 = std_reg(1);
    mle15 = std_reg(1);
    mle16 = std_reg(1);
    mle17 = std_reg(1);
    mle18 = std_reg(1);
    mle19 = std_reg(1);
    mle20 = std_reg(1);
    mle21 = std_reg(1);
    mle22 = std_reg(1);
    mle23 = std_reg(1);
    mle24 = std_reg(1);
    mle25 = std_reg(1);
    mle26 = std_reg(1);
    mle27 = std_reg(1);
    mle28 = std_reg(1);
    mle29 = std_reg(1);
    mle30 = std_reg(1);
    mle31 = std_reg(1);

    ce00 = comparator_element();
    ce01 = comparator_element();
    ce02 = comparator_element();
    ce03 = comparator_element();
    ce04 = comparator_element();
    ce05 = comparator_element();
    ce06 = comparator_element();
    ce07 = comparator_element();
    ce08 = comparator_element();
    ce09 = comparator_element();
    ce010 = comparator_element();
    ce011 = comparator_element();
    ce012 = comparator_element();
    ce013 = comparator_element();
    ce014 = comparator_element();
    ce015 = comparator_element();
    ce10 = comparator_element();
    ce11 = comparator_element();
    ce12 = comparator_element();
    ce13 = comparator_element();
    ce14 = comparator_element();
    ce15 = comparator_element();
    ce16 = comparator_element();
    ce17 = comparator_element();
    ce20 = comparator_element();
    ce21 = comparator_element();
    ce22 = comparator_element();
    ce23 = comparator_element();
    ce30 = comparator_element();
    ce31 = comparator_element();
    ce40 = comparator_element();

    len00 = std_reg(5);
    len01 = std_reg(5);
    len02 = std_reg(5);
    len03 = std_reg(5);
    len04 = std_reg(5);
    len05 = std_reg(5);
    len06 = std_reg(5);
    len07 = std_reg(5);
    len08 = std_reg(5);
    len09 = std_reg(5);
    len010 = std_reg(5);
    len011 = std_reg(5);
    len012 = std_reg(5);
    len013 = std_reg(5);
    len014 = std_reg(5);
    len015 = std_reg(5);
    len10 = std_reg(5);
    len11 = std_reg(5);
    len12 = std_reg(5);
    len13 = std_reg(5);
    len14 = std_reg(5);
    len15 = std_reg(5);
    len16 = std_reg(5);
    len17 = std_reg(5);
    len18 = std_reg(5);
    len20 = std_reg(5);
    len21 = std_reg(5);
    len22 = std_reg(5);
    len23 = std_reg(5);
    len24 = std_reg(5);
    len30 = std_reg(5);
    len31 = std_reg(5);

    addr00 = std_reg(5);
    addr01 = std_reg(5);
    addr02 = std_reg(5);
    addr03 = std_reg(5);
    addr04 = std_reg(5);
    addr05 = std_reg(5);
    addr06 = std_reg(5);
    addr07 = std_reg(5);
    addr08 = std_reg(5);
    addr09 = std_reg(5);
    addr010 = std_reg(5);
    addr011 = std_reg(5);
    addr012 = std_reg(5);
    addr013 = std_reg(5);
    addr014 = std_reg(5);
    addr015 = std_reg(5);
    addr10 = std_reg(5);
    addr11 = std_reg(5);
    addr12 = std_reg(5);
    addr13 = std_reg(5);
    addr14 = std_reg(5);
    addr15 = std_reg(5);
    addr16 = std_reg(5);
    addr17 = std_reg(5);
    addr20 = std_reg(5);
    addr21 = std_reg(5);
    addr22 = std_reg(5);
    addr23 = std_reg(5);
    addr30 = std_reg(5);
    addr31 = std_reg(5);

    ml00 = std_reg(1);
    ml01 = std_reg(1);
    ml02 = std_reg(1);
    ml03 = std_reg(1);
    ml04 = std_reg(1);
    ml05 = std_reg(1);
    ml06 = std_reg(1);
    ml07 = std_reg(1);
    ml08 = std_reg(1);
    ml09 = std_reg(1);
    ml010 = std_reg(1);
    ml011 = std_reg(1);
    ml012 = std_reg(1);
    ml013 = std_reg(1);
    ml014 = std_reg(1);
    ml015 = std_reg(1);
    ml10 = std_reg(1);
    ml11 = std_reg(1);
    ml12 = std_reg(1);
    ml13 = std_reg(1);
    ml14 = std_reg(1);
    ml15 = std_reg(1);
    ml16 = std_reg(1);
    ml17 = std_reg(1);
    ml20 = std_reg(1);
    ml21 = std_reg(1);
    ml22 = std_reg(1);
    ml23 = std_reg(1);
    ml30 = std_reg(1);
    ml31 = std_reg(1);

    final_valid = std_reg(1);
    out_index = std_reg(5);
  }
  wires {
    group is_write_enabled<"static"=0> {
      w_eq.left = write_en;
      w_eq.right = 1'd1;
      is_write_enabled[done] = 1'd1;
    }
    group is_length_zero<"static"=0> {
      z_eq.left = 6'd0;
      z_eq.right = prefix_len;
      is_length_zero[done] = 1'd1;
    }
    group is_search_enabled<"static"=0> {
      s_eq.left = search_en;
      s_eq.right = 1'd1;
      is_search_enabled[done] = 1'd1;
    }
    group write_zero<"static"=1> {
      zero_index.write_en = 1'd1;
      zero_index.in = write_index;
      write_zero[done] = zero_index.done;
    }
    group write0<"static"=1> {
      p0.write_en = write_en;
      l0.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l0.in = slice.out;
      p0.in = in;
      write0[done] = p0.done & l0.done ? 1'd1;
    }
    group write1<"static"=1> {
      p1.write_en = write_en;
      l1.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l1.in = slice.out;
      p1.in = in;
      write1[done] = p1.done & l1.done ? 1'd1;
    }
    group write2<"static"=1> {
      p2.write_en = write_en;
      l2.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l2.in = slice.out;
      p2.in = in;
      write2[done] = p2.done & l2.done ? 1'd1;
    }
    group write3<"static"=1> {
      p3.write_en = write_en;
      l3.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l3.in = slice.out;
      p3.in = in;
      write3[done] = p3.done & l3.done ? 1'd1;
    }
    group write4<"static"=1> {
      p4.write_en = write_en;
      l4.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l4.in = slice.out;
      p4.in = in;
      write4[done] = p4.done & l4.done ? 1'd1;
    }
    group write5<"static"=1> {
      p5.write_en = write_en;
      l5.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l5.in = slice.out;
      p5.in = in;
      write5[done] = p5.done & l5.done ? 1'd1;
    }
    group write6<"static"=1> {
      p6.write_en = write_en;
      l6.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l6.in = slice.out;
      p6.in = in;
      write6[done] = p6.done & l6.done ? 1'd1;
    }
    group write7<"static"=1> {
      p7.write_en = write_en;
      l7.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l7.in = slice.out;
      p7.in = in;
      write7[done] = p7.done & l7.done ? 1'd1;
    }
    group write8<"static"=1> {
      p8.write_en = write_en;
      l8.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l8.in = slice.out;
      p8.in = in;
      write8[done] = p8.done & l8.done ? 1'd1;
    }
    group write9<"static"=1> {
      p9.write_en = write_en;
      l9.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l9.in = slice.out;
      p9.in = in;
      write9[done] = p9.done & l9.done ? 1'd1;
    }
    group write10<"static"=1> {
      p10.write_en = write_en;
      l10.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l10.in = slice.out;
      p10.in = in;
      write10[done] = p10.done & l10.done ? 1'd1;
    }
    group write11<"static"=1> {
      p11.write_en = write_en;
      l11.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l11.in = slice.out;
      p11.in = in;
      write11[done] = p11.done & l11.done ? 1'd1;
    }
    group write12<"static"=1> {
      p12.write_en = write_en;
      l12.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l12.in = slice.out;
      p12.in = in;
      write12[done] = p12.done & l12.done ? 1'd1;
    }
    group write13<"static"=1> {
      p13.write_en = write_en;
      l13.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l13.in = slice.out;
      p13.in = in;
      write13[done] = p13.done & l13.done ? 1'd1;
    }
    group write14<"static"=1> {
      p14.write_en = write_en;
      l14.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l14.in = slice.out;
      p14.in = in;
      write14[done] = p14.done & l14.done ? 1'd1;
    }
    group write15<"static"=1> {
      p15.write_en = write_en;
      l15.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l15.in = slice.out;
      p15.in = in;
      write15[done] = p15.done & l15.done ? 1'd1;
    }
    group write16<"static"=1> {
      p16.write_en = write_en;
      l16.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l16.in = slice.out;
      p16.in = in;
      write16[done] = p16.done & l16.done ? 1'd1;
    }
    group write17<"static"=1> {
      p17.write_en = write_en;
      l17.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l17.in = slice.out;
      p17.in = in;
      write17[done] = p17.done & l17.done ? 1'd1;
    }
    group write18<"static"=1> {
      p18.write_en = write_en;
      l18.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l18.in = slice.out;
      p18.in = in;
      write18[done] = p18.done & l18.done ? 1'd1;
    }
    group write19<"static"=1> {
      p19.write_en = write_en;
      l19.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l19.in = slice.out;
      p19.in = in;
      write19[done] = p19.done & l19.done ? 1'd1;
    }
    group write20<"static"=1> {
      p20.write_en = write_en;
      l20.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l20.in = slice.out;
      p20.in = in;
      write20[done] = p20.done & l20.done ? 1'd1;
    }
    group write21<"static"=1> {
      p21.write_en = write_en;
      l21.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l21.in = slice.out;
      p21.in = in;
      write21[done] = p21.done & l21.done ? 1'd1;
    }
    group write22<"static"=1> {
      p22.write_en = write_en;
      l22.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l22.in = slice.out;
      p22.in = in;
      write22[done] = p22.done & l22.done ? 1'd1;
    }
    group write23<"static"=1> {
      p23.write_en = write_en;
      l23.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l23.in = slice.out;
      p23.in = in;
      write23[done] = p23.done & l23.done ? 1'd1;
    }
    group write24<"static"=1> {
      p24.write_en = write_en;
      l24.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l24.in = slice.out;
      p24.in = in;
      write24[done] = p24.done & l24.done ? 1'd1;
    }
    group write25<"static"=1> {
      p25.write_en = write_en;
      l25.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l25.in = slice.out;
      p25.in = in;
      write25[done] = p25.done & l25.done ? 1'd1;
    }
    group write26<"static"=1> {
      p26.write_en = write_en;
      l26.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l26.in = slice.out;
      p26.in = in;
      write26[done] = p26.done & l26.done ? 1'd1;
    }
    group write27<"static"=1> {
      p27.write_en = write_en;
      l27.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l27.in = slice.out;
      p27.in = in;
      write27[done] = p27.done & l27.done ? 1'd1;
    }
    group write28<"static"=1> {
      p28.write_en = write_en;
      l28.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l28.in = slice.out;
      p28.in = in;
      write28[done] = p28.done & l28.done ? 1'd1;
    }
    group write29<"static"=1> {
      p29.write_en = write_en;
      l29.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l29.in = slice.out;
      p29.in = in;
      write29[done] = p29.done & l29.done ? 1'd1;
    }
    group write30<"static"=1> {
      p30.write_en = write_en;
      l30.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l30.in = slice.out;
      p30.in = in;
      write30[done] = p30.done & l30.done ? 1'd1;
    }
    group write31<"static"=1> {
      p31.write_en = write_en;
      l31.write_en = write_en;
      sub.left = prefix_len;
      sub.right = 6'd1;
      slice.in = sub.out;
      l31.in = slice.out;
      p31.in = in;
      write31[done] = p31.done & l31.done ? 1'd1;
    }
    group find_write_index<"static"=0> {
      is_index0.left = 5'd0;
      is_index1.left = 5'd1;
      is_index2.left = 5'd2;
      is_index3.left = 5'd3;
      is_index4.left = 5'd4;
      is_index5.left = 5'd5;
      is_index6.left = 5'd6;
      is_index7.left = 5'd7;
      is_index8.left = 5'd8;
      is_index9.left = 5'd9;
      is_index10.left = 5'd10;
      is_index11.left = 5'd11;
      is_index12.left = 5'd12;
      is_index13.left = 5'd13;
      is_index14.left = 5'd14;
      is_index15.left = 5'd15;
      is_index16.left = 5'd16;
      is_index17.left = 5'd17;
      is_index18.left = 5'd18;
      is_index19.left = 5'd19;
      is_index20.left = 5'd20;
      is_index21.left = 5'd21;
      is_index22.left = 5'd22;
      is_index23.left = 5'd23;
      is_index24.left = 5'd24;
      is_index25.left = 5'd25;
      is_index26.left = 5'd26;
      is_index27.left = 5'd27;
      is_index28.left = 5'd28;
      is_index29.left = 5'd29;
      is_index30.left = 5'd30;
      is_index31.left = 5'd31;
      is_index0.right = write_index;
      is_index1.right = write_index;
      is_index0.right = write_index;
      is_index1.right = write_index;
      is_index2.right = write_index;
      is_index3.right = write_index;
      is_index4.right = write_index;
      is_index5.right = write_index;
      is_index6.right = write_index;
      is_index7.right = write_index;
      is_index8.right = write_index;
      is_index9.right = write_index;
      is_index10.right = write_index;
      is_index11.right = write_index;
      is_index12.right = write_index;
      is_index13.right = write_index;
      is_index14.right = write_index;
      is_index15.right = write_index;
      is_index16.right = write_index;
      is_index17.right = write_index;
      is_index18.right = write_index;
      is_index19.right = write_index;
      is_index20.right = write_index;
      is_index21.right = write_index;
      is_index22.right = write_index;
      is_index23.right = write_index;
      is_index24.right = write_index;
      is_index25.right = write_index;
      is_index26.right = write_index;
      is_index27.right = write_index;
      is_index28.right = write_index;
      is_index29.right = write_index;
      is_index30.right = write_index;
      is_index31.right = write_index;
      find_write_index[done] = 1'd1;
    }
    group validity<"static"=0> {
      is_invalid.left = final_valid.out;
      is_invalid.right = 1'd0;
      validity[done] = 1'd1;
    }
    group default_to_zero_length_index<"static"=1> {
      rwrite_en = 1'd1;
      index = zero_index.out;
      default_to_zero_length_index[done] = rdone;
    }
    group save_index<"static"=1> {
      rwrite_en = 1'd1;
      index = out_index.out;
      save_index[done] = rdone;
    }
  }

  control {
    par {
      if w_eq.out with is_write_enabled {
        if z_eq.out with is_length_zero {
          write_zero;
        } else {
          par {
            if is_index0.out  with find_write_index { write0; }
            if is_index1.out  with find_write_index { write1; }
            if is_index2.out  with find_write_index { write2; }
            if is_index3.out  with find_write_index { write3; }
            if is_index4.out  with find_write_index { write4; }
            if is_index5.out  with find_write_index { write5; }
            if is_index6.out  with find_write_index { write6; }
            if is_index7.out  with find_write_index { write7; }
            if is_index8.out  with find_write_index { write8; }
            if is_index9.out  with find_write_index { write9; }
            if is_index10.out with find_write_index { write10; }
            if is_index11.out with find_write_index { write11; }
            if is_index12.out with find_write_index { write12; }
            if is_index13.out with find_write_index { write13; }
            if is_index14.out with find_write_index { write14; }
            if is_index15.out with find_write_index { write15; }
            if is_index16.out with find_write_index { write16; }
            if is_index17.out with find_write_index { write17; }
            if is_index18.out with find_write_index { write18; }
            if is_index19.out with find_write_index { write19; }
            if is_index20.out with find_write_index { write20; }
            if is_index21.out with find_write_index { write21; }
            if is_index22.out with find_write_index { write22; }
            if is_index23.out with find_write_index { write23; }
            if is_index24.out with find_write_index { write24; }
            if is_index25.out with find_write_index { write25; }
            if is_index26.out with find_write_index { write26; }
            if is_index27.out with find_write_index { write27; }
            if is_index28.out with find_write_index { write28; }
            if is_index29.out with find_write_index { write29; }
            if is_index30.out with find_write_index { write30; }
            if is_index31.out with find_write_index { write31; }
          }
        }
      }
      if s_eq.out with is_search_enabled {
        seq {
          par {
            invoke me0(in=in, prefix=p0.out, length=l0.out, ml_done=mle0.done)(match_line=mle0.in, write_en=mle0.write_en);
            invoke me1(in=in, prefix=p1.out, length=l1.out, ml_done=mle1.done)(match_line=mle1.in, write_en=mle1.write_en);
            invoke me2(in=in, prefix=p2.out, length=l2.out, ml_done=mle2.done)(match_line=mle2.in, write_en=mle2.write_en);
            invoke me3(in=in, prefix=p3.out, length=l3.out, ml_done=mle3.done)(match_line=mle3.in, write_en=mle3.write_en);
            invoke me4(in=in, prefix=p4.out, length=l4.out, ml_done=mle4.done)(match_line=mle4.in, write_en=mle4.write_en);
            invoke me5(in=in, prefix=p5.out, length=l5.out, ml_done=mle5.done)(match_line=mle5.in, write_en=mle5.write_en);
            invoke me6(in=in, prefix=p6.out, length=l6.out, ml_done=mle6.done)(match_line=mle6.in, write_en=mle6.write_en);
            invoke me7(in=in, prefix=p7.out, length=l7.out, ml_done=mle7.done)(match_line=mle7.in, write_en=mle7.write_en);
            invoke me8(in=in, prefix=p8.out, length=l8.out, ml_done=mle8.done)(match_line=mle8.in, write_en=mle8.write_en);
            invoke me9(in=in, prefix=p9.out, length=l9.out, ml_done=mle9.done)(match_line=mle9.in, write_en=mle9.write_en);
            invoke me10(in=in, prefix=p10.out, length=l10.out, ml_done=mle10.done)(match_line=mle10.in, write_en=mle10.write_en);
            invoke me11(in=in, prefix=p11.out, length=l11.out, ml_done=mle11.done)(match_line=mle11.in, write_en=mle11.write_en);
            invoke me12(in=in, prefix=p12.out, length=l12.out, ml_done=mle12.done)(match_line=mle12.in, write_en=mle12.write_en);
            invoke me13(in=in, prefix=p13.out, length=l13.out, ml_done=mle13.done)(match_line=mle13.in, write_en=mle13.write_en);
            invoke me14(in=in, prefix=p14.out, length=l14.out, ml_done=mle14.done)(match_line=mle14.in, write_en=mle14.write_en);
            invoke me15(in=in, prefix=p15.out, length=l15.out, ml_done=mle15.done)(match_line=mle15.in, write_en=mle15.write_en);
            invoke me16(in=in, prefix=p16.out, length=l16.out, ml_done=mle16.done)(match_line=mle16.in, write_en=mle16.write_en);
            invoke me17(in=in, prefix=p17.out, length=l17.out, ml_done=mle17.done)(match_line=mle17.in, write_en=mle17.write_en);
            invoke me18(in=in, prefix=p18.out, length=l18.out, ml_done=mle18.done)(match_line=mle18.in, write_en=mle18.write_en);
            invoke me19(in=in, prefix=p19.out, length=l19.out, ml_done=mle19.done)(match_line=mle19.in, write_en=mle19.write_en);
            invoke me20(in=in, prefix=p20.out, length=l20.out, ml_done=mle20.done)(match_line=mle20.in, write_en=mle20.write_en);
            invoke me21(in=in, prefix=p21.out, length=l21.out, ml_done=mle21.done)(match_line=mle21.in, write_en=mle21.write_en);
            invoke me22(in=in, prefix=p22.out, length=l22.out, ml_done=mle22.done)(match_line=mle22.in, write_en=mle22.write_en);
            invoke me23(in=in, prefix=p23.out, length=l23.out, ml_done=mle23.done)(match_line=mle23.in, write_en=mle23.write_en);
            invoke me24(in=in, prefix=p24.out, length=l24.out, ml_done=mle24.done)(match_line=mle24.in, write_en=mle24.write_en);
            invoke me25(in=in, prefix=p25.out, length=l25.out, ml_done=mle25.done)(match_line=mle25.in, write_en=mle25.write_en);
            invoke me26(in=in, prefix=p26.out, length=l26.out, ml_done=mle26.done)(match_line=mle26.in, write_en=mle26.write_en);
            invoke me27(in=in, prefix=p27.out, length=l27.out, ml_done=mle27.done)(match_line=mle27.in, write_en=mle27.write_en);
            invoke me28(in=in, prefix=p28.out, length=l28.out, ml_done=mle28.done)(match_line=mle28.in, write_en=mle28.write_en);
            invoke me29(in=in, prefix=p29.out, length=l29.out, ml_done=mle29.done)(match_line=mle29.in, write_en=mle29.write_en);
            invoke me30(in=in, prefix=p30.out, length=l30.out, ml_done=mle30.done)(match_line=mle30.in, write_en=mle30.write_en);
            invoke me31(in=in, prefix=p31.out, length=l31.out, ml_done=mle31.done)(match_line=mle31.in, write_en=mle31.write_en);
          }
          par {
            invoke ce00(lenA=l0.out, lenB=l1.out, addrA=5'd0, addrB=5'd1, mlA=mle0.out, mlB=mle1.out, len_done=len00.done, addr_done=addr00.done, ml_done=ml00.done)(lenX=len00.in, addrX=addr00.in, mlX=ml00.in, len_write_en=len00.write_en, addr_write_en=addr00.write_en, ml_write_en=ml00.write_en);
            invoke ce01(lenA=l2.out, lenB=l3.out, addrA=5'd2, addrB=5'd3, mlA=mle2.out, mlB=mle3.out, len_done=len01.done, addr_done=addr01.done, ml_done=ml01.done)(lenX=len01.in, addrX=addr01.in, mlX=ml01.in, len_write_en=len01.write_en, addr_write_en=addr01.write_en, ml_write_en=ml01.write_en);
            invoke ce02(lenA=l4.out, lenB=l5.out, addrA=5'd4, addrB=5'd5, mlA=mle4.out, mlB=mle5.out, len_done=len02.done, addr_done=addr02.done, ml_done=ml02.done)(lenX=len02.in, addrX=addr02.in, mlX=ml02.in, len_write_en=len02.write_en, addr_write_en=addr02.write_en, ml_write_en=ml02.write_en);
            invoke ce03(lenA=l6.out, lenB=l7.out, addrA=5'd6, addrB=5'd7, mlA=mle6.out, mlB=mle7.out, len_done=len03.done, addr_done=addr03.done, ml_done=ml03.done)(lenX=len03.in, addrX=addr03.in, mlX=ml03.in, len_write_en=len03.write_en, addr_write_en=addr03.write_en, ml_write_en=ml03.write_en);
            invoke ce04(lenA=l8.out, lenB=l9.out, addrA=5'd8, addrB=5'd9, mlA=mle8.out, mlB=mle9.out, len_done=len04.done, addr_done=addr04.done, ml_done=ml04.done)(lenX=len04.in, addrX=addr04.in, mlX=ml04.in, len_write_en=len04.write_en, addr_write_en=addr04.write_en, ml_write_en=ml04.write_en);
            invoke ce05(lenA=l10.out, lenB=l11.out, addrA=5'd10, addrB=5'd11, mlA=mle10.out, mlB=mle11.out, len_done=len05.done, addr_done=addr05.done, ml_done=ml05.done)(lenX=len05.in, addrX=addr05.in, mlX=ml05.in, len_write_en=len05.write_en, addr_write_en=addr05.write_en, ml_write_en=ml05.write_en);
            invoke ce06(lenA=l12.out, lenB=l13.out, addrA=5'd12, addrB=5'd13, mlA=mle12.out, mlB=mle13.out, len_done=len06.done, addr_done=addr06.done, ml_done=ml06.done)(lenX=len06.in, addrX=addr06.in, mlX=ml06.in, len_write_en=len06.write_en, addr_write_en=addr06.write_en, ml_write_en=ml06.write_en);
            invoke ce07(lenA=l14.out, lenB=l15.out, addrA=5'd14, addrB=5'd15, mlA=mle14.out, mlB=mle15.out, len_done=len07.done, addr_done=addr07.done, ml_done=ml07.done)(lenX=len07.in, addrX=addr07.in, mlX=ml07.in, len_write_en=len07.write_en, addr_write_en=addr07.write_en, ml_write_en=ml07.write_en);
            invoke ce08(lenA=l16.out, lenB=l17.out, addrA=5'd16, addrB=5'd17, mlA=mle16.out, mlB=mle17.out, len_done=len08.done, addr_done=addr08.done, ml_done=ml08.done)(lenX=len08.in, addrX=addr08.in, mlX=ml08.in, len_write_en=len08.write_en, addr_write_en=addr08.write_en, ml_write_en=ml08.write_en);
            invoke ce09(lenA=l18.out, lenB=l19.out, addrA=5'd18, addrB=5'd19, mlA=mle18.out, mlB=mle19.out, len_done=len09.done, addr_done=addr09.done, ml_done=ml09.done)(lenX=len09.in, addrX=addr09.in, mlX=ml09.in, len_write_en=len09.write_en, addr_write_en=addr09.write_en, ml_write_en=ml09.write_en);
            invoke ce010(lenA=l20.out, lenB=l21.out, addrA=5'd20, addrB=5'd21, mlA=mle20.out, mlB=mle21.out, len_done=len010.done, addr_done=addr010.done, ml_done=ml010.done)(lenX=len010.in, addrX=addr010.in, mlX=ml010.in, len_write_en=len010.write_en, addr_write_en=addr010.write_en, ml_write_en=ml010.write_en);
            invoke ce011(lenA=l22.out, lenB=l23.out, addrA=5'd22, addrB=5'd23, mlA=mle22.out, mlB=mle23.out, len_done=len011.done, addr_done=addr011.done, ml_done=ml011.done)(lenX=len011.in, addrX=addr011.in, mlX=ml011.in, len_write_en=len011.write_en, addr_write_en=addr011.write_en, ml_write_en=ml011.write_en);
            invoke ce012(lenA=l24.out, lenB=l25.out, addrA=5'd24, addrB=5'd25, mlA=mle24.out, mlB=mle25.out, len_done=len012.done, addr_done=addr012.done, ml_done=ml012.done)(lenX=len012.in, addrX=addr012.in, mlX=ml012.in, len_write_en=len012.write_en, addr_write_en=addr012.write_en, ml_write_en=ml012.write_en);
            invoke ce013(lenA=l26.out, lenB=l27.out, addrA=5'd26, addrB=5'd27, mlA=mle26.out, mlB=mle27.out, len_done=len013.done, addr_done=addr013.done, ml_done=ml013.done)(lenX=len013.in, addrX=addr013.in, mlX=ml013.in, len_write_en=len013.write_en, addr_write_en=addr013.write_en, ml_write_en=ml013.write_en);
            invoke ce014(lenA=l28.out, lenB=l29.out, addrA=5'd28, addrB=5'd29, mlA=mle28.out, mlB=mle29.out, len_done=len014.done, addr_done=addr014.done, ml_done=ml014.done)(lenX=len014.in, addrX=addr014.in, mlX=ml014.in, len_write_en=len014.write_en, addr_write_en=addr014.write_en, ml_write_en=ml014.write_en);
            invoke ce015(lenA=l30.out, lenB=l31.out, addrA=5'd30, addrB=5'd31, mlA=mle30.out, mlB=mle31.out, len_done=len015.done, addr_done=addr015.done, ml_done=ml015.done)(lenX=len015.in, addrX=addr015.in, mlX=ml015.in, len_write_en=len015.write_en, addr_write_en=addr015.write_en, ml_write_en=ml015.write_en);
          }
          par {
            invoke ce10(lenA=len00.out, lenB=len01.out, addrA=addr00.out, addrB=addr01.out, mlA=ml00.out, mlB=ml01.out, len_done=len10.done, addr_done=addr10.done, ml_done=ml10.done)(lenX=len10.in, addrX=addr10.in, mlX=ml10.in, len_write_en=len10.write_en, addr_write_en=addr10.write_en, ml_write_en=ml10.write_en);
            invoke ce11(lenA=len02.out, lenB=len03.out, addrA=addr02.out, addrB=addr03.out, mlA=ml02.out, mlB=ml03.out, len_done=len11.done, addr_done=addr11.done, ml_done=ml11.done)(lenX=len11.in, addrX=addr11.in, mlX=ml11.in, len_write_en=len11.write_en, addr_write_en=addr11.write_en, ml_write_en=ml11.write_en);
            invoke ce12(lenA=len04.out, lenB=len05.out, addrA=addr04.out, addrB=addr05.out, mlA=ml04.out, mlB=ml05.out, len_done=len12.done, addr_done=addr12.done, ml_done=ml12.done)(lenX=len12.in, addrX=addr12.in, mlX=ml12.in, len_write_en=len12.write_en, addr_write_en=addr12.write_en, ml_write_en=ml12.write_en);
            invoke ce13(lenA=len06.out, lenB=len07.out, addrA=addr06.out, addrB=addr07.out, mlA=ml06.out, mlB=ml07.out, len_done=len13.done, addr_done=addr13.done, ml_done=ml13.done)(lenX=len13.in, addrX=addr13.in, mlX=ml13.in, len_write_en=len13.write_en, addr_write_en=addr13.write_en, ml_write_en=ml13.write_en);
            invoke ce14(lenA=len08.out, lenB=len09.out, addrA=addr08.out, addrB=addr09.out, mlA=ml08.out, mlB=ml09.out, len_done=len14.done, addr_done=addr14.done, ml_done=ml14.done)(lenX=len14.in, addrX=addr14.in, mlX=ml14.in, len_write_en=len14.write_en, addr_write_en=addr14.write_en, ml_write_en=ml14.write_en);
            invoke ce15(lenA=len010.out, lenB=len011.out, addrA=addr010.out, addrB=addr011.out, mlA=ml010.out, mlB=ml011.out, len_done=len15.done, addr_done=addr15.done, ml_done=ml15.done)(lenX=len15.in, addrX=addr15.in, mlX=ml15.in, len_write_en=len15.write_en, addr_write_en=addr15.write_en, ml_write_en=ml15.write_en);
            invoke ce16(lenA=len012.out, lenB=len013.out, addrA=addr012.out, addrB=addr013.out, mlA=ml012.out, mlB=ml013.out, len_done=len16.done, addr_done=addr16.done, ml_done=ml16.done)(lenX=len16.in, addrX=addr16.in, mlX=ml16.in, len_write_en=len16.write_en, addr_write_en=addr16.write_en, ml_write_en=ml16.write_en);
            invoke ce17(lenA=len014.out, lenB=len015.out, addrA=addr014.out, addrB=addr015.out, mlA=ml014.out, mlB=ml015.out, len_done=len17.done, addr_done=addr17.done, ml_done=ml17.done)(lenX=len17.in, addrX=addr17.in, mlX=ml17.in, len_write_en=len17.write_en, addr_write_en=addr17.write_en, ml_write_en=ml17.write_en);
          }
          par {
            invoke ce20(lenA=len10.out, lenB=len11.out, addrA=addr10.out, addrB=addr11.out, mlA=ml10.out, mlB=ml11.out, len_done=len20.done, addr_done=addr20.done, ml_done=ml20.done)(lenX=len20.in, addrX=addr20.in, mlX=ml20.in, len_write_en=len20.write_en, addr_write_en=addr20.write_en, ml_write_en=ml20.write_en);
            invoke ce21(lenA=len12.out, lenB=len13.out, addrA=addr12.out, addrB=addr13.out, mlA=ml12.out, mlB=ml13.out, len_done=len21.done, addr_done=addr21.done, ml_done=ml21.done)(lenX=len21.in, addrX=addr21.in, mlX=ml21.in, len_write_en=len21.write_en, addr_write_en=addr21.write_en, ml_write_en=ml21.write_en);
            invoke ce22(lenA=len14.out, lenB=len15.out, addrA=addr14.out, addrB=addr15.out, mlA=ml14.out, mlB=ml15.out, len_done=len22.done, addr_done=addr22.done, ml_done=ml22.done)(lenX=len22.in, addrX=addr22.in, mlX=ml22.in, len_write_en=len22.write_en, addr_write_en=addr22.write_en, ml_write_en=ml22.write_en);
            invoke ce23(lenA=len16.out, lenB=len17.out, addrA=addr16.out, addrB=addr17.out, mlA=ml16.out, mlB=ml17.out, len_done=len23.done, addr_done=addr23.done, ml_done=ml23.done)(lenX=len23.in, addrX=addr23.in, mlX=ml23.in, len_write_en=len23.write_en, addr_write_en=addr23.write_en, ml_write_en=ml23.write_en);
          }
          par {
            invoke ce30(lenA=len20.out, lenB=len21.out, addrA=addr20.out, addrB=addr21.out, mlA=ml20.out, mlB=ml21.out, len_done=len30.done, addr_done=addr30.done, ml_done=ml30.done)(lenX=len30.in, addrX=addr30.in, mlX=ml30.in, len_write_en=len30.write_en, addr_write_en=addr30.write_en, ml_write_en=ml30.write_en);
            invoke ce31(lenA=len22.out, lenB=len23.out, addrA=addr22.out, addrB=addr23.out, mlA=ml22.out, mlB=ml23.out, len_done=len31.done, addr_done=addr31.done, ml_done=ml31.done)(lenX=len31.in, addrX=addr31.in, mlX=ml31.in, len_write_en=len31.write_en, addr_write_en=addr31.write_en, ml_write_en=ml31.write_en);
          }
          invoke ce40(lenA=len30.out, lenB=len31.out, addrA=addr30.out, addrB=addr31.out, mlA=ml30.out, mlB=ml31.out, addr_done=out_index.done, ml_done=final_valid.done)(addrX=out_index.in, mlX=final_valid.in, addr_write_en=out_index.write_en, ml_write_en=final_valid.write_en);
          if is_invalid.out with validity { default_to_zero_length_index; } else { save_index; }
        }
      }
    }
  }
}
