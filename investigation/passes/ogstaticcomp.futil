extern "/home/cynyu_s/.calyx/primitives/memories/comb.sv" {
  primitive comb_mem_d1[WIDTH, SIZE, IDX_SIZE](@read_together addr0: IDX_SIZE, @write_together @data write_data: WIDTH, @write_together @interval @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@read_together read_data: WIDTH, @done done: 1);
  primitive comb_mem_d2[WIDTH, D0_SIZE, D1_SIZE, D0_IDX_SIZE, D1_IDX_SIZE](@read_together @write_together(2) addr0: D0_IDX_SIZE, @read_together @write_together(2) addr1: D1_IDX_SIZE, @write_together @data write_data: WIDTH, @write_together @interval @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@read_together read_data: WIDTH, @done done: 1);
  primitive comb_mem_d3[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE](@read_together @write_together(2) addr0: D0_IDX_SIZE, @read_together @write_together(2) addr1: D1_IDX_SIZE, @read_together @write_together(2) addr2: D2_IDX_SIZE, @write_together @data write_data: WIDTH, @write_together @interval @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@read_together read_data: WIDTH, @done done: 1);
  primitive comb_mem_d4[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D3_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE, D3_IDX_SIZE](@read_together @write_together(2) addr0: D0_IDX_SIZE, @read_together @write_together(2) addr1: D1_IDX_SIZE, @read_together @write_together(2) addr2: D2_IDX_SIZE, @read_together @write_together(2) addr3: D3_IDX_SIZE, @write_together @data write_data: WIDTH, @write_together @interval @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@read_together read_data: WIDTH, @done done: 1);
}
extern "/home/cynyu_s/.calyx/primitives/core.sv" {
  comb primitive std_slice<"share"=1>[IN_WIDTH, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_pad<"share"=1>[IN_WIDTH, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_cat<"share"=1>[LEFT_WIDTH, RIGHT_WIDTH, OUT_WIDTH](@data left: LEFT_WIDTH, @data right: RIGHT_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_bit_slice<"share"=1>[IN_WIDTH, START_IDX, END_IDX, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_not<"share"=1>[WIDTH](@data in: WIDTH) -> (out: WIDTH);
  comb primitive std_and<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_or<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_xor<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_sub<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_gt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_lt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_eq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_neq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_ge<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_le<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_rsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_mux<"share"=1>[WIDTH](@data cond: 1, @data tru: WIDTH, @data fal: WIDTH) -> (out: WIDTH);
  primitive std_skid_buffer<"share"=1>[WIDTH](@data in: WIDTH, i_valid: 1, i_ready: 1, @clk clk: 1, @reset reset: 1) -> (@stable out: WIDTH, o_valid: 1, o_ready: 1);
  primitive std_bypass_reg<"share"=1>[WIDTH](@data in: WIDTH, @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@stable out: WIDTH, @done done: 1);
}
primitive undef<"share"=1>[WIDTH]() -> (out: WIDTH) {
  assign out = 'x;
}
comb primitive std_const<"share"=1>[WIDTH, VALUE]() -> (out: WIDTH) {
  assign out = VALUE;
}
comb primitive std_wire<"share"=1>[WIDTH](@data in: WIDTH) -> (out: WIDTH) {
  assign out = in;
}
comb primitive std_add<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH) {
  assign out = left + right;
}
comb primitive std_lsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH) {
  assign out = left << right;
}
primitive std_reg<"state_share"=1>[WIDTH](@write_together @data in: WIDTH, @write_together @interval @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@stable out: WIDTH, @done done: 1) {
  always_ff @(posedge clk) begin
    if (reset) begin
       out <= 0;
       done <= 0;
    end else if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else done <= 1'd0;
  end
}
primitive init_one_reg<"state_share"=1>[WIDTH](@write_together @data in: WIDTH, @write_together @interval @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@stable out: WIDTH, @done done: 1) {
  always_ff @(posedge clk) begin
    if (reset) begin
       out <= 1;
       done <= 0;
    end else if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else done <= 1'd0;
  end
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    @external @data mem = comb_mem_d1(32, 1, 1);
    @data val = std_reg(32);
    @data add = std_add(32);
    @data counter = std_reg(32);
    @data add2 = std_add(32);
    @control lt = std_lt(32);
    @generated comb_reg = std_reg(1);
    @generated fsm = std_reg(3);
    @generated ud = undef(1);
    @generated adder = std_add(3);
    @generated ud0 = undef(1);
    @generated signal_reg = std_reg(1);
  }
  wires {
    group read<"promotable"=1> {
      mem.addr0 = 1'd0;
      val.in = mem.read_data;
      val.write_en = 1'd1;
      read[done] = val.done;
    }
    group upd<"promotable"=1> {
      add.left = val.out;
      add.right = 32'd4;
      val.in = add.out;
      val.write_en = 1'd1;
      upd[done] = val.done;
    }
    group write<"promotable"=1> {
      mem.addr0 = 1'd0;
      mem.write_en = 1'd1;
      mem.write_data = val.out;
      write[done] = mem.done;
    }
    group init<"promotable"=1> {
      counter.in = 32'd0;
      counter.write_en = 1'd1;
      init[done] = counter.done;
    }
    group incr<"promotable"=1> {
      add2.left = counter.out;
      add2.right = 32'd1;
      counter.in = add2.out;
      counter.write_en = 1'd1;
      incr[done] = counter.done;
    }
    group early_reset_cond0 {
      lt.left = counter.out;
      lt.right = 32'd8;
      comb_reg.in = lt.out;
      comb_reg.write_en = 1'd1;
      early_reset_cond0[done] = ud.out;
    }
    group early_reset_static_seq {
      mem.addr0 = fsm.out == 3'd0 & fsm.out < 3'd3 ? 1'd0;
      val.in = fsm.out == 3'd0 & fsm.out < 3'd3 ? mem.read_data;
      val.write_en = fsm.out == 3'd0 & fsm.out < 3'd3 ? 1'd1;
      add.left = fsm.out == 3'd1 & fsm.out < 3'd3 ? val.out;
      add.right = fsm.out == 3'd1 & fsm.out < 3'd3 ? 32'd4;
      val.in = fsm.out == 3'd1 & fsm.out < 3'd3 ? add.out;
      val.write_en = fsm.out == 3'd1 & fsm.out < 3'd3 ? 1'd1;
      mem.addr0 = fsm.out == 3'd2 & fsm.out < 3'd3 ? 1'd0;
      mem.write_en = fsm.out == 3'd2 & fsm.out < 3'd3 ? 1'd1;
      mem.write_data = fsm.out == 3'd2 & fsm.out < 3'd3 ? val.out;
      add2.left = fsm.out == 3'd0 & fsm.out < 3'd3 ? counter.out;
      add2.right = fsm.out == 3'd0 & fsm.out < 3'd3 ? 32'd1;
      counter.in = fsm.out == 3'd0 & fsm.out < 3'd3 ? add2.out;
      counter.write_en = fsm.out == 3'd0 & fsm.out < 3'd3 ? 1'd1;
      lt.left = fsm.out == 3'd3 ? counter.out;
      lt.right = fsm.out == 3'd3 ? 32'd8;
      comb_reg.in = fsm.out == 3'd3 ? lt.out;
      comb_reg.write_en = fsm.out == 3'd3 ? 1'd1;
      early_reset_static_seq[done] = ud0.out;
      adder.left = fsm.out;
      adder.right = 3'd1;
      fsm.in = fsm.out != 3'd3 ? adder.out;
      fsm.write_en = fsm.out != 3'd3 ? 1'd1;
      fsm.in = fsm.out == 3'd3 ? 3'd0;
      fsm.write_en = fsm.out == 3'd3 ? 1'd1;
    }
    group wrapper_early_reset_cond0 {
      early_reset_cond0[go] = 1'd1;
      signal_reg.write_en = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = 1'b1 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_cond0[done] = signal_reg.out ? 1'd1;
    }
    group while_wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      while_wrapper_early_reset_static_seq[done] = !comb_reg.out & fsm.out == 3'd0 & 1'b1 ? 1'd1;
    }
    comb group cond {
      lt.left = counter.out;
      lt.right = 32'd8;
    }
    signal_reg.write_en = signal_reg.out ? 1'd1;
    signal_reg.in = signal_reg.out ? 1'd0;
  }
  control {
    seq {
      @NODE_ID init;
      seq {
        wrapper_early_reset_cond0;
        while_wrapper_early_reset_static_seq;
      }
    }
  }
}