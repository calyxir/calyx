extern "/Users/calebkim/learning/calyx/primitives/memories/comb.sv" {
  primitive comb_mem_d1[WIDTH, SIZE, IDX_SIZE](@read_together addr0: IDX_SIZE, @write_together @data write_data: WIDTH, @write_together @interval @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@read_together read_data: WIDTH, @done done: 1);
  primitive comb_mem_d2[WIDTH, D0_SIZE, D1_SIZE, D0_IDX_SIZE, D1_IDX_SIZE](@read_together @write_together(2) addr0: D0_IDX_SIZE, @read_together @write_together(2) addr1: D1_IDX_SIZE, @write_together @data write_data: WIDTH, @write_together @interval @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@read_together read_data: WIDTH, @done done: 1);
  primitive comb_mem_d3[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE](@read_together @write_together(2) addr0: D0_IDX_SIZE, @read_together @write_together(2) addr1: D1_IDX_SIZE, @read_together @write_together(2) addr2: D2_IDX_SIZE, @write_together @data write_data: WIDTH, @write_together @interval @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@read_together read_data: WIDTH, @done done: 1);
  primitive comb_mem_d4[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D3_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE, D3_IDX_SIZE](@read_together @write_together(2) addr0: D0_IDX_SIZE, @read_together @write_together(2) addr1: D1_IDX_SIZE, @read_together @write_together(2) addr2: D2_IDX_SIZE, @read_together @write_together(2) addr3: D3_IDX_SIZE, @write_together @data write_data: WIDTH, @write_together @interval @go write_en: 1, @clk clk: 1) -> (@read_together read_data: WIDTH, @done done: 1);
}
extern "/Users/calebkim/learning/calyx/primitives/pipelined.sv" {
  static<4> primitive pipelined_mult[WIDTH](@clk clk: 1, @data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  static<4> primitive pipelined_fp_smult[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
}
extern "/Users/calebkim/learning/calyx/primitives/binary_operators.sv" {
  comb primitive std_fp_add<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_fp_sub<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  primitive std_fp_mult_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @interval(3) @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_fp_div_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out_remainder: WIDTH, @stable out_quotient: WIDTH, @done done: 1);
  comb primitive std_fp_gt<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_fp_sadd<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_fp_ssub<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  primitive std_fp_smult_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @interval(3) @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_fp_sdiv_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out_remainder: WIDTH, @stable out_quotient: WIDTH, @done done: 1);
  comb primitive std_fp_sgt<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_fp_slt<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  primitive std_mult_pipe<"state_share"=1>[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @interval(3) @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_div_pipe<"state_share"=1>[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out_quotient: WIDTH, @stable out_remainder: WIDTH, @done done: 1);
  comb primitive std_sadd<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_ssub<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  primitive std_smult_pipe<"state_share"=1>[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @interval(3) @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_sdiv_pipe[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (out_quotient: WIDTH, out_remainder: WIDTH, @done done: 1);
  comb primitive std_sgt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_slt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_seq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_sneq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_sge<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_sle<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_slsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_srsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_signext<"share"=1>[IN_WIDTH, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_const_mult<"share"=1>[WIDTH, VALUE](@data in: WIDTH) -> (out: WIDTH);
}
extern "/Users/calebkim/learning/calyx/primitives/core.sv" {
  comb primitive std_slice<"share"=1>[IN_WIDTH, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_pad<"share"=1>[IN_WIDTH, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_cat<"share"=1>[LEFT_WIDTH, RIGHT_WIDTH, OUT_WIDTH](@data left: LEFT_WIDTH, @data right: RIGHT_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_bit_slice<"share"=1>[IN_WIDTH, START_IDX, END_IDX, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_not<"share"=1>[WIDTH](@data in: WIDTH) -> (out: WIDTH);
  comb primitive std_and<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_or<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_xor<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_sub<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_gt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_lt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_eq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_neq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_ge<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_le<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_lsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_rsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_mux<"share"=1>[WIDTH](@data cond: 1, @data tru: WIDTH, @data fal: WIDTH) -> (out: WIDTH);
}
primitive undef<"share"=1>[WIDTH]() -> (out: WIDTH) {
  assign out = 'x;
}
comb primitive std_const<"share"=1>[WIDTH, VALUE]() -> (out: WIDTH) {
  assign out = VALUE;
}
comb primitive std_wire<"share"=1>[WIDTH](@data in: WIDTH) -> (out: WIDTH) {
  assign out = in;
}
comb primitive std_add<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH) {
  assign out = left + right;
}
primitive std_reg<"state_share"=1>[WIDTH](@write_together @data in: WIDTH, @write_together @interval @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@stable out: WIDTH, @done done: 1) {
  always_ff @(posedge clk) begin
    if (reset) begin
       out <= 0;
       done <= 0;
    end else if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else done <= 1'd0;
  end
}
static<1> component mac_pe(top: 32, left: 32, mul_ready: 1, @go go: 1, @clk clk: 1, @reset reset: 1) -> (out: 32, @done done: 1) {
  cells {
    @data acc = std_reg(32);
    @data adder = std_fp_sadd(32, 16, 16);
    @data mul = pipelined_fp_smult(32, 16, 16);
  }
  wires {
    static<1> group do_add {
      adder.left = acc.out;
      adder.right = mul.out;
      acc.in = adder.out;
      acc.write_en = mul_ready;
    }
    static<1> group do_mul {
      mul.left = top;
      mul.right = left;
    }
    static<1> group static_par<"NODE_ID"=0> {
      adder.left = acc.out;
      adder.right = mul.out;
      acc.in = adder.out;
      acc.write_en = mul_ready;
      mul.left = top;
      mul.right = left;
    }
    out = acc.out;
  }
  control {
    static_par;
  }
}
static<11> component systolic_array_comp<"promoted"=1>(depth: 32, t0_read_data: 32, t1_read_data: 32, l0_read_data: 32, l1_read_data: 32, @go go: 1, @clk clk: 1, @reset reset: 1) -> (t0_addr0: 2, t1_addr0: 2, l0_addr0: 2, l1_addr0: 2, r0_valid: 1, r0_value: 32, r0_idx: 2, r1_valid: 1, r1_value: 32, r1_idx: 2, @done done: 1) {
  cells {
    @data idx = std_reg(32);
    @data idx_add = std_add(32);
    @data index_eq_7 = std_eq(32);
    @data index_eq_8 = std_eq(32);
    @data index_eq_9 = std_eq(32);
    @data index_ge_1 = std_ge(32);
    @data index_ge_2 = std_ge(32);
    @data index_ge_3 = std_ge(32);
    @data index_ge_5 = std_ge(32);
    @data index_ge_6 = std_ge(32);
    @data index_ge_7 = std_ge(32);
    @data index_lt_2 = std_lt(32);
    @data index_lt_3 = std_lt(32);
    @data index_lt_7 = std_lt(32);
    @data index_lt_8 = std_lt(32);
    @data index_lt_9 = std_lt(32);
    @data idx_between_1_3_comb = std_and(1);
    @data idx_between_1_7_comb = std_and(1);
    @data idx_between_2_8_comb = std_and(1);
    @data idx_between_3_9_comb = std_and(1);
    @control pe_0_0 = mac_pe();
    @data top_0_0 = std_reg(32);
    @data left_0_0 = std_reg(32);
    @control pe_0_1 = mac_pe();
    @data top_0_1 = std_reg(32);
    @data left_0_1 = std_reg(32);
    @control pe_1_0 = mac_pe();
    @data top_1_0 = std_reg(32);
    @data left_1_0 = std_reg(32);
    @control pe_1_1 = mac_pe();
    @data top_1_1 = std_reg(32);
    @data left_1_1 = std_reg(32);
    @control idx_minus_0 = std_sub(32);
    @control idx_minus_0_res = std_slice(32, 2);
    @control idx_minus_1 = std_sub(32);
    @control idx_minus_1_res = std_slice(32, 2);
  }
  wires {
    static<1> group init_idx {
      idx.in = 32'd0;
      idx.write_en = 1'd1;
    }
    static<1> group incr_idx {
      idx_add.left = idx.out;
      idx_add.right = 32'd1;
      idx.in = idx_add.out;
      idx.write_en = 1'd1;
    }
    static<1> group t0_move {
      t0_addr0 = idx_minus_0_res.out;
      top_0_0.in = t0_read_data;
      top_0_0.write_en = 1'd1;
    }
    static<1> group t1_move {
      t1_addr0 = idx_minus_1_res.out;
      top_0_1.in = t1_read_data;
      top_0_1.write_en = 1'd1;
    }
    static<1> group l0_move {
      l0_addr0 = idx_minus_0_res.out;
      left_0_0.in = l0_read_data;
      left_0_0.write_en = 1'd1;
    }
    static<1> group l1_move {
      l1_addr0 = idx_minus_1_res.out;
      left_1_0.in = l1_read_data;
      left_1_0.write_en = 1'd1;
    }
    static<1> group pe_0_0_out_write {
      r0_valid = 1'd1;
      r0_value = pe_0_0.out;
      r0_idx = 2'd0;
    }
    static<1> group pe_0_1_out_write {
      r0_valid = 1'd1;
      r0_value = pe_0_1.out;
      r0_idx = 2'd1;
    }
    static<1> group pe_1_0_out_write {
      r1_valid = 1'd1;
      r1_value = pe_1_0.out;
      r1_idx = 2'd0;
    }
    static<1> group pe_1_1_out_write {
      r1_valid = 1'd1;
      r1_value = pe_1_1.out;
      r1_idx = 2'd1;
    }
    static<1> group static_invoke {
      pe_0_0.go = %0 ? 1'd1;
      pe_0_0.top = top_0_0.out;
      pe_0_0.left = left_0_0.out;
      pe_0_0.mul_ready = index_ge_5.out;
    }
    static<1> group static_invoke0 {
      pe_0_1.go = %0 ? 1'd1;
      pe_0_1.top = top_0_1.out;
      pe_0_1.left = left_0_1.out;
      pe_0_1.mul_ready = index_ge_6.out;
    }
    static<1> group static_invoke1 {
      pe_1_0.go = %0 ? 1'd1;
      pe_1_0.top = top_1_0.out;
      pe_1_0.left = left_1_0.out;
      pe_1_0.mul_ready = index_ge_6.out;
    }
    static<1> group static_invoke2 {
      pe_1_1.go = %0 ? 1'd1;
      pe_1_1.top = top_1_1.out;
      pe_1_1.left = left_1_1.out;
      pe_1_1.mul_ready = index_ge_7.out;
    }
    static<11> group static_seq<"NODE_ID"=0> {
      idx.in = %0 ? 32'd0;
      idx.write_en = %0 ? 1'd1;
      static_par[go] = %[1:11] ? 1'd1;
    }
    static<10> group static_repeat<"NODE_ID"=2> {
      static_par[go] = 1'd1;
    }
    static<1> group static_par<"NODE_ID"=3> {
      idx_add.left = idx.out;
      idx_add.right = 32'd1;
      idx.in = idx_add.out;
      idx.write_en = 1'd1;
      l0_addr0 = index_lt_2.out ? idx_minus_0_res.out;
      left_0_0.in = index_lt_2.out ? l0_read_data;
      left_0_0.write_en = index_lt_2.out ? 1'd1;
      t0_addr0 = index_lt_2.out ? idx_minus_0_res.out;
      top_0_0.in = index_lt_2.out ? t0_read_data;
      top_0_0.write_en = index_lt_2.out ? 1'd1;
      pe_0_0.go = %0 & idx_between_1_7_comb.out ? 1'd1;
      pe_0_0.top = idx_between_1_7_comb.out ? top_0_0.out;
      pe_0_0.left = idx_between_1_7_comb.out ? left_0_0.out;
      pe_0_0.mul_ready = idx_between_1_7_comb.out ? index_ge_5.out;
      r0_valid = index_eq_7.out ? 1'd1;
      r0_value = index_eq_7.out ? pe_0_0.out;
      r0_idx = index_eq_7.out ? 2'd0;
      t1_addr0 = idx_between_1_3_comb.out ? idx_minus_1_res.out;
      top_0_1.in = idx_between_1_3_comb.out ? t1_read_data;
      top_0_1.write_en = idx_between_1_3_comb.out ? 1'd1;
      pe_0_1.go = %0 & idx_between_2_8_comb.out ? 1'd1;
      pe_0_1.top = idx_between_2_8_comb.out ? top_0_1.out;
      pe_0_1.left = idx_between_2_8_comb.out ? left_0_1.out;
      pe_0_1.mul_ready = idx_between_2_8_comb.out ? index_ge_6.out;
      r0_valid = index_eq_8.out ? 1'd1;
      r0_value = index_eq_8.out ? pe_0_1.out;
      r0_idx = index_eq_8.out ? 2'd1;
      l1_addr0 = idx_between_1_3_comb.out ? idx_minus_1_res.out;
      left_1_0.in = idx_between_1_3_comb.out ? l1_read_data;
      left_1_0.write_en = idx_between_1_3_comb.out ? 1'd1;
      pe_1_0.go = %0 & idx_between_2_8_comb.out ? 1'd1;
      pe_1_0.top = idx_between_2_8_comb.out ? top_1_0.out;
      pe_1_0.left = idx_between_2_8_comb.out ? left_1_0.out;
      pe_1_0.mul_ready = idx_between_2_8_comb.out ? index_ge_6.out;
      r1_valid = index_eq_8.out ? 1'd1;
      r1_value = index_eq_8.out ? pe_1_0.out;
      r1_idx = index_eq_8.out ? 2'd0;
      pe_1_1.go = %0 & idx_between_3_9_comb.out ? 1'd1;
      pe_1_1.top = idx_between_3_9_comb.out ? top_1_1.out;
      pe_1_1.left = idx_between_3_9_comb.out ? left_1_1.out;
      pe_1_1.mul_ready = idx_between_3_9_comb.out ? index_ge_7.out;
      r1_valid = index_eq_9.out ? 1'd1;
      r1_value = index_eq_9.out ? pe_1_1.out;
      r1_idx = index_eq_9.out ? 2'd1;
    }
    static<1> group static_par0<"NODE_ID"=6> {
      l0_addr0 = idx_minus_0_res.out;
      left_0_0.in = l0_read_data;
      left_0_0.write_en = 1'd1;
      t0_addr0 = idx_minus_0_res.out;
      top_0_0.in = t0_read_data;
      top_0_0.write_en = 1'd1;
    }
    static<1> group static_if<"NODE_ID"=5> {
      l0_addr0 = index_lt_2.out ? idx_minus_0_res.out;
      left_0_0.in = index_lt_2.out ? l0_read_data;
      left_0_0.write_en = index_lt_2.out ? 1'd1;
      t0_addr0 = index_lt_2.out ? idx_minus_0_res.out;
      top_0_0.in = index_lt_2.out ? t0_read_data;
      top_0_0.write_en = index_lt_2.out ? 1'd1;
    }
    static<1> group static_if0<"NODE_ID"=10> {
      pe_0_0.go = %0 & idx_between_1_7_comb.out ? 1'd1;
      pe_0_0.top = idx_between_1_7_comb.out ? top_0_0.out;
      pe_0_0.left = idx_between_1_7_comb.out ? left_0_0.out;
      pe_0_0.mul_ready = idx_between_1_7_comb.out ? index_ge_5.out;
    }
    static<1> group static_if1<"NODE_ID"=13> {
      r0_valid = index_eq_7.out ? 1'd1;
      r0_value = index_eq_7.out ? pe_0_0.out;
      r0_idx = index_eq_7.out ? 2'd0;
    }
    static<1> group static_if2<"NODE_ID"=16> {
      t1_addr0 = idx_between_1_3_comb.out ? idx_minus_1_res.out;
      top_0_1.in = idx_between_1_3_comb.out ? t1_read_data;
      top_0_1.write_en = idx_between_1_3_comb.out ? 1'd1;
    }
    static<1> group static_if3<"NODE_ID"=19> {
      pe_0_1.go = %0 & idx_between_2_8_comb.out ? 1'd1;
      pe_0_1.top = idx_between_2_8_comb.out ? top_0_1.out;
      pe_0_1.left = idx_between_2_8_comb.out ? left_0_1.out;
      pe_0_1.mul_ready = idx_between_2_8_comb.out ? index_ge_6.out;
    }
    static<1> group static_if4<"NODE_ID"=22> {
      r0_valid = index_eq_8.out ? 1'd1;
      r0_value = index_eq_8.out ? pe_0_1.out;
      r0_idx = index_eq_8.out ? 2'd1;
    }
    static<1> group static_if5<"NODE_ID"=25> {
      l1_addr0 = idx_between_1_3_comb.out ? idx_minus_1_res.out;
      left_1_0.in = idx_between_1_3_comb.out ? l1_read_data;
      left_1_0.write_en = idx_between_1_3_comb.out ? 1'd1;
    }
    static<1> group static_if6<"NODE_ID"=28> {
      pe_1_0.go = %0 & idx_between_2_8_comb.out ? 1'd1;
      pe_1_0.top = idx_between_2_8_comb.out ? top_1_0.out;
      pe_1_0.left = idx_between_2_8_comb.out ? left_1_0.out;
      pe_1_0.mul_ready = idx_between_2_8_comb.out ? index_ge_6.out;
    }
    static<1> group static_if7<"NODE_ID"=31> {
      r1_valid = index_eq_8.out ? 1'd1;
      r1_value = index_eq_8.out ? pe_1_0.out;
      r1_idx = index_eq_8.out ? 2'd0;
    }
    static<1> group static_if8<"NODE_ID"=34> {
      pe_1_1.go = %0 & idx_between_3_9_comb.out ? 1'd1;
      pe_1_1.top = idx_between_3_9_comb.out ? top_1_1.out;
      pe_1_1.left = idx_between_3_9_comb.out ? left_1_1.out;
      pe_1_1.mul_ready = idx_between_3_9_comb.out ? index_ge_7.out;
    }
    static<1> group static_if9<"NODE_ID"=37> {
      r1_valid = index_eq_9.out ? 1'd1;
      r1_value = index_eq_9.out ? pe_1_1.out;
      r1_idx = index_eq_9.out ? 2'd1;
    }
    index_eq_7.left = idx.out;
    index_eq_7.right = 32'd7;
    index_eq_8.left = idx.out;
    index_eq_8.right = 32'd8;
    index_eq_9.left = idx.out;
    index_eq_9.right = 32'd9;
    index_ge_1.left = idx.out;
    index_ge_1.right = 32'd1;
    index_ge_2.left = idx.out;
    index_ge_2.right = 32'd2;
    index_ge_3.left = idx.out;
    index_ge_3.right = 32'd3;
    index_ge_5.left = idx.out;
    index_ge_5.right = 32'd5;
    index_ge_6.left = idx.out;
    index_ge_6.right = 32'd6;
    index_ge_7.left = idx.out;
    index_ge_7.right = 32'd7;
    index_lt_2.left = idx.out;
    index_lt_2.right = 32'd2;
    index_lt_3.left = idx.out;
    index_lt_3.right = 32'd3;
    index_lt_7.left = idx.out;
    index_lt_7.right = 32'd7;
    index_lt_8.left = idx.out;
    index_lt_8.right = 32'd8;
    index_lt_9.left = idx.out;
    index_lt_9.right = 32'd9;
    idx_between_1_3_comb.right = index_lt_3.out;
    idx_between_1_3_comb.left = index_ge_1.out;
    idx_between_1_7_comb.right = index_lt_7.out;
    idx_between_1_7_comb.left = index_ge_1.out;
    idx_between_2_8_comb.right = index_lt_8.out;
    idx_between_2_8_comb.left = index_ge_2.out;
    idx_between_3_9_comb.right = index_lt_9.out;
    idx_between_3_9_comb.left = index_ge_3.out;
    idx_minus_0.left = idx.out;
    idx_minus_0.right = 32'd0;
    idx_minus_0_res.in = idx_minus_0.out;
    idx_minus_1.left = idx.out;
    idx_minus_1.right = 32'd1;
    idx_minus_1_res.in = idx_minus_1.out;
    left_0_1.in = left_0_0.out;
    left_0_1.write_en = 1'd1;
    top_1_0.in = top_0_0.out;
    top_1_0.write_en = 1'd1;
    top_1_1.in = top_0_1.out;
    top_1_1.write_en = 1'd1;
    left_1_1.in = left_1_0.out;
    left_1_1.write_en = 1'd1;
  }
  control {
    static_seq;
  }
}
static<1> component default_post_op<"state_share"=1, "promoted"=1>(out_mem_0_done: 1, r0_valid: 1, r0_value: 32, r0_idx: 2, out_mem_1_done: 1, r1_valid: 1, r1_value: 32, r1_idx: 2, @go go: 1, @clk clk: 1, @reset reset: 1) -> (computation_done: 1, out_mem_0_addr0: 2, out_mem_0_write_data: 32, out_mem_0_write_en: 1, out_mem_1_addr0: 2, out_mem_1_write_data: 32, out_mem_1_write_en: 1, @done done: 1) {
  cells {
    @data delay_reg = std_reg(1);
  }
  wires {
    static<1> group write_r0 {
      out_mem_0_write_en = r0_valid;
      out_mem_0_write_data = r0_value;
      out_mem_0_addr0 = r0_idx;
    }
    static<1> group write_r1 {
      out_mem_1_write_en = r1_valid;
      out_mem_1_write_data = r1_value;
      out_mem_1_addr0 = r1_idx;
    }
    static<1> group write_done_cond {
      delay_reg.in = 1'd1;
      delay_reg.write_en = r1_valid & r1_idx == 2'd1 ? 1'd1;
      computation_done = delay_reg.done ? 1'd1;
    }
    static<1> group static_par<"NODE_ID"=0> {
      delay_reg.in = 1'd1;
      delay_reg.write_en = r1_valid & r1_idx == 2'd1 ? 1'd1;
      computation_done = delay_reg.done ? 1'd1;
      out_mem_0_write_en = r0_valid;
      out_mem_0_write_data = r0_value;
      out_mem_0_addr0 = r0_idx;
      out_mem_1_write_en = r1_valid;
      out_mem_1_write_data = r1_value;
      out_mem_1_addr0 = r1_idx;
    }
  }
  control {
    static_par;
  }
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    @control systolic_array_component = systolic_array_comp();
    @control post_op_component = default_post_op();
    @external @control t0 = comb_mem_d1(32, 2, 2);
    @external @control t1 = comb_mem_d1(32, 2, 2);
    @external @control l0 = comb_mem_d1(32, 2, 2);
    @external @control l1 = comb_mem_d1(32, 2, 2);
    @external @data out_mem_0 = comb_mem_d1(32, 2, 2);
    @external @data out_mem_1 = comb_mem_d1(32, 2, 2);
    @data systolic_done = std_reg(1);
    @control systolic_done_wire = std_wire(1);
  }
  wires {
    group perform_computation {
      t0.addr0 = systolic_array_component.t0_addr0;
      systolic_array_component.t0_read_data = t0.read_data;
      t1.addr0 = systolic_array_component.t1_addr0;
      systolic_array_component.t1_read_data = t1.read_data;
      l0.addr0 = systolic_array_component.l0_addr0;
      systolic_array_component.l0_read_data = l0.read_data;
      l1.addr0 = systolic_array_component.l1_addr0;
      systolic_array_component.l1_read_data = l1.read_data;
      out_mem_0.write_data = post_op_component.out_mem_0_write_data;
      out_mem_0.write_en = post_op_component.out_mem_0_write_en;
      out_mem_0.addr0 = post_op_component.out_mem_0_addr0;
      post_op_component.out_mem_0_done = out_mem_0.done;
      post_op_component.r0_valid = systolic_array_component.r0_valid;
      post_op_component.r0_value = systolic_array_component.r0_value;
      post_op_component.r0_idx = systolic_array_component.r0_idx;
      out_mem_1.write_data = post_op_component.out_mem_1_write_data;
      out_mem_1.write_en = post_op_component.out_mem_1_write_en;
      out_mem_1.addr0 = post_op_component.out_mem_1_addr0;
      post_op_component.out_mem_1_done = out_mem_1.done;
      post_op_component.r1_valid = systolic_array_component.r1_valid;
      post_op_component.r1_value = systolic_array_component.r1_value;
      post_op_component.r1_idx = systolic_array_component.r1_idx;
      systolic_done.write_en = systolic_array_component.done ? 1'd1;
      systolic_done.in = systolic_array_component.done ? 1'd1;
      systolic_done_wire.in = systolic_array_component.done | systolic_done.out ? 1'd1;
      systolic_array_component.go = !systolic_done_wire.out ? 1'd1;
      systolic_array_component.depth = 32'd2;
      post_op_component.go = 1'd1;
      perform_computation[done] = post_op_component.computation_done;
    }
  }
  control {
    @NODE_ID(0) perform_computation;
  }
}
metadata #{
0: pe_0_0: Feeding Boundary PE: [0,2) || Invoking PE: [1, 7) || Writing PE Result: 7
1: pe_0_1: Feeding Boundary PE: [1,3) || Invoking PE: [2, 8) || Writing PE Result: 8
2: pe_1_0: Feeding Boundary PE: [1,3) || Invoking PE: [2, 8) || Writing PE Result: 8
3: pe_1_1: Invoking PE: [3, 9) || Writing PE Result: 9
}#
