v0.0.4
def @main(%data: Tensor[(1, 3, 224, 224), float32], %squeezenet0_conv0_weight: Tensor[(64, 3, 3, 3), float32], %squeezenet0_conv0_bias: Tensor[(64), float32], %squeezenet0_conv1_weight: Tensor[(16, 64, 1, 1), float32], %squeezenet0_conv1_bias: Tensor[(16), float32], %squeezenet0_conv2_weight: Tensor[(64, 16, 1, 1), float32], %squeezenet0_conv2_bias: Tensor[(64), float32], %squeezenet0_conv3_weight: Tensor[(64, 16, 3, 3), float32], %squeezenet0_conv3_bias: Tensor[(64), float32], %squeezenet0_conv4_weight: Tensor[(16, 128, 1, 1), float32], %squeezenet0_conv4_bias: Tensor[(16), float32], %squeezenet0_conv5_weight: Tensor[(64, 16, 1, 1), float32], %squeezenet0_conv5_bias: Tensor[(64), float32], %squeezenet0_conv6_weight: Tensor[(64, 16, 3, 3), float32], %squeezenet0_conv6_bias: Tensor[(64), float32], %squeezenet0_conv7_weight: Tensor[(32, 128, 1, 1), float32], %squeezenet0_conv7_bias: Tensor[(32), float32], %squeezenet0_conv8_weight: Tensor[(128, 32, 1, 1), float32], %squeezenet0_conv8_bias: Tensor[(128), float32], %squeezenet0_conv9_weight: Tensor[(128, 32, 3, 3), float32], %squeezenet0_conv9_bias: Tensor[(128), float32], %squeezenet0_conv10_weight: Tensor[(32, 256, 1, 1), float32], %squeezenet0_conv10_bias: Tensor[(32), float32], %squeezenet0_conv11_weight: Tensor[(128, 32, 1, 1), float32], %squeezenet0_conv11_bias: Tensor[(128), float32], %squeezenet0_conv12_weight: Tensor[(128, 32, 3, 3), float32], %squeezenet0_conv12_bias: Tensor[(128), float32], %squeezenet0_conv13_weight: Tensor[(48, 256, 1, 1), float32], %squeezenet0_conv13_bias: Tensor[(48), float32], %squeezenet0_conv14_weight: Tensor[(192, 48, 1, 1), float32], %squeezenet0_conv14_bias: Tensor[(192), float32], %squeezenet0_conv15_weight: Tensor[(192, 48, 3, 3), float32], %squeezenet0_conv15_bias: Tensor[(192), float32], %squeezenet0_conv16_weight: Tensor[(48, 384, 1, 1), float32], %squeezenet0_conv16_bias: Tensor[(48), float32], %squeezenet0_conv17_weight: Tensor[(192, 48, 1, 1), float32], %squeezenet0_conv17_bias: Tensor[(192), float32], %squeezenet0_conv18_weight: Tensor[(192, 48, 3, 3), float32], %squeezenet0_conv18_bias: Tensor[(192), float32], %squeezenet0_conv19_weight: Tensor[(64, 384, 1, 1), float32], %squeezenet0_conv19_bias: Tensor[(64), float32], %squeezenet0_conv20_weight: Tensor[(256, 64, 1, 1), float32], %squeezenet0_conv20_bias: Tensor[(256), float32], %squeezenet0_conv21_weight: Tensor[(256, 64, 3, 3), float32], %squeezenet0_conv21_bias: Tensor[(256), float32], %squeezenet0_conv22_weight: Tensor[(64, 512, 1, 1), float32], %squeezenet0_conv22_bias: Tensor[(64), float32], %squeezenet0_conv23_weight: Tensor[(256, 64, 1, 1), float32], %squeezenet0_conv23_bias: Tensor[(256), float32], %squeezenet0_conv24_weight: Tensor[(256, 64, 3, 3), float32], %squeezenet0_conv24_bias: Tensor[(256), float32], %squeezenet0_conv25_weight: Tensor[(1000, 512, 1, 1), float32], %squeezenet0_conv25_bias: Tensor[(1000), float32]) -> Tensor[(1, 1000), float32] {
  let %x: Tensor[(1, 64, 111, 111), float32] = nn.conv2d(%data, %squeezenet0_conv0_weight, strides=[2, 2], padding=[0, 0, 0, 0], kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 111, 111), float32] */;
  let %x1: Tensor[(1, 64, 111, 111), float32] = nn.bias_add(%x, %squeezenet0_conv0_bias) /* ty=Tensor[(1, 64, 111, 111), float32] */;
  let %x2: Tensor[(1, 64, 111, 111), float32] = nn.relu(%x1) /* ty=Tensor[(1, 64, 111, 111), float32] */;
  let %x3: Tensor[(1, 64, 55, 55), float32] = nn.max_pool2d(%x2, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  let %x4: Tensor[(1, 16, 55, 55), float32] = nn.conv2d(%x3, %squeezenet0_conv1_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 55, 55), float32] */;
  let %x5: Tensor[(1, 16, 55, 55), float32] = nn.bias_add(%x4, %squeezenet0_conv1_bias) /* ty=Tensor[(1, 16, 55, 55), float32] */;
  let %x6: Tensor[(1, 16, 55, 55), float32] = nn.relu(%x5) /* ty=Tensor[(1, 16, 55, 55), float32] */;
  let %x7: Tensor[(1, 64, 55, 55), float32] = nn.conv2d(%x6, %squeezenet0_conv2_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  let %x8: Tensor[(1, 64, 55, 55), float32] = nn.bias_add(%x7, %squeezenet0_conv2_bias) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  let %x9: Tensor[(1, 64, 55, 55), float32] = nn.relu(%x8) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  let %x10: Tensor[(1, 64, 55, 55), float32] = nn.conv2d(%x6, %squeezenet0_conv3_weight, padding=[1, 1, 1, 1], kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  let %x11: Tensor[(1, 64, 55, 55), float32] = nn.bias_add(%x10, %squeezenet0_conv3_bias) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  let %x12: Tensor[(1, 64, 55, 55), float32] = nn.relu(%x11) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  let %x13: (Tensor[(1, 64, 55, 55), float32], Tensor[(1, 64, 55, 55), float32]) = (%x9, %x12);
  let %x14: Tensor[(1, 128, 55, 55), float32] = concatenate(%x13, axis=1) /* ty=Tensor[(1, 128, 55, 55), float32] */;
  let %x15: Tensor[(1, 16, 55, 55), float32] = nn.conv2d(%x14, %squeezenet0_conv4_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 55, 55), float32] */;
  let %x16: Tensor[(1, 16, 55, 55), float32] = nn.bias_add(%x15, %squeezenet0_conv4_bias) /* ty=Tensor[(1, 16, 55, 55), float32] */;
  let %x17: Tensor[(1, 16, 55, 55), float32] = nn.relu(%x16) /* ty=Tensor[(1, 16, 55, 55), float32] */;
  let %x18: Tensor[(1, 64, 55, 55), float32] = nn.conv2d(%x17, %squeezenet0_conv5_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  let %x19: Tensor[(1, 64, 55, 55), float32] = nn.bias_add(%x18, %squeezenet0_conv5_bias) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  let %x20: Tensor[(1, 64, 55, 55), float32] = nn.relu(%x19) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  let %x21: Tensor[(1, 64, 55, 55), float32] = nn.conv2d(%x17, %squeezenet0_conv6_weight, padding=[1, 1, 1, 1], kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  let %x22: Tensor[(1, 64, 55, 55), float32] = nn.bias_add(%x21, %squeezenet0_conv6_bias) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  let %x23: Tensor[(1, 64, 55, 55), float32] = nn.relu(%x22) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  let %x24: (Tensor[(1, 64, 55, 55), float32], Tensor[(1, 64, 55, 55), float32]) = (%x20, %x23);
  let %x25: Tensor[(1, 128, 55, 55), float32] = concatenate(%x24, axis=1) /* ty=Tensor[(1, 128, 55, 55), float32] */;
  let %x26: Tensor[(1, 128, 27, 27), float32] = nn.max_pool2d(%x25, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 128, 27, 27), float32] */;
  let %x27: Tensor[(1, 32, 27, 27), float32] = nn.conv2d(%x26, %squeezenet0_conv7_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 27, 27), float32] */;
  let %x28: Tensor[(1, 32, 27, 27), float32] = nn.bias_add(%x27, %squeezenet0_conv7_bias) /* ty=Tensor[(1, 32, 27, 27), float32] */;
  let %x29: Tensor[(1, 32, 27, 27), float32] = nn.relu(%x28) /* ty=Tensor[(1, 32, 27, 27), float32] */;
  let %x30: Tensor[(1, 128, 27, 27), float32] = nn.conv2d(%x29, %squeezenet0_conv8_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 27, 27), float32] */;
  let %x31: Tensor[(1, 128, 27, 27), float32] = nn.bias_add(%x30, %squeezenet0_conv8_bias) /* ty=Tensor[(1, 128, 27, 27), float32] */;
  let %x32: Tensor[(1, 128, 27, 27), float32] = nn.relu(%x31) /* ty=Tensor[(1, 128, 27, 27), float32] */;
  let %x33: Tensor[(1, 128, 27, 27), float32] = nn.conv2d(%x29, %squeezenet0_conv9_weight, padding=[1, 1, 1, 1], kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 27, 27), float32] */;
  let %x34: Tensor[(1, 128, 27, 27), float32] = nn.bias_add(%x33, %squeezenet0_conv9_bias) /* ty=Tensor[(1, 128, 27, 27), float32] */;
  let %x35: Tensor[(1, 128, 27, 27), float32] = nn.relu(%x34) /* ty=Tensor[(1, 128, 27, 27), float32] */;
  let %x36: (Tensor[(1, 128, 27, 27), float32], Tensor[(1, 128, 27, 27), float32]) = (%x32, %x35);
  let %x37: Tensor[(1, 256, 27, 27), float32] = concatenate(%x36, axis=1) /* ty=Tensor[(1, 256, 27, 27), float32] */;
  let %x38: Tensor[(1, 32, 27, 27), float32] = nn.conv2d(%x37, %squeezenet0_conv10_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 27, 27), float32] */;
  let %x39: Tensor[(1, 32, 27, 27), float32] = nn.bias_add(%x38, %squeezenet0_conv10_bias) /* ty=Tensor[(1, 32, 27, 27), float32] */;
  let %x40: Tensor[(1, 32, 27, 27), float32] = nn.relu(%x39) /* ty=Tensor[(1, 32, 27, 27), float32] */;
  let %x41: Tensor[(1, 128, 27, 27), float32] = nn.conv2d(%x40, %squeezenet0_conv11_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 27, 27), float32] */;
  let %x42: Tensor[(1, 128, 27, 27), float32] = nn.bias_add(%x41, %squeezenet0_conv11_bias) /* ty=Tensor[(1, 128, 27, 27), float32] */;
  let %x43: Tensor[(1, 128, 27, 27), float32] = nn.relu(%x42) /* ty=Tensor[(1, 128, 27, 27), float32] */;
  let %x44: Tensor[(1, 128, 27, 27), float32] = nn.conv2d(%x40, %squeezenet0_conv12_weight, padding=[1, 1, 1, 1], kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 27, 27), float32] */;
  let %x45: Tensor[(1, 128, 27, 27), float32] = nn.bias_add(%x44, %squeezenet0_conv12_bias) /* ty=Tensor[(1, 128, 27, 27), float32] */;
  let %x46: Tensor[(1, 128, 27, 27), float32] = nn.relu(%x45) /* ty=Tensor[(1, 128, 27, 27), float32] */;
  let %x47: (Tensor[(1, 128, 27, 27), float32], Tensor[(1, 128, 27, 27), float32]) = (%x43, %x46);
  let %x48: Tensor[(1, 256, 27, 27), float32] = concatenate(%x47, axis=1) /* ty=Tensor[(1, 256, 27, 27), float32] */;
  let %x49: Tensor[(1, 256, 13, 13), float32] = nn.max_pool2d(%x48, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  let %x50: Tensor[(1, 48, 13, 13), float32] = nn.conv2d(%x49, %squeezenet0_conv13_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 13, 13), float32] */;
  let %x51: Tensor[(1, 48, 13, 13), float32] = nn.bias_add(%x50, %squeezenet0_conv13_bias) /* ty=Tensor[(1, 48, 13, 13), float32] */;
  let %x52: Tensor[(1, 48, 13, 13), float32] = nn.relu(%x51) /* ty=Tensor[(1, 48, 13, 13), float32] */;
  let %x53: Tensor[(1, 192, 13, 13), float32] = nn.conv2d(%x52, %squeezenet0_conv14_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 13, 13), float32] */;
  let %x54: Tensor[(1, 192, 13, 13), float32] = nn.bias_add(%x53, %squeezenet0_conv14_bias) /* ty=Tensor[(1, 192, 13, 13), float32] */;
  let %x55: Tensor[(1, 192, 13, 13), float32] = nn.relu(%x54) /* ty=Tensor[(1, 192, 13, 13), float32] */;
  let %x56: Tensor[(1, 192, 13, 13), float32] = nn.conv2d(%x52, %squeezenet0_conv15_weight, padding=[1, 1, 1, 1], kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 13, 13), float32] */;
  let %x57: Tensor[(1, 192, 13, 13), float32] = nn.bias_add(%x56, %squeezenet0_conv15_bias) /* ty=Tensor[(1, 192, 13, 13), float32] */;
  let %x58: Tensor[(1, 192, 13, 13), float32] = nn.relu(%x57) /* ty=Tensor[(1, 192, 13, 13), float32] */;
  let %x59: (Tensor[(1, 192, 13, 13), float32], Tensor[(1, 192, 13, 13), float32]) = (%x55, %x58);
  let %x60: Tensor[(1, 384, 13, 13), float32] = concatenate(%x59, axis=1) /* ty=Tensor[(1, 384, 13, 13), float32] */;
  let %x61: Tensor[(1, 48, 13, 13), float32] = nn.conv2d(%x60, %squeezenet0_conv16_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 13, 13), float32] */;
  let %x62: Tensor[(1, 48, 13, 13), float32] = nn.bias_add(%x61, %squeezenet0_conv16_bias) /* ty=Tensor[(1, 48, 13, 13), float32] */;
  let %x63: Tensor[(1, 48, 13, 13), float32] = nn.relu(%x62) /* ty=Tensor[(1, 48, 13, 13), float32] */;
  let %x64: Tensor[(1, 192, 13, 13), float32] = nn.conv2d(%x63, %squeezenet0_conv17_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 13, 13), float32] */;
  let %x65: Tensor[(1, 192, 13, 13), float32] = nn.bias_add(%x64, %squeezenet0_conv17_bias) /* ty=Tensor[(1, 192, 13, 13), float32] */;
  let %x66: Tensor[(1, 192, 13, 13), float32] = nn.relu(%x65) /* ty=Tensor[(1, 192, 13, 13), float32] */;
  let %x67: Tensor[(1, 192, 13, 13), float32] = nn.conv2d(%x63, %squeezenet0_conv18_weight, padding=[1, 1, 1, 1], kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 13, 13), float32] */;
  let %x68: Tensor[(1, 192, 13, 13), float32] = nn.bias_add(%x67, %squeezenet0_conv18_bias) /* ty=Tensor[(1, 192, 13, 13), float32] */;
  let %x69: Tensor[(1, 192, 13, 13), float32] = nn.relu(%x68) /* ty=Tensor[(1, 192, 13, 13), float32] */;
  let %x70: (Tensor[(1, 192, 13, 13), float32], Tensor[(1, 192, 13, 13), float32]) = (%x66, %x69);
  let %x71: Tensor[(1, 384, 13, 13), float32] = concatenate(%x70, axis=1) /* ty=Tensor[(1, 384, 13, 13), float32] */;
  let %x72: Tensor[(1, 64, 13, 13), float32] = nn.conv2d(%x71, %squeezenet0_conv19_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 13, 13), float32] */;
  let %x73: Tensor[(1, 64, 13, 13), float32] = nn.bias_add(%x72, %squeezenet0_conv19_bias) /* ty=Tensor[(1, 64, 13, 13), float32] */;
  let %x74: Tensor[(1, 64, 13, 13), float32] = nn.relu(%x73) /* ty=Tensor[(1, 64, 13, 13), float32] */;
  let %x75: Tensor[(1, 256, 13, 13), float32] = nn.conv2d(%x74, %squeezenet0_conv20_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  let %x76: Tensor[(1, 256, 13, 13), float32] = nn.bias_add(%x75, %squeezenet0_conv20_bias) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  let %x77: Tensor[(1, 256, 13, 13), float32] = nn.relu(%x76) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  let %x78: Tensor[(1, 256, 13, 13), float32] = nn.conv2d(%x74, %squeezenet0_conv21_weight, padding=[1, 1, 1, 1], kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  let %x79: Tensor[(1, 256, 13, 13), float32] = nn.bias_add(%x78, %squeezenet0_conv21_bias) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  let %x80: Tensor[(1, 256, 13, 13), float32] = nn.relu(%x79) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  let %x81: (Tensor[(1, 256, 13, 13), float32], Tensor[(1, 256, 13, 13), float32]) = (%x77, %x80);
  let %x82: Tensor[(1, 512, 13, 13), float32] = concatenate(%x81, axis=1) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  let %x83: Tensor[(1, 64, 13, 13), float32] = nn.conv2d(%x82, %squeezenet0_conv22_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 13, 13), float32] */;
  let %x84: Tensor[(1, 64, 13, 13), float32] = nn.bias_add(%x83, %squeezenet0_conv22_bias) /* ty=Tensor[(1, 64, 13, 13), float32] */;
  let %x85: Tensor[(1, 64, 13, 13), float32] = nn.relu(%x84) /* ty=Tensor[(1, 64, 13, 13), float32] */;
  let %x86: Tensor[(1, 256, 13, 13), float32] = nn.conv2d(%x85, %squeezenet0_conv23_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  let %x87: Tensor[(1, 256, 13, 13), float32] = nn.bias_add(%x86, %squeezenet0_conv23_bias) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  let %x88: Tensor[(1, 256, 13, 13), float32] = nn.relu(%x87) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  let %x89: Tensor[(1, 256, 13, 13), float32] = nn.conv2d(%x85, %squeezenet0_conv24_weight, padding=[1, 1, 1, 1], kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  let %x90: Tensor[(1, 256, 13, 13), float32] = nn.bias_add(%x89, %squeezenet0_conv24_bias) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  let %x91: Tensor[(1, 256, 13, 13), float32] = nn.relu(%x90) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  let %x92: (Tensor[(1, 256, 13, 13), float32], Tensor[(1, 256, 13, 13), float32]) = (%x88, %x91);
  let %x93: Tensor[(1, 512, 13, 13), float32] = concatenate(%x92, axis=1) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  let %x94: Tensor[(1, 1000, 13, 13), float32] = nn.conv2d(%x93, %squeezenet0_conv25_weight, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 1000, 13, 13), float32] */;
  let %x95: Tensor[(1, 1000, 13, 13), float32] = nn.bias_add(%x94, %squeezenet0_conv25_bias) /* ty=Tensor[(1, 1000, 13, 13), float32] */;
  let %x96: Tensor[(1, 1000, 13, 13), float32] = nn.relu(%x95) /* ty=Tensor[(1, 1000, 13, 13), float32] */;
  let %x97: Tensor[(1, 1000, 1, 1), float32] = nn.avg_pool2d(%x96, pool_size=[13, 13], strides=[13, 13], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 1000, 1, 1), float32] */;
  let %x98: Tensor[(1, 1000), float32] = reshape(%x97, newshape=[0, -1]) /* ty=Tensor[(1, 1000), float32] */;
  %x98
}
