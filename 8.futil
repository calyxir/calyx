import "primitives/core.futil";
import "primitives/binary_operators.futil";
import "primitives/pipelined.futil";
static<1> component mac_pe(top: 32, left: 32, mul_ready: 1) -> (out: 32) {
  cells {
    acc = std_reg(32);
    adder = std_fp_sadd(32, 16, 16);
    mul = pipelined_fp_smult(32, 16, 16);
  }
  wires {
    static<1> group do_add {
      adder.left = acc.out;
      adder.right = mul.out;
      acc.in = adder.out;
      acc.write_en = mul_ready;
    }
    static<1> group do_mul {
      mul.left = top;
      mul.right = left;
    }
    out = acc.out;
  }
  control {
    static par {
      do_add;
      do_mul;
    }
  }
}
component systolic_array_comp(depth: 32, t0_read_data: 32, t1_read_data: 32, t2_read_data: 32, t3_read_data: 32, t4_read_data: 32, t5_read_data: 32, t6_read_data: 32, t7_read_data: 32, l0_read_data: 32, l1_read_data: 32, l2_read_data: 32, l3_read_data: 32, l4_read_data: 32, l5_read_data: 32, l6_read_data: 32, l7_read_data: 32) -> (t0_addr0: 4, t1_addr0: 4, t2_addr0: 4, t3_addr0: 4, t4_addr0: 4, t5_addr0: 4, t6_addr0: 4, t7_addr0: 4, l0_addr0: 4, l1_addr0: 4, l2_addr0: 4, l3_addr0: 4, l4_addr0: 4, l5_addr0: 4, l6_addr0: 4, l7_addr0: 4, out_mem_0_addr0: 32, out_mem_0_write_data: 32, out_mem_0_write_en: 1, out_mem_1_addr0: 32, out_mem_1_write_data: 32, out_mem_1_write_en: 1, out_mem_2_addr0: 32, out_mem_2_write_data: 32, out_mem_2_write_en: 1, out_mem_3_addr0: 32, out_mem_3_write_data: 32, out_mem_3_write_en: 1, out_mem_4_addr0: 32, out_mem_4_write_data: 32, out_mem_4_write_en: 1, out_mem_5_addr0: 32, out_mem_5_write_data: 32, out_mem_5_write_en: 1, out_mem_6_addr0: 32, out_mem_6_write_data: 32, out_mem_6_write_en: 1, out_mem_7_addr0: 32, out_mem_7_write_data: 32, out_mem_7_write_en: 1) {
  cells {
    min_depth_4 = std_reg(32);
    lt_depth_4 = std_lt(32);
    depth_plus_8 = std_add(32);
    depth_plus_10 = std_add(32);
    min_depth_4_plus_2 = std_add(32);
    depth_plus_2 = std_add(32);
    depth_plus_11 = std_add(32);
    min_depth_4_plus_11 = std_add(32);
    depth_plus_7 = std_add(32);
    min_depth_4_plus_7 = std_add(32);
    depth_plus_16 = std_add(32);
    depth_plus_12 = std_add(32);
    depth_plus_3 = std_add(32);
    min_depth_4_plus_3 = std_add(32);
    min_depth_4_plus_12 = std_add(32);
    depth_plus_5 = std_add(32);
    min_depth_4_plus_8 = std_add(32);
    depth_plus_17 = std_add(32);
    min_depth_4_plus_6 = std_add(32);
    depth_plus_13 = std_add(32);
    min_depth_4_plus_13 = std_add(32);
    depth_plus_18 = std_add(32);
    depth_plus_15 = std_add(32);
    depth_plus_4 = std_add(32);
    min_depth_4_plus_4 = std_add(32);
    depth_plus_9 = std_add(32);
    depth_plus_14 = std_add(32);
    min_depth_4_plus_5 = std_add(32);
    min_depth_4_plus_14 = std_add(32);
    depth_plus_0 = std_add(32);
    min_depth_4_plus_9 = std_add(32);
    depth_plus_1 = std_add(32);
    min_depth_4_plus_1 = std_add(32);
    min_depth_4_plus_10 = std_add(32);
    depth_plus_19 = std_add(32);
    depth_plus_6 = std_add(32);
    min_depth_4_plus_15 = std_add(32);
    pe_0_0 = mac_pe();
    top_0_0 = std_reg(32);
    left_0_0 = std_reg(32);
    pe_0_1 = mac_pe();
    top_0_1 = std_reg(32);
    left_0_1 = std_reg(32);
    pe_0_2 = mac_pe();
    top_0_2 = std_reg(32);
    left_0_2 = std_reg(32);
    pe_0_3 = mac_pe();
    top_0_3 = std_reg(32);
    left_0_3 = std_reg(32);
    pe_0_4 = mac_pe();
    top_0_4 = std_reg(32);
    left_0_4 = std_reg(32);
    pe_0_5 = mac_pe();
    top_0_5 = std_reg(32);
    left_0_5 = std_reg(32);
    pe_0_6 = mac_pe();
    top_0_6 = std_reg(32);
    left_0_6 = std_reg(32);
    pe_0_7 = mac_pe();
    top_0_7 = std_reg(32);
    left_0_7 = std_reg(32);
    pe_1_0 = mac_pe();
    top_1_0 = std_reg(32);
    left_1_0 = std_reg(32);
    pe_1_1 = mac_pe();
    top_1_1 = std_reg(32);
    left_1_1 = std_reg(32);
    pe_1_2 = mac_pe();
    top_1_2 = std_reg(32);
    left_1_2 = std_reg(32);
    pe_1_3 = mac_pe();
    top_1_3 = std_reg(32);
    left_1_3 = std_reg(32);
    pe_1_4 = mac_pe();
    top_1_4 = std_reg(32);
    left_1_4 = std_reg(32);
    pe_1_5 = mac_pe();
    top_1_5 = std_reg(32);
    left_1_5 = std_reg(32);
    pe_1_6 = mac_pe();
    top_1_6 = std_reg(32);
    left_1_6 = std_reg(32);
    pe_1_7 = mac_pe();
    top_1_7 = std_reg(32);
    left_1_7 = std_reg(32);
    pe_2_0 = mac_pe();
    top_2_0 = std_reg(32);
    left_2_0 = std_reg(32);
    pe_2_1 = mac_pe();
    top_2_1 = std_reg(32);
    left_2_1 = std_reg(32);
    pe_2_2 = mac_pe();
    top_2_2 = std_reg(32);
    left_2_2 = std_reg(32);
    pe_2_3 = mac_pe();
    top_2_3 = std_reg(32);
    left_2_3 = std_reg(32);
    pe_2_4 = mac_pe();
    top_2_4 = std_reg(32);
    left_2_4 = std_reg(32);
    pe_2_5 = mac_pe();
    top_2_5 = std_reg(32);
    left_2_5 = std_reg(32);
    pe_2_6 = mac_pe();
    top_2_6 = std_reg(32);
    left_2_6 = std_reg(32);
    pe_2_7 = mac_pe();
    top_2_7 = std_reg(32);
    left_2_7 = std_reg(32);
    pe_3_0 = mac_pe();
    top_3_0 = std_reg(32);
    left_3_0 = std_reg(32);
    pe_3_1 = mac_pe();
    top_3_1 = std_reg(32);
    left_3_1 = std_reg(32);
    pe_3_2 = mac_pe();
    top_3_2 = std_reg(32);
    left_3_2 = std_reg(32);
    pe_3_3 = mac_pe();
    top_3_3 = std_reg(32);
    left_3_3 = std_reg(32);
    pe_3_4 = mac_pe();
    top_3_4 = std_reg(32);
    left_3_4 = std_reg(32);
    pe_3_5 = mac_pe();
    top_3_5 = std_reg(32);
    left_3_5 = std_reg(32);
    pe_3_6 = mac_pe();
    top_3_6 = std_reg(32);
    left_3_6 = std_reg(32);
    pe_3_7 = mac_pe();
    top_3_7 = std_reg(32);
    left_3_7 = std_reg(32);
    pe_4_0 = mac_pe();
    top_4_0 = std_reg(32);
    left_4_0 = std_reg(32);
    pe_4_1 = mac_pe();
    top_4_1 = std_reg(32);
    left_4_1 = std_reg(32);
    pe_4_2 = mac_pe();
    top_4_2 = std_reg(32);
    left_4_2 = std_reg(32);
    pe_4_3 = mac_pe();
    top_4_3 = std_reg(32);
    left_4_3 = std_reg(32);
    pe_4_4 = mac_pe();
    top_4_4 = std_reg(32);
    left_4_4 = std_reg(32);
    pe_4_5 = mac_pe();
    top_4_5 = std_reg(32);
    left_4_5 = std_reg(32);
    pe_4_6 = mac_pe();
    top_4_6 = std_reg(32);
    left_4_6 = std_reg(32);
    pe_4_7 = mac_pe();
    top_4_7 = std_reg(32);
    left_4_7 = std_reg(32);
    pe_5_0 = mac_pe();
    top_5_0 = std_reg(32);
    left_5_0 = std_reg(32);
    pe_5_1 = mac_pe();
    top_5_1 = std_reg(32);
    left_5_1 = std_reg(32);
    pe_5_2 = mac_pe();
    top_5_2 = std_reg(32);
    left_5_2 = std_reg(32);
    pe_5_3 = mac_pe();
    top_5_3 = std_reg(32);
    left_5_3 = std_reg(32);
    pe_5_4 = mac_pe();
    top_5_4 = std_reg(32);
    left_5_4 = std_reg(32);
    pe_5_5 = mac_pe();
    top_5_5 = std_reg(32);
    left_5_5 = std_reg(32);
    pe_5_6 = mac_pe();
    top_5_6 = std_reg(32);
    left_5_6 = std_reg(32);
    pe_5_7 = mac_pe();
    top_5_7 = std_reg(32);
    left_5_7 = std_reg(32);
    pe_6_0 = mac_pe();
    top_6_0 = std_reg(32);
    left_6_0 = std_reg(32);
    pe_6_1 = mac_pe();
    top_6_1 = std_reg(32);
    left_6_1 = std_reg(32);
    pe_6_2 = mac_pe();
    top_6_2 = std_reg(32);
    left_6_2 = std_reg(32);
    pe_6_3 = mac_pe();
    top_6_3 = std_reg(32);
    left_6_3 = std_reg(32);
    pe_6_4 = mac_pe();
    top_6_4 = std_reg(32);
    left_6_4 = std_reg(32);
    pe_6_5 = mac_pe();
    top_6_5 = std_reg(32);
    left_6_5 = std_reg(32);
    pe_6_6 = mac_pe();
    top_6_6 = std_reg(32);
    left_6_6 = std_reg(32);
    pe_6_7 = mac_pe();
    top_6_7 = std_reg(32);
    left_6_7 = std_reg(32);
    pe_7_0 = mac_pe();
    top_7_0 = std_reg(32);
    left_7_0 = std_reg(32);
    pe_7_1 = mac_pe();
    top_7_1 = std_reg(32);
    left_7_1 = std_reg(32);
    pe_7_2 = mac_pe();
    top_7_2 = std_reg(32);
    left_7_2 = std_reg(32);
    pe_7_3 = mac_pe();
    top_7_3 = std_reg(32);
    left_7_3 = std_reg(32);
    pe_7_4 = mac_pe();
    top_7_4 = std_reg(32);
    left_7_4 = std_reg(32);
    pe_7_5 = mac_pe();
    top_7_5 = std_reg(32);
    left_7_5 = std_reg(32);
    pe_7_6 = mac_pe();
    top_7_6 = std_reg(32);
    left_7_6 = std_reg(32);
    pe_7_7 = mac_pe();
    top_7_7 = std_reg(32);
    left_7_7 = std_reg(32);
    t0_idx = std_reg(4);
    t0_add = std_add(4);
    t1_idx = std_reg(4);
    t1_add = std_add(4);
    t2_idx = std_reg(4);
    t2_add = std_add(4);
    t3_idx = std_reg(4);
    t3_add = std_add(4);
    t4_idx = std_reg(4);
    t4_add = std_add(4);
    t5_idx = std_reg(4);
    t5_add = std_add(4);
    t6_idx = std_reg(4);
    t6_add = std_add(4);
    t7_idx = std_reg(4);
    t7_add = std_add(4);
    l0_idx = std_reg(4);
    l0_add = std_add(4);
    l1_idx = std_reg(4);
    l1_add = std_add(4);
    l2_idx = std_reg(4);
    l2_add = std_add(4);
    l3_idx = std_reg(4);
    l3_add = std_add(4);
    l4_idx = std_reg(4);
    l4_add = std_add(4);
    l5_idx = std_reg(4);
    l5_add = std_add(4);
    l6_idx = std_reg(4);
    l6_add = std_add(4);
    l7_idx = std_reg(4);
    l7_add = std_add(4);
    idx = std_reg(32);
    idx_add = std_add(32);
    cond_reg = std_reg(1);
    index_ge_depth_plus_8 = std_ge(32);
    index_ge_depth_plus_10 = std_ge(32);
    idx_between_2_min_depth_4_plus_2_reg = std_reg(1);
    index_lt_min_depth_4_plus_2 = std_lt(32);
    index_ge_2 = std_ge(32);
    idx_between_2_min_depth_4_plus_2_comb = std_and(1);
    idx_between_2_depth_plus_2_reg = std_reg(1);
    index_lt_depth_plus_2 = std_lt(32);
    idx_between_2_depth_plus_2_comb = std_and(1);
    idx_between_11_depth_plus_11_reg = std_reg(1);
    index_lt_depth_plus_11 = std_lt(32);
    index_ge_11 = std_ge(32);
    idx_between_11_depth_plus_11_comb = std_and(1);
    idx_between_11_min_depth_4_plus_11_reg = std_reg(1);
    index_lt_min_depth_4_plus_11 = std_lt(32);
    idx_between_11_min_depth_4_plus_11_comb = std_and(1);
    idx_between_7_depth_plus_7_reg = std_reg(1);
    index_lt_depth_plus_7 = std_lt(32);
    index_ge_7 = std_ge(32);
    idx_between_7_depth_plus_7_comb = std_and(1);
    idx_between_7_min_depth_4_plus_7_reg = std_reg(1);
    index_lt_min_depth_4_plus_7 = std_lt(32);
    idx_between_7_min_depth_4_plus_7_comb = std_and(1);
    idx_between_16_depth_plus_16_reg = std_reg(1);
    index_lt_depth_plus_16 = std_lt(32);
    index_ge_16 = std_ge(32);
    idx_between_16_depth_plus_16_comb = std_and(1);
    index_ge_depth_plus_12 = std_ge(32);
    idx_between_3_depth_plus_3_reg = std_reg(1);
    index_lt_depth_plus_3 = std_lt(32);
    index_ge_3 = std_ge(32);
    idx_between_3_depth_plus_3_comb = std_and(1);
    idx_between_12_depth_plus_12_reg = std_reg(1);
    index_lt_depth_plus_12 = std_lt(32);
    index_ge_12 = std_ge(32);
    idx_between_12_depth_plus_12_comb = std_and(1);
    idx_between_3_min_depth_4_plus_3_reg = std_reg(1);
    index_lt_min_depth_4_plus_3 = std_lt(32);
    idx_between_3_min_depth_4_plus_3_comb = std_and(1);
    idx_between_12_min_depth_4_plus_12_reg = std_reg(1);
    index_lt_min_depth_4_plus_12 = std_lt(32);
    idx_between_12_min_depth_4_plus_12_comb = std_and(1);
    index_ge_depth_plus_5 = std_ge(32);
    idx_between_8_depth_plus_8_reg = std_reg(1);
    index_lt_depth_plus_8 = std_lt(32);
    index_ge_8 = std_ge(32);
    idx_between_8_depth_plus_8_comb = std_and(1);
    idx_between_8_min_depth_4_plus_8_reg = std_reg(1);
    index_lt_min_depth_4_plus_8 = std_lt(32);
    idx_between_8_min_depth_4_plus_8_comb = std_and(1);
    idx_between_17_depth_plus_17_reg = std_reg(1);
    index_lt_depth_plus_17 = std_lt(32);
    index_ge_17 = std_ge(32);
    idx_between_17_depth_plus_17_comb = std_and(1);
    index_ge_depth_plus_7 = std_ge(32);
    idx_between_6_min_depth_4_plus_6_reg = std_reg(1);
    index_lt_min_depth_4_plus_6 = std_lt(32);
    index_ge_6 = std_ge(32);
    idx_between_6_min_depth_4_plus_6_comb = std_and(1);
    idx_between_13_depth_plus_13_reg = std_reg(1);
    index_lt_depth_plus_13 = std_lt(32);
    index_ge_13 = std_ge(32);
    idx_between_13_depth_plus_13_comb = std_and(1);
    idx_between_13_min_depth_4_plus_13_reg = std_reg(1);
    index_lt_min_depth_4_plus_13 = std_lt(32);
    idx_between_13_min_depth_4_plus_13_comb = std_and(1);
    idx_between_18_depth_plus_18_reg = std_reg(1);
    index_lt_depth_plus_18 = std_lt(32);
    index_ge_18 = std_ge(32);
    idx_between_18_depth_plus_18_comb = std_and(1);
    idx_between_15_depth_plus_15_reg = std_reg(1);
    index_lt_depth_plus_15 = std_lt(32);
    index_ge_15 = std_ge(32);
    idx_between_15_depth_plus_15_comb = std_and(1);
    idx_between_4_depth_plus_4_reg = std_reg(1);
    index_lt_depth_plus_4 = std_lt(32);
    index_ge_4 = std_ge(32);
    idx_between_4_depth_plus_4_comb = std_and(1);
    idx_between_4_min_depth_4_plus_4_reg = std_reg(1);
    index_lt_min_depth_4_plus_4 = std_lt(32);
    idx_between_4_min_depth_4_plus_4_comb = std_and(1);
    index_ge_depth_plus_9 = std_ge(32);
    idx_between_5_depth_plus_5_reg = std_reg(1);
    index_lt_depth_plus_5 = std_lt(32);
    index_ge_5 = std_ge(32);
    idx_between_5_depth_plus_5_comb = std_and(1);
    idx_between_14_depth_plus_14_reg = std_reg(1);
    index_lt_depth_plus_14 = std_lt(32);
    index_ge_14 = std_ge(32);
    idx_between_14_depth_plus_14_comb = std_and(1);
    idx_between_5_min_depth_4_plus_5_reg = std_reg(1);
    index_lt_min_depth_4_plus_5 = std_lt(32);
    idx_between_5_min_depth_4_plus_5_comb = std_and(1);
    idx_between_14_min_depth_4_plus_14_reg = std_reg(1);
    index_lt_min_depth_4_plus_14 = std_lt(32);
    idx_between_14_min_depth_4_plus_14_comb = std_and(1);
    idx_between_0_depth_plus_0_reg = std_reg(1);
    index_lt_depth_plus_0 = std_lt(32);
    idx_between_9_depth_plus_9_reg = std_reg(1);
    index_lt_depth_plus_9 = std_lt(32);
    index_ge_9 = std_ge(32);
    idx_between_9_depth_plus_9_comb = std_and(1);
    idx_between_9_min_depth_4_plus_9_reg = std_reg(1);
    index_lt_min_depth_4_plus_9 = std_lt(32);
    idx_between_9_min_depth_4_plus_9_comb = std_and(1);
    idx_between_1_depth_plus_1_reg = std_reg(1);
    index_lt_depth_plus_1 = std_lt(32);
    index_ge_1 = std_ge(32);
    idx_between_1_depth_plus_1_comb = std_and(1);
    idx_between_1_min_depth_4_plus_1_reg = std_reg(1);
    index_lt_min_depth_4_plus_1 = std_lt(32);
    idx_between_1_min_depth_4_plus_1_comb = std_and(1);
    index_ge_depth_plus_11 = std_ge(32);
    idx_between_10_depth_plus_10_reg = std_reg(1);
    index_lt_depth_plus_10 = std_lt(32);
    index_ge_10 = std_ge(32);
    idx_between_10_depth_plus_10_comb = std_and(1);
    idx_between_10_min_depth_4_plus_10_reg = std_reg(1);
    index_lt_min_depth_4_plus_10 = std_lt(32);
    idx_between_10_min_depth_4_plus_10_comb = std_and(1);
    idx_between_19_depth_plus_19_reg = std_reg(1);
    index_lt_depth_plus_19 = std_lt(32);
    index_ge_19 = std_ge(32);
    idx_between_19_depth_plus_19_comb = std_and(1);
    index_ge_depth_plus_6 = std_ge(32);
    idx_between_6_depth_plus_6_reg = std_reg(1);
    index_lt_depth_plus_6 = std_lt(32);
    idx_between_6_depth_plus_6_comb = std_and(1);
    idx_between_15_min_depth_4_plus_15_reg = std_reg(1);
    index_lt_min_depth_4_plus_15 = std_lt(32);
    idx_between_15_min_depth_4_plus_15_comb = std_and(1);
    relu_r0_cur_val = std_wire(32);
    relu_r0_cur_idx = std_reg(32);
    relu_finished_wire_r0 = std_wire(1);
    relu_finished_reg_r0 = std_reg(1);
    relu_r0_val_gt = std_fp_sgt(32, 16, 16);
    relu_r0_go_next = std_wire(32);
    relu_r0_incr = std_add(32);
    relu_r0_val_mult = std_fp_smult_pipe(32, 16, 16);
    relu_cond_wire_r0 = std_wire(1);
    relu_cond_reg_r0 = std_reg(1);
    relu_r1_cur_val = std_wire(32);
    relu_r1_cur_idx = std_reg(32);
    relu_finished_wire_r1 = std_wire(1);
    relu_finished_reg_r1 = std_reg(1);
    relu_r1_val_gt = std_fp_sgt(32, 16, 16);
    relu_r1_go_next = std_wire(32);
    relu_r1_incr = std_add(32);
    relu_r1_val_mult = std_fp_smult_pipe(32, 16, 16);
    relu_cond_wire_r1 = std_wire(1);
    relu_cond_reg_r1 = std_reg(1);
    relu_r2_cur_val = std_wire(32);
    relu_r2_cur_idx = std_reg(32);
    relu_finished_wire_r2 = std_wire(1);
    relu_finished_reg_r2 = std_reg(1);
    relu_r2_val_gt = std_fp_sgt(32, 16, 16);
    relu_r2_go_next = std_wire(32);
    relu_r2_incr = std_add(32);
    relu_r2_val_mult = std_fp_smult_pipe(32, 16, 16);
    relu_cond_wire_r2 = std_wire(1);
    relu_cond_reg_r2 = std_reg(1);
    relu_r3_cur_val = std_wire(32);
    relu_r3_cur_idx = std_reg(32);
    relu_finished_wire_r3 = std_wire(1);
    relu_finished_reg_r3 = std_reg(1);
    relu_r3_val_gt = std_fp_sgt(32, 16, 16);
    relu_r3_go_next = std_wire(32);
    relu_r3_incr = std_add(32);
    relu_r3_val_mult = std_fp_smult_pipe(32, 16, 16);
    relu_cond_wire_r3 = std_wire(1);
    relu_cond_reg_r3 = std_reg(1);
    relu_r4_cur_val = std_wire(32);
    relu_r4_cur_idx = std_reg(32);
    relu_finished_wire_r4 = std_wire(1);
    relu_finished_reg_r4 = std_reg(1);
    relu_r4_val_gt = std_fp_sgt(32, 16, 16);
    relu_r4_go_next = std_wire(32);
    relu_r4_incr = std_add(32);
    relu_r4_val_mult = std_fp_smult_pipe(32, 16, 16);
    relu_cond_wire_r4 = std_wire(1);
    relu_cond_reg_r4 = std_reg(1);
    relu_r5_cur_val = std_wire(32);
    relu_r5_cur_idx = std_reg(32);
    relu_finished_wire_r5 = std_wire(1);
    relu_finished_reg_r5 = std_reg(1);
    relu_r5_val_gt = std_fp_sgt(32, 16, 16);
    relu_r5_go_next = std_wire(32);
    relu_r5_incr = std_add(32);
    relu_r5_val_mult = std_fp_smult_pipe(32, 16, 16);
    relu_cond_wire_r5 = std_wire(1);
    relu_cond_reg_r5 = std_reg(1);
    relu_r6_cur_val = std_wire(32);
    relu_r6_cur_idx = std_reg(32);
    relu_finished_wire_r6 = std_wire(1);
    relu_finished_reg_r6 = std_reg(1);
    relu_r6_val_gt = std_fp_sgt(32, 16, 16);
    relu_r6_go_next = std_wire(32);
    relu_r6_incr = std_add(32);
    relu_r6_val_mult = std_fp_smult_pipe(32, 16, 16);
    relu_cond_wire_r6 = std_wire(1);
    relu_cond_reg_r6 = std_reg(1);
    relu_r7_cur_val = std_wire(32);
    relu_r7_cur_idx = std_reg(32);
    relu_finished_wire_r7 = std_wire(1);
    relu_finished_reg_r7 = std_reg(1);
    relu_r7_val_gt = std_fp_sgt(32, 16, 16);
    relu_r7_go_next = std_wire(32);
    relu_r7_incr = std_add(32);
    relu_r7_val_mult = std_fp_smult_pipe(32, 16, 16);
    relu_cond_wire_r7 = std_wire(1);
    relu_cond_reg_r7 = std_reg(1);
    cond_wire = std_wire(1);
  }
  wires {
    static<1> group init_min_depth {
      lt_depth_4.left = depth;
      lt_depth_4.right = 32'd4;
      min_depth_4.in = lt_depth_4.out ? depth;
      min_depth_4.in = !lt_depth_4.out ? 32'd4;
      min_depth_4.write_en = 1'd1;
    }
    static<1> group depth_plus_8_group {
      depth_plus_8.left = depth;
      depth_plus_8.right = 32'd8;
    }
    static<1> group depth_plus_10_group {
      depth_plus_10.left = depth;
      depth_plus_10.right = 32'd10;
    }
    static<1> group min_depth_4_plus_2_group {
      min_depth_4_plus_2.left = min_depth_4.out;
      min_depth_4_plus_2.right = 32'd2;
    }
    static<1> group depth_plus_2_group {
      depth_plus_2.left = depth;
      depth_plus_2.right = 32'd2;
    }
    static<1> group depth_plus_11_group {
      depth_plus_11.left = depth;
      depth_plus_11.right = 32'd11;
    }
    static<1> group min_depth_4_plus_11_group {
      min_depth_4_plus_11.left = min_depth_4.out;
      min_depth_4_plus_11.right = 32'd11;
    }
    static<1> group depth_plus_7_group {
      depth_plus_7.left = depth;
      depth_plus_7.right = 32'd7;
    }
    static<1> group min_depth_4_plus_7_group {
      min_depth_4_plus_7.left = min_depth_4.out;
      min_depth_4_plus_7.right = 32'd7;
    }
    static<1> group depth_plus_16_group {
      depth_plus_16.left = depth;
      depth_plus_16.right = 32'd16;
    }
    static<1> group depth_plus_12_group {
      depth_plus_12.left = depth;
      depth_plus_12.right = 32'd12;
    }
    static<1> group depth_plus_3_group {
      depth_plus_3.left = depth;
      depth_plus_3.right = 32'd3;
    }
    static<1> group min_depth_4_plus_3_group {
      min_depth_4_plus_3.left = min_depth_4.out;
      min_depth_4_plus_3.right = 32'd3;
    }
    static<1> group min_depth_4_plus_12_group {
      min_depth_4_plus_12.left = min_depth_4.out;
      min_depth_4_plus_12.right = 32'd12;
    }
    static<1> group depth_plus_5_group {
      depth_plus_5.left = depth;
      depth_plus_5.right = 32'd5;
    }
    static<1> group min_depth_4_plus_8_group {
      min_depth_4_plus_8.left = min_depth_4.out;
      min_depth_4_plus_8.right = 32'd8;
    }
    static<1> group depth_plus_17_group {
      depth_plus_17.left = depth;
      depth_plus_17.right = 32'd17;
    }
    static<1> group min_depth_4_plus_6_group {
      min_depth_4_plus_6.left = min_depth_4.out;
      min_depth_4_plus_6.right = 32'd6;
    }
    static<1> group depth_plus_13_group {
      depth_plus_13.left = depth;
      depth_plus_13.right = 32'd13;
    }
    static<1> group min_depth_4_plus_13_group {
      min_depth_4_plus_13.left = min_depth_4.out;
      min_depth_4_plus_13.right = 32'd13;
    }
    static<1> group depth_plus_18_group {
      depth_plus_18.left = depth;
      depth_plus_18.right = 32'd18;
    }
    static<1> group depth_plus_15_group {
      depth_plus_15.left = depth;
      depth_plus_15.right = 32'd15;
    }
    static<1> group depth_plus_4_group {
      depth_plus_4.left = depth;
      depth_plus_4.right = 32'd4;
    }
    static<1> group min_depth_4_plus_4_group {
      min_depth_4_plus_4.left = min_depth_4.out;
      min_depth_4_plus_4.right = 32'd4;
    }
    static<1> group depth_plus_9_group {
      depth_plus_9.left = depth;
      depth_plus_9.right = 32'd9;
    }
    static<1> group depth_plus_14_group {
      depth_plus_14.left = depth;
      depth_plus_14.right = 32'd14;
    }
    static<1> group min_depth_4_plus_5_group {
      min_depth_4_plus_5.left = min_depth_4.out;
      min_depth_4_plus_5.right = 32'd5;
    }
    static<1> group min_depth_4_plus_14_group {
      min_depth_4_plus_14.left = min_depth_4.out;
      min_depth_4_plus_14.right = 32'd14;
    }
    static<1> group depth_plus_0_group {
      depth_plus_0.left = depth;
      depth_plus_0.right = 32'd0;
    }
    static<1> group min_depth_4_plus_9_group {
      min_depth_4_plus_9.left = min_depth_4.out;
      min_depth_4_plus_9.right = 32'd9;
    }
    static<1> group depth_plus_1_group {
      depth_plus_1.left = depth;
      depth_plus_1.right = 32'd1;
    }
    static<1> group min_depth_4_plus_1_group {
      min_depth_4_plus_1.left = min_depth_4.out;
      min_depth_4_plus_1.right = 32'd1;
    }
    static<1> group min_depth_4_plus_10_group {
      min_depth_4_plus_10.left = min_depth_4.out;
      min_depth_4_plus_10.right = 32'd10;
    }
    static<1> group depth_plus_19_group {
      depth_plus_19.left = depth;
      depth_plus_19.right = 32'd19;
    }
    static<1> group depth_plus_6_group {
      depth_plus_6.left = depth;
      depth_plus_6.right = 32'd6;
    }
    static<1> group min_depth_4_plus_15_group {
      min_depth_4_plus_15.left = min_depth_4.out;
      min_depth_4_plus_15.right = 32'd15;
    }
    static<1> group t0_idx_init {
      t0_idx.in = 4'd0;
      t0_idx.write_en = 1'd1;
    }
    static<1> group t0_idx_update {
      t0_add.left = 4'd1;
      t0_add.right = t0_idx.out;
      t0_idx.in = t0_add.out;
      t0_idx.write_en = 1'd1;
    }
    static<1> group t0_move {
      t0_addr0 = t0_idx.out;
      top_0_0.in = t0_read_data;
      top_0_0.write_en = 1'd1;
    }
    static<1> group t1_idx_init {
      t1_idx.in = 4'd0;
      t1_idx.write_en = 1'd1;
    }
    static<1> group t1_idx_update {
      t1_add.left = 4'd1;
      t1_add.right = t1_idx.out;
      t1_idx.in = t1_add.out;
      t1_idx.write_en = 1'd1;
    }
    static<1> group t1_move {
      t1_addr0 = t1_idx.out;
      top_0_1.in = t1_read_data;
      top_0_1.write_en = 1'd1;
    }
    static<1> group t2_idx_init {
      t2_idx.in = 4'd0;
      t2_idx.write_en = 1'd1;
    }
    static<1> group t2_idx_update {
      t2_add.left = 4'd1;
      t2_add.right = t2_idx.out;
      t2_idx.in = t2_add.out;
      t2_idx.write_en = 1'd1;
    }
    static<1> group t2_move {
      t2_addr0 = t2_idx.out;
      top_0_2.in = t2_read_data;
      top_0_2.write_en = 1'd1;
    }
    static<1> group t3_idx_init {
      t3_idx.in = 4'd0;
      t3_idx.write_en = 1'd1;
    }
    static<1> group t3_idx_update {
      t3_add.left = 4'd1;
      t3_add.right = t3_idx.out;
      t3_idx.in = t3_add.out;
      t3_idx.write_en = 1'd1;
    }
    static<1> group t3_move {
      t3_addr0 = t3_idx.out;
      top_0_3.in = t3_read_data;
      top_0_3.write_en = 1'd1;
    }
    static<1> group t4_idx_init {
      t4_idx.in = 4'd0;
      t4_idx.write_en = 1'd1;
    }
    static<1> group t4_idx_update {
      t4_add.left = 4'd1;
      t4_add.right = t4_idx.out;
      t4_idx.in = t4_add.out;
      t4_idx.write_en = 1'd1;
    }
    static<1> group t4_move {
      t4_addr0 = t4_idx.out;
      top_0_4.in = t4_read_data;
      top_0_4.write_en = 1'd1;
    }
    static<1> group t5_idx_init {
      t5_idx.in = 4'd0;
      t5_idx.write_en = 1'd1;
    }
    static<1> group t5_idx_update {
      t5_add.left = 4'd1;
      t5_add.right = t5_idx.out;
      t5_idx.in = t5_add.out;
      t5_idx.write_en = 1'd1;
    }
    static<1> group t5_move {
      t5_addr0 = t5_idx.out;
      top_0_5.in = t5_read_data;
      top_0_5.write_en = 1'd1;
    }
    static<1> group t6_idx_init {
      t6_idx.in = 4'd0;
      t6_idx.write_en = 1'd1;
    }
    static<1> group t6_idx_update {
      t6_add.left = 4'd1;
      t6_add.right = t6_idx.out;
      t6_idx.in = t6_add.out;
      t6_idx.write_en = 1'd1;
    }
    static<1> group t6_move {
      t6_addr0 = t6_idx.out;
      top_0_6.in = t6_read_data;
      top_0_6.write_en = 1'd1;
    }
    static<1> group t7_idx_init {
      t7_idx.in = 4'd0;
      t7_idx.write_en = 1'd1;
    }
    static<1> group t7_idx_update {
      t7_add.left = 4'd1;
      t7_add.right = t7_idx.out;
      t7_idx.in = t7_add.out;
      t7_idx.write_en = 1'd1;
    }
    static<1> group t7_move {
      t7_addr0 = t7_idx.out;
      top_0_7.in = t7_read_data;
      top_0_7.write_en = 1'd1;
    }
    static<1> group l0_idx_init {
      l0_idx.in = 4'd0;
      l0_idx.write_en = 1'd1;
    }
    static<1> group l0_idx_update {
      l0_add.left = 4'd1;
      l0_add.right = l0_idx.out;
      l0_idx.in = l0_add.out;
      l0_idx.write_en = 1'd1;
    }
    static<1> group l0_move {
      l0_addr0 = l0_idx.out;
      left_0_0.in = l0_read_data;
      left_0_0.write_en = 1'd1;
    }
    static<1> group l1_idx_init {
      l1_idx.in = 4'd0;
      l1_idx.write_en = 1'd1;
    }
    static<1> group l1_idx_update {
      l1_add.left = 4'd1;
      l1_add.right = l1_idx.out;
      l1_idx.in = l1_add.out;
      l1_idx.write_en = 1'd1;
    }
    static<1> group l1_move {
      l1_addr0 = l1_idx.out;
      left_1_0.in = l1_read_data;
      left_1_0.write_en = 1'd1;
    }
    static<1> group l2_idx_init {
      l2_idx.in = 4'd0;
      l2_idx.write_en = 1'd1;
    }
    static<1> group l2_idx_update {
      l2_add.left = 4'd1;
      l2_add.right = l2_idx.out;
      l2_idx.in = l2_add.out;
      l2_idx.write_en = 1'd1;
    }
    static<1> group l2_move {
      l2_addr0 = l2_idx.out;
      left_2_0.in = l2_read_data;
      left_2_0.write_en = 1'd1;
    }
    static<1> group l3_idx_init {
      l3_idx.in = 4'd0;
      l3_idx.write_en = 1'd1;
    }
    static<1> group l3_idx_update {
      l3_add.left = 4'd1;
      l3_add.right = l3_idx.out;
      l3_idx.in = l3_add.out;
      l3_idx.write_en = 1'd1;
    }
    static<1> group l3_move {
      l3_addr0 = l3_idx.out;
      left_3_0.in = l3_read_data;
      left_3_0.write_en = 1'd1;
    }
    static<1> group l4_idx_init {
      l4_idx.in = 4'd0;
      l4_idx.write_en = 1'd1;
    }
    static<1> group l4_idx_update {
      l4_add.left = 4'd1;
      l4_add.right = l4_idx.out;
      l4_idx.in = l4_add.out;
      l4_idx.write_en = 1'd1;
    }
    static<1> group l4_move {
      l4_addr0 = l4_idx.out;
      left_4_0.in = l4_read_data;
      left_4_0.write_en = 1'd1;
    }
    static<1> group l5_idx_init {
      l5_idx.in = 4'd0;
      l5_idx.write_en = 1'd1;
    }
    static<1> group l5_idx_update {
      l5_add.left = 4'd1;
      l5_add.right = l5_idx.out;
      l5_idx.in = l5_add.out;
      l5_idx.write_en = 1'd1;
    }
    static<1> group l5_move {
      l5_addr0 = l5_idx.out;
      left_5_0.in = l5_read_data;
      left_5_0.write_en = 1'd1;
    }
    static<1> group l6_idx_init {
      l6_idx.in = 4'd0;
      l6_idx.write_en = 1'd1;
    }
    static<1> group l6_idx_update {
      l6_add.left = 4'd1;
      l6_add.right = l6_idx.out;
      l6_idx.in = l6_add.out;
      l6_idx.write_en = 1'd1;
    }
    static<1> group l6_move {
      l6_addr0 = l6_idx.out;
      left_6_0.in = l6_read_data;
      left_6_0.write_en = 1'd1;
    }
    static<1> group l7_idx_init {
      l7_idx.in = 4'd0;
      l7_idx.write_en = 1'd1;
    }
    static<1> group l7_idx_update {
      l7_add.left = 4'd1;
      l7_add.right = l7_idx.out;
      l7_idx.in = l7_add.out;
      l7_idx.write_en = 1'd1;
    }
    static<1> group l7_move {
      l7_addr0 = l7_idx.out;
      left_7_0.in = l7_read_data;
      left_7_0.write_en = 1'd1;
    }
    static<1> group pe_0_0_right_move {
      left_0_1.in = left_0_0.out;
      left_0_1.write_en = 1'd1;
    }
    static<1> group pe_0_0_down_move {
      top_1_0.in = top_0_0.out;
      top_1_0.write_en = 1'd1;
    }
    static<1> group pe_0_1_right_move {
      left_0_2.in = left_0_1.out;
      left_0_2.write_en = 1'd1;
    }
    static<1> group pe_0_1_down_move {
      top_1_1.in = top_0_1.out;
      top_1_1.write_en = 1'd1;
    }
    static<1> group pe_0_2_right_move {
      left_0_3.in = left_0_2.out;
      left_0_3.write_en = 1'd1;
    }
    static<1> group pe_0_2_down_move {
      top_1_2.in = top_0_2.out;
      top_1_2.write_en = 1'd1;
    }
    static<1> group pe_0_3_right_move {
      left_0_4.in = left_0_3.out;
      left_0_4.write_en = 1'd1;
    }
    static<1> group pe_0_3_down_move {
      top_1_3.in = top_0_3.out;
      top_1_3.write_en = 1'd1;
    }
    static<1> group pe_0_4_right_move {
      left_0_5.in = left_0_4.out;
      left_0_5.write_en = 1'd1;
    }
    static<1> group pe_0_4_down_move {
      top_1_4.in = top_0_4.out;
      top_1_4.write_en = 1'd1;
    }
    static<1> group pe_0_5_right_move {
      left_0_6.in = left_0_5.out;
      left_0_6.write_en = 1'd1;
    }
    static<1> group pe_0_5_down_move {
      top_1_5.in = top_0_5.out;
      top_1_5.write_en = 1'd1;
    }
    static<1> group pe_0_6_right_move {
      left_0_7.in = left_0_6.out;
      left_0_7.write_en = 1'd1;
    }
    static<1> group pe_0_6_down_move {
      top_1_6.in = top_0_6.out;
      top_1_6.write_en = 1'd1;
    }
    static<1> group pe_0_7_down_move {
      top_1_7.in = top_0_7.out;
      top_1_7.write_en = 1'd1;
    }
    static<1> group pe_1_0_right_move {
      left_1_1.in = left_1_0.out;
      left_1_1.write_en = 1'd1;
    }
    static<1> group pe_1_0_down_move {
      top_2_0.in = top_1_0.out;
      top_2_0.write_en = 1'd1;
    }
    static<1> group pe_1_1_right_move {
      left_1_2.in = left_1_1.out;
      left_1_2.write_en = 1'd1;
    }
    static<1> group pe_1_1_down_move {
      top_2_1.in = top_1_1.out;
      top_2_1.write_en = 1'd1;
    }
    static<1> group pe_1_2_right_move {
      left_1_3.in = left_1_2.out;
      left_1_3.write_en = 1'd1;
    }
    static<1> group pe_1_2_down_move {
      top_2_2.in = top_1_2.out;
      top_2_2.write_en = 1'd1;
    }
    static<1> group pe_1_3_right_move {
      left_1_4.in = left_1_3.out;
      left_1_4.write_en = 1'd1;
    }
    static<1> group pe_1_3_down_move {
      top_2_3.in = top_1_3.out;
      top_2_3.write_en = 1'd1;
    }
    static<1> group pe_1_4_right_move {
      left_1_5.in = left_1_4.out;
      left_1_5.write_en = 1'd1;
    }
    static<1> group pe_1_4_down_move {
      top_2_4.in = top_1_4.out;
      top_2_4.write_en = 1'd1;
    }
    static<1> group pe_1_5_right_move {
      left_1_6.in = left_1_5.out;
      left_1_6.write_en = 1'd1;
    }
    static<1> group pe_1_5_down_move {
      top_2_5.in = top_1_5.out;
      top_2_5.write_en = 1'd1;
    }
    static<1> group pe_1_6_right_move {
      left_1_7.in = left_1_6.out;
      left_1_7.write_en = 1'd1;
    }
    static<1> group pe_1_6_down_move {
      top_2_6.in = top_1_6.out;
      top_2_6.write_en = 1'd1;
    }
    static<1> group pe_1_7_down_move {
      top_2_7.in = top_1_7.out;
      top_2_7.write_en = 1'd1;
    }
    static<1> group pe_2_0_right_move {
      left_2_1.in = left_2_0.out;
      left_2_1.write_en = 1'd1;
    }
    static<1> group pe_2_0_down_move {
      top_3_0.in = top_2_0.out;
      top_3_0.write_en = 1'd1;
    }
    static<1> group pe_2_1_right_move {
      left_2_2.in = left_2_1.out;
      left_2_2.write_en = 1'd1;
    }
    static<1> group pe_2_1_down_move {
      top_3_1.in = top_2_1.out;
      top_3_1.write_en = 1'd1;
    }
    static<1> group pe_2_2_right_move {
      left_2_3.in = left_2_2.out;
      left_2_3.write_en = 1'd1;
    }
    static<1> group pe_2_2_down_move {
      top_3_2.in = top_2_2.out;
      top_3_2.write_en = 1'd1;
    }
    static<1> group pe_2_3_right_move {
      left_2_4.in = left_2_3.out;
      left_2_4.write_en = 1'd1;
    }
    static<1> group pe_2_3_down_move {
      top_3_3.in = top_2_3.out;
      top_3_3.write_en = 1'd1;
    }
    static<1> group pe_2_4_right_move {
      left_2_5.in = left_2_4.out;
      left_2_5.write_en = 1'd1;
    }
    static<1> group pe_2_4_down_move {
      top_3_4.in = top_2_4.out;
      top_3_4.write_en = 1'd1;
    }
    static<1> group pe_2_5_right_move {
      left_2_6.in = left_2_5.out;
      left_2_6.write_en = 1'd1;
    }
    static<1> group pe_2_5_down_move {
      top_3_5.in = top_2_5.out;
      top_3_5.write_en = 1'd1;
    }
    static<1> group pe_2_6_right_move {
      left_2_7.in = left_2_6.out;
      left_2_7.write_en = 1'd1;
    }
    static<1> group pe_2_6_down_move {
      top_3_6.in = top_2_6.out;
      top_3_6.write_en = 1'd1;
    }
    static<1> group pe_2_7_down_move {
      top_3_7.in = top_2_7.out;
      top_3_7.write_en = 1'd1;
    }
    static<1> group pe_3_0_right_move {
      left_3_1.in = left_3_0.out;
      left_3_1.write_en = 1'd1;
    }
    static<1> group pe_3_0_down_move {
      top_4_0.in = top_3_0.out;
      top_4_0.write_en = 1'd1;
    }
    static<1> group pe_3_1_right_move {
      left_3_2.in = left_3_1.out;
      left_3_2.write_en = 1'd1;
    }
    static<1> group pe_3_1_down_move {
      top_4_1.in = top_3_1.out;
      top_4_1.write_en = 1'd1;
    }
    static<1> group pe_3_2_right_move {
      left_3_3.in = left_3_2.out;
      left_3_3.write_en = 1'd1;
    }
    static<1> group pe_3_2_down_move {
      top_4_2.in = top_3_2.out;
      top_4_2.write_en = 1'd1;
    }
    static<1> group pe_3_3_right_move {
      left_3_4.in = left_3_3.out;
      left_3_4.write_en = 1'd1;
    }
    static<1> group pe_3_3_down_move {
      top_4_3.in = top_3_3.out;
      top_4_3.write_en = 1'd1;
    }
    static<1> group pe_3_4_right_move {
      left_3_5.in = left_3_4.out;
      left_3_5.write_en = 1'd1;
    }
    static<1> group pe_3_4_down_move {
      top_4_4.in = top_3_4.out;
      top_4_4.write_en = 1'd1;
    }
    static<1> group pe_3_5_right_move {
      left_3_6.in = left_3_5.out;
      left_3_6.write_en = 1'd1;
    }
    static<1> group pe_3_5_down_move {
      top_4_5.in = top_3_5.out;
      top_4_5.write_en = 1'd1;
    }
    static<1> group pe_3_6_right_move {
      left_3_7.in = left_3_6.out;
      left_3_7.write_en = 1'd1;
    }
    static<1> group pe_3_6_down_move {
      top_4_6.in = top_3_6.out;
      top_4_6.write_en = 1'd1;
    }
    static<1> group pe_3_7_down_move {
      top_4_7.in = top_3_7.out;
      top_4_7.write_en = 1'd1;
    }
    static<1> group pe_4_0_right_move {
      left_4_1.in = left_4_0.out;
      left_4_1.write_en = 1'd1;
    }
    static<1> group pe_4_0_down_move {
      top_5_0.in = top_4_0.out;
      top_5_0.write_en = 1'd1;
    }
    static<1> group pe_4_1_right_move {
      left_4_2.in = left_4_1.out;
      left_4_2.write_en = 1'd1;
    }
    static<1> group pe_4_1_down_move {
      top_5_1.in = top_4_1.out;
      top_5_1.write_en = 1'd1;
    }
    static<1> group pe_4_2_right_move {
      left_4_3.in = left_4_2.out;
      left_4_3.write_en = 1'd1;
    }
    static<1> group pe_4_2_down_move {
      top_5_2.in = top_4_2.out;
      top_5_2.write_en = 1'd1;
    }
    static<1> group pe_4_3_right_move {
      left_4_4.in = left_4_3.out;
      left_4_4.write_en = 1'd1;
    }
    static<1> group pe_4_3_down_move {
      top_5_3.in = top_4_3.out;
      top_5_3.write_en = 1'd1;
    }
    static<1> group pe_4_4_right_move {
      left_4_5.in = left_4_4.out;
      left_4_5.write_en = 1'd1;
    }
    static<1> group pe_4_4_down_move {
      top_5_4.in = top_4_4.out;
      top_5_4.write_en = 1'd1;
    }
    static<1> group pe_4_5_right_move {
      left_4_6.in = left_4_5.out;
      left_4_6.write_en = 1'd1;
    }
    static<1> group pe_4_5_down_move {
      top_5_5.in = top_4_5.out;
      top_5_5.write_en = 1'd1;
    }
    static<1> group pe_4_6_right_move {
      left_4_7.in = left_4_6.out;
      left_4_7.write_en = 1'd1;
    }
    static<1> group pe_4_6_down_move {
      top_5_6.in = top_4_6.out;
      top_5_6.write_en = 1'd1;
    }
    static<1> group pe_4_7_down_move {
      top_5_7.in = top_4_7.out;
      top_5_7.write_en = 1'd1;
    }
    static<1> group pe_5_0_right_move {
      left_5_1.in = left_5_0.out;
      left_5_1.write_en = 1'd1;
    }
    static<1> group pe_5_0_down_move {
      top_6_0.in = top_5_0.out;
      top_6_0.write_en = 1'd1;
    }
    static<1> group pe_5_1_right_move {
      left_5_2.in = left_5_1.out;
      left_5_2.write_en = 1'd1;
    }
    static<1> group pe_5_1_down_move {
      top_6_1.in = top_5_1.out;
      top_6_1.write_en = 1'd1;
    }
    static<1> group pe_5_2_right_move {
      left_5_3.in = left_5_2.out;
      left_5_3.write_en = 1'd1;
    }
    static<1> group pe_5_2_down_move {
      top_6_2.in = top_5_2.out;
      top_6_2.write_en = 1'd1;
    }
    static<1> group pe_5_3_right_move {
      left_5_4.in = left_5_3.out;
      left_5_4.write_en = 1'd1;
    }
    static<1> group pe_5_3_down_move {
      top_6_3.in = top_5_3.out;
      top_6_3.write_en = 1'd1;
    }
    static<1> group pe_5_4_right_move {
      left_5_5.in = left_5_4.out;
      left_5_5.write_en = 1'd1;
    }
    static<1> group pe_5_4_down_move {
      top_6_4.in = top_5_4.out;
      top_6_4.write_en = 1'd1;
    }
    static<1> group pe_5_5_right_move {
      left_5_6.in = left_5_5.out;
      left_5_6.write_en = 1'd1;
    }
    static<1> group pe_5_5_down_move {
      top_6_5.in = top_5_5.out;
      top_6_5.write_en = 1'd1;
    }
    static<1> group pe_5_6_right_move {
      left_5_7.in = left_5_6.out;
      left_5_7.write_en = 1'd1;
    }
    static<1> group pe_5_6_down_move {
      top_6_6.in = top_5_6.out;
      top_6_6.write_en = 1'd1;
    }
    static<1> group pe_5_7_down_move {
      top_6_7.in = top_5_7.out;
      top_6_7.write_en = 1'd1;
    }
    static<1> group pe_6_0_right_move {
      left_6_1.in = left_6_0.out;
      left_6_1.write_en = 1'd1;
    }
    static<1> group pe_6_0_down_move {
      top_7_0.in = top_6_0.out;
      top_7_0.write_en = 1'd1;
    }
    static<1> group pe_6_1_right_move {
      left_6_2.in = left_6_1.out;
      left_6_2.write_en = 1'd1;
    }
    static<1> group pe_6_1_down_move {
      top_7_1.in = top_6_1.out;
      top_7_1.write_en = 1'd1;
    }
    static<1> group pe_6_2_right_move {
      left_6_3.in = left_6_2.out;
      left_6_3.write_en = 1'd1;
    }
    static<1> group pe_6_2_down_move {
      top_7_2.in = top_6_2.out;
      top_7_2.write_en = 1'd1;
    }
    static<1> group pe_6_3_right_move {
      left_6_4.in = left_6_3.out;
      left_6_4.write_en = 1'd1;
    }
    static<1> group pe_6_3_down_move {
      top_7_3.in = top_6_3.out;
      top_7_3.write_en = 1'd1;
    }
    static<1> group pe_6_4_right_move {
      left_6_5.in = left_6_4.out;
      left_6_5.write_en = 1'd1;
    }
    static<1> group pe_6_4_down_move {
      top_7_4.in = top_6_4.out;
      top_7_4.write_en = 1'd1;
    }
    static<1> group pe_6_5_right_move {
      left_6_6.in = left_6_5.out;
      left_6_6.write_en = 1'd1;
    }
    static<1> group pe_6_5_down_move {
      top_7_5.in = top_6_5.out;
      top_7_5.write_en = 1'd1;
    }
    static<1> group pe_6_6_right_move {
      left_6_7.in = left_6_6.out;
      left_6_7.write_en = 1'd1;
    }
    static<1> group pe_6_6_down_move {
      top_7_6.in = top_6_6.out;
      top_7_6.write_en = 1'd1;
    }
    static<1> group pe_6_7_down_move {
      top_7_7.in = top_6_7.out;
      top_7_7.write_en = 1'd1;
    }
    static<1> group pe_7_0_right_move {
      left_7_1.in = left_7_0.out;
      left_7_1.write_en = 1'd1;
    }
    static<1> group pe_7_1_right_move {
      left_7_2.in = left_7_1.out;
      left_7_2.write_en = 1'd1;
    }
    static<1> group pe_7_2_right_move {
      left_7_3.in = left_7_2.out;
      left_7_3.write_en = 1'd1;
    }
    static<1> group pe_7_3_right_move {
      left_7_4.in = left_7_3.out;
      left_7_4.write_en = 1'd1;
    }
    static<1> group pe_7_4_right_move {
      left_7_5.in = left_7_4.out;
      left_7_5.write_en = 1'd1;
    }
    static<1> group pe_7_5_right_move {
      left_7_6.in = left_7_5.out;
      left_7_6.write_en = 1'd1;
    }
    static<1> group pe_7_6_right_move {
      left_7_7.in = left_7_6.out;
      left_7_7.write_en = 1'd1;
    }
    static<1> group init_idx {
      idx.in = 32'd0;
      idx.write_en = 1'd1;
    }
    static<1> group incr_idx {
      idx_add.left = idx.out;
      idx_add.right = 32'd1;
      idx.in = idx_add.out;
      idx.write_en = 1'd1;
    }
    static<1> group init_cond_reg {
      cond_reg.in = 1'd1;
      cond_reg.write_en = 1'd1;
    }
    static<1> group idx_between_depth_plus_8_None_group {
      index_ge_depth_plus_8.left = idx_add.out;
      index_ge_depth_plus_8.right = depth_plus_8.out;
    }
    static<1> group idx_between_depth_plus_10_None_group {
      index_ge_depth_plus_10.left = idx_add.out;
      index_ge_depth_plus_10.right = depth_plus_10.out;
    }
    static<1> group idx_between_2_min_depth_4_plus_2_group {
      index_ge_2.left = idx_add.out;
      index_ge_2.right = 32'd2;
      index_lt_min_depth_4_plus_2.left = idx_add.out;
      index_lt_min_depth_4_plus_2.right = min_depth_4_plus_2.out;
      idx_between_2_min_depth_4_plus_2_comb.left = index_ge_2.out;
      idx_between_2_min_depth_4_plus_2_comb.right = index_lt_min_depth_4_plus_2.out;
      idx_between_2_min_depth_4_plus_2_reg.in = idx_between_2_min_depth_4_plus_2_comb.out;
      idx_between_2_min_depth_4_plus_2_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_2_min_depth_4_plus_2 {
      idx_between_2_min_depth_4_plus_2_reg.in = 1'd0;
      idx_between_2_min_depth_4_plus_2_reg.write_en = 1'd1;
    }
    static<1> group idx_between_2_depth_plus_2_group {
      index_ge_2.left = idx_add.out;
      index_ge_2.right = 32'd2;
      index_lt_depth_plus_2.left = idx_add.out;
      index_lt_depth_plus_2.right = depth_plus_2.out;
      idx_between_2_depth_plus_2_comb.left = index_ge_2.out;
      idx_between_2_depth_plus_2_comb.right = index_lt_depth_plus_2.out;
      idx_between_2_depth_plus_2_reg.in = idx_between_2_depth_plus_2_comb.out;
      idx_between_2_depth_plus_2_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_2_depth_plus_2 {
      idx_between_2_depth_plus_2_reg.in = 1'd0;
      idx_between_2_depth_plus_2_reg.write_en = 1'd1;
    }
    static<1> group idx_between_11_depth_plus_11_group {
      index_ge_11.left = idx_add.out;
      index_ge_11.right = 32'd11;
      index_lt_depth_plus_11.left = idx_add.out;
      index_lt_depth_plus_11.right = depth_plus_11.out;
      idx_between_11_depth_plus_11_comb.left = index_ge_11.out;
      idx_between_11_depth_plus_11_comb.right = index_lt_depth_plus_11.out;
      idx_between_11_depth_plus_11_reg.in = idx_between_11_depth_plus_11_comb.out;
      idx_between_11_depth_plus_11_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_11_depth_plus_11 {
      idx_between_11_depth_plus_11_reg.in = 1'd0;
      idx_between_11_depth_plus_11_reg.write_en = 1'd1;
    }
    static<1> group idx_between_11_min_depth_4_plus_11_group {
      index_ge_11.left = idx_add.out;
      index_ge_11.right = 32'd11;
      index_lt_min_depth_4_plus_11.left = idx_add.out;
      index_lt_min_depth_4_plus_11.right = min_depth_4_plus_11.out;
      idx_between_11_min_depth_4_plus_11_comb.left = index_ge_11.out;
      idx_between_11_min_depth_4_plus_11_comb.right = index_lt_min_depth_4_plus_11.out;
      idx_between_11_min_depth_4_plus_11_reg.in = idx_between_11_min_depth_4_plus_11_comb.out;
      idx_between_11_min_depth_4_plus_11_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_11_min_depth_4_plus_11 {
      idx_between_11_min_depth_4_plus_11_reg.in = 1'd0;
      idx_between_11_min_depth_4_plus_11_reg.write_en = 1'd1;
    }
    static<1> group idx_between_7_depth_plus_7_group {
      index_ge_7.left = idx_add.out;
      index_ge_7.right = 32'd7;
      index_lt_depth_plus_7.left = idx_add.out;
      index_lt_depth_plus_7.right = depth_plus_7.out;
      idx_between_7_depth_plus_7_comb.left = index_ge_7.out;
      idx_between_7_depth_plus_7_comb.right = index_lt_depth_plus_7.out;
      idx_between_7_depth_plus_7_reg.in = idx_between_7_depth_plus_7_comb.out;
      idx_between_7_depth_plus_7_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_7_depth_plus_7 {
      idx_between_7_depth_plus_7_reg.in = 1'd0;
      idx_between_7_depth_plus_7_reg.write_en = 1'd1;
    }
    static<1> group idx_between_7_min_depth_4_plus_7_group {
      index_ge_7.left = idx_add.out;
      index_ge_7.right = 32'd7;
      index_lt_min_depth_4_plus_7.left = idx_add.out;
      index_lt_min_depth_4_plus_7.right = min_depth_4_plus_7.out;
      idx_between_7_min_depth_4_plus_7_comb.left = index_ge_7.out;
      idx_between_7_min_depth_4_plus_7_comb.right = index_lt_min_depth_4_plus_7.out;
      idx_between_7_min_depth_4_plus_7_reg.in = idx_between_7_min_depth_4_plus_7_comb.out;
      idx_between_7_min_depth_4_plus_7_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_7_min_depth_4_plus_7 {
      idx_between_7_min_depth_4_plus_7_reg.in = 1'd0;
      idx_between_7_min_depth_4_plus_7_reg.write_en = 1'd1;
    }
    static<1> group idx_between_16_depth_plus_16_group {
      index_ge_16.left = idx_add.out;
      index_ge_16.right = 32'd16;
      index_lt_depth_plus_16.left = idx_add.out;
      index_lt_depth_plus_16.right = depth_plus_16.out;
      idx_between_16_depth_plus_16_comb.left = index_ge_16.out;
      idx_between_16_depth_plus_16_comb.right = index_lt_depth_plus_16.out;
      idx_between_16_depth_plus_16_reg.in = idx_between_16_depth_plus_16_comb.out;
      idx_between_16_depth_plus_16_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_16_depth_plus_16 {
      idx_between_16_depth_plus_16_reg.in = 1'd0;
      idx_between_16_depth_plus_16_reg.write_en = 1'd1;
    }
    static<1> group idx_between_depth_plus_12_None_group {
      index_ge_depth_plus_12.left = idx_add.out;
      index_ge_depth_plus_12.right = depth_plus_12.out;
    }
    static<1> group idx_between_3_depth_plus_3_group {
      index_ge_3.left = idx_add.out;
      index_ge_3.right = 32'd3;
      index_lt_depth_plus_3.left = idx_add.out;
      index_lt_depth_plus_3.right = depth_plus_3.out;
      idx_between_3_depth_plus_3_comb.left = index_ge_3.out;
      idx_between_3_depth_plus_3_comb.right = index_lt_depth_plus_3.out;
      idx_between_3_depth_plus_3_reg.in = idx_between_3_depth_plus_3_comb.out;
      idx_between_3_depth_plus_3_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_3_depth_plus_3 {
      idx_between_3_depth_plus_3_reg.in = 1'd0;
      idx_between_3_depth_plus_3_reg.write_en = 1'd1;
    }
    static<1> group idx_between_12_depth_plus_12_group {
      index_ge_12.left = idx_add.out;
      index_ge_12.right = 32'd12;
      index_lt_depth_plus_12.left = idx_add.out;
      index_lt_depth_plus_12.right = depth_plus_12.out;
      idx_between_12_depth_plus_12_comb.left = index_ge_12.out;
      idx_between_12_depth_plus_12_comb.right = index_lt_depth_plus_12.out;
      idx_between_12_depth_plus_12_reg.in = idx_between_12_depth_plus_12_comb.out;
      idx_between_12_depth_plus_12_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_12_depth_plus_12 {
      idx_between_12_depth_plus_12_reg.in = 1'd0;
      idx_between_12_depth_plus_12_reg.write_en = 1'd1;
    }
    static<1> group idx_between_3_min_depth_4_plus_3_group {
      index_ge_3.left = idx_add.out;
      index_ge_3.right = 32'd3;
      index_lt_min_depth_4_plus_3.left = idx_add.out;
      index_lt_min_depth_4_plus_3.right = min_depth_4_plus_3.out;
      idx_between_3_min_depth_4_plus_3_comb.left = index_ge_3.out;
      idx_between_3_min_depth_4_plus_3_comb.right = index_lt_min_depth_4_plus_3.out;
      idx_between_3_min_depth_4_plus_3_reg.in = idx_between_3_min_depth_4_plus_3_comb.out;
      idx_between_3_min_depth_4_plus_3_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_3_min_depth_4_plus_3 {
      idx_between_3_min_depth_4_plus_3_reg.in = 1'd0;
      idx_between_3_min_depth_4_plus_3_reg.write_en = 1'd1;
    }
    static<1> group idx_between_12_min_depth_4_plus_12_group {
      index_ge_12.left = idx_add.out;
      index_ge_12.right = 32'd12;
      index_lt_min_depth_4_plus_12.left = idx_add.out;
      index_lt_min_depth_4_plus_12.right = min_depth_4_plus_12.out;
      idx_between_12_min_depth_4_plus_12_comb.left = index_ge_12.out;
      idx_between_12_min_depth_4_plus_12_comb.right = index_lt_min_depth_4_plus_12.out;
      idx_between_12_min_depth_4_plus_12_reg.in = idx_between_12_min_depth_4_plus_12_comb.out;
      idx_between_12_min_depth_4_plus_12_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_12_min_depth_4_plus_12 {
      idx_between_12_min_depth_4_plus_12_reg.in = 1'd0;
      idx_between_12_min_depth_4_plus_12_reg.write_en = 1'd1;
    }
    static<1> group idx_between_depth_plus_5_None_group {
      index_ge_depth_plus_5.left = idx_add.out;
      index_ge_depth_plus_5.right = depth_plus_5.out;
    }
    static<1> group idx_between_8_depth_plus_8_group {
      index_ge_8.left = idx_add.out;
      index_ge_8.right = 32'd8;
      index_lt_depth_plus_8.left = idx_add.out;
      index_lt_depth_plus_8.right = depth_plus_8.out;
      idx_between_8_depth_plus_8_comb.left = index_ge_8.out;
      idx_between_8_depth_plus_8_comb.right = index_lt_depth_plus_8.out;
      idx_between_8_depth_plus_8_reg.in = idx_between_8_depth_plus_8_comb.out;
      idx_between_8_depth_plus_8_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_8_depth_plus_8 {
      idx_between_8_depth_plus_8_reg.in = 1'd0;
      idx_between_8_depth_plus_8_reg.write_en = 1'd1;
    }
    static<1> group idx_between_8_min_depth_4_plus_8_group {
      index_ge_8.left = idx_add.out;
      index_ge_8.right = 32'd8;
      index_lt_min_depth_4_plus_8.left = idx_add.out;
      index_lt_min_depth_4_plus_8.right = min_depth_4_plus_8.out;
      idx_between_8_min_depth_4_plus_8_comb.left = index_ge_8.out;
      idx_between_8_min_depth_4_plus_8_comb.right = index_lt_min_depth_4_plus_8.out;
      idx_between_8_min_depth_4_plus_8_reg.in = idx_between_8_min_depth_4_plus_8_comb.out;
      idx_between_8_min_depth_4_plus_8_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_8_min_depth_4_plus_8 {
      idx_between_8_min_depth_4_plus_8_reg.in = 1'd0;
      idx_between_8_min_depth_4_plus_8_reg.write_en = 1'd1;
    }
    static<1> group idx_between_17_depth_plus_17_group {
      index_ge_17.left = idx_add.out;
      index_ge_17.right = 32'd17;
      index_lt_depth_plus_17.left = idx_add.out;
      index_lt_depth_plus_17.right = depth_plus_17.out;
      idx_between_17_depth_plus_17_comb.left = index_ge_17.out;
      idx_between_17_depth_plus_17_comb.right = index_lt_depth_plus_17.out;
      idx_between_17_depth_plus_17_reg.in = idx_between_17_depth_plus_17_comb.out;
      idx_between_17_depth_plus_17_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_17_depth_plus_17 {
      idx_between_17_depth_plus_17_reg.in = 1'd0;
      idx_between_17_depth_plus_17_reg.write_en = 1'd1;
    }
    static<1> group idx_between_depth_plus_7_None_group {
      index_ge_depth_plus_7.left = idx_add.out;
      index_ge_depth_plus_7.right = depth_plus_7.out;
    }
    static<1> group idx_between_6_min_depth_4_plus_6_group {
      index_ge_6.left = idx_add.out;
      index_ge_6.right = 32'd6;
      index_lt_min_depth_4_plus_6.left = idx_add.out;
      index_lt_min_depth_4_plus_6.right = min_depth_4_plus_6.out;
      idx_between_6_min_depth_4_plus_6_comb.left = index_ge_6.out;
      idx_between_6_min_depth_4_plus_6_comb.right = index_lt_min_depth_4_plus_6.out;
      idx_between_6_min_depth_4_plus_6_reg.in = idx_between_6_min_depth_4_plus_6_comb.out;
      idx_between_6_min_depth_4_plus_6_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_6_min_depth_4_plus_6 {
      idx_between_6_min_depth_4_plus_6_reg.in = 1'd0;
      idx_between_6_min_depth_4_plus_6_reg.write_en = 1'd1;
    }
    static<1> group idx_between_13_depth_plus_13_group {
      index_ge_13.left = idx_add.out;
      index_ge_13.right = 32'd13;
      index_lt_depth_plus_13.left = idx_add.out;
      index_lt_depth_plus_13.right = depth_plus_13.out;
      idx_between_13_depth_plus_13_comb.left = index_ge_13.out;
      idx_between_13_depth_plus_13_comb.right = index_lt_depth_plus_13.out;
      idx_between_13_depth_plus_13_reg.in = idx_between_13_depth_plus_13_comb.out;
      idx_between_13_depth_plus_13_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_13_depth_plus_13 {
      idx_between_13_depth_plus_13_reg.in = 1'd0;
      idx_between_13_depth_plus_13_reg.write_en = 1'd1;
    }
    static<1> group idx_between_13_min_depth_4_plus_13_group {
      index_ge_13.left = idx_add.out;
      index_ge_13.right = 32'd13;
      index_lt_min_depth_4_plus_13.left = idx_add.out;
      index_lt_min_depth_4_plus_13.right = min_depth_4_plus_13.out;
      idx_between_13_min_depth_4_plus_13_comb.left = index_ge_13.out;
      idx_between_13_min_depth_4_plus_13_comb.right = index_lt_min_depth_4_plus_13.out;
      idx_between_13_min_depth_4_plus_13_reg.in = idx_between_13_min_depth_4_plus_13_comb.out;
      idx_between_13_min_depth_4_plus_13_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_13_min_depth_4_plus_13 {
      idx_between_13_min_depth_4_plus_13_reg.in = 1'd0;
      idx_between_13_min_depth_4_plus_13_reg.write_en = 1'd1;
    }
    static<1> group idx_between_18_depth_plus_18_group {
      index_ge_18.left = idx_add.out;
      index_ge_18.right = 32'd18;
      index_lt_depth_plus_18.left = idx_add.out;
      index_lt_depth_plus_18.right = depth_plus_18.out;
      idx_between_18_depth_plus_18_comb.left = index_ge_18.out;
      idx_between_18_depth_plus_18_comb.right = index_lt_depth_plus_18.out;
      idx_between_18_depth_plus_18_reg.in = idx_between_18_depth_plus_18_comb.out;
      idx_between_18_depth_plus_18_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_18_depth_plus_18 {
      idx_between_18_depth_plus_18_reg.in = 1'd0;
      idx_between_18_depth_plus_18_reg.write_en = 1'd1;
    }
    static<1> group idx_between_15_depth_plus_15_group {
      index_ge_15.left = idx_add.out;
      index_ge_15.right = 32'd15;
      index_lt_depth_plus_15.left = idx_add.out;
      index_lt_depth_plus_15.right = depth_plus_15.out;
      idx_between_15_depth_plus_15_comb.left = index_ge_15.out;
      idx_between_15_depth_plus_15_comb.right = index_lt_depth_plus_15.out;
      idx_between_15_depth_plus_15_reg.in = idx_between_15_depth_plus_15_comb.out;
      idx_between_15_depth_plus_15_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_15_depth_plus_15 {
      idx_between_15_depth_plus_15_reg.in = 1'd0;
      idx_between_15_depth_plus_15_reg.write_en = 1'd1;
    }
    static<1> group idx_between_4_depth_plus_4_group {
      index_ge_4.left = idx_add.out;
      index_ge_4.right = 32'd4;
      index_lt_depth_plus_4.left = idx_add.out;
      index_lt_depth_plus_4.right = depth_plus_4.out;
      idx_between_4_depth_plus_4_comb.left = index_ge_4.out;
      idx_between_4_depth_plus_4_comb.right = index_lt_depth_plus_4.out;
      idx_between_4_depth_plus_4_reg.in = idx_between_4_depth_plus_4_comb.out;
      idx_between_4_depth_plus_4_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_4_depth_plus_4 {
      idx_between_4_depth_plus_4_reg.in = 1'd0;
      idx_between_4_depth_plus_4_reg.write_en = 1'd1;
    }
    static<1> group idx_between_4_min_depth_4_plus_4_group {
      index_ge_4.left = idx_add.out;
      index_ge_4.right = 32'd4;
      index_lt_min_depth_4_plus_4.left = idx_add.out;
      index_lt_min_depth_4_plus_4.right = min_depth_4_plus_4.out;
      idx_between_4_min_depth_4_plus_4_comb.left = index_ge_4.out;
      idx_between_4_min_depth_4_plus_4_comb.right = index_lt_min_depth_4_plus_4.out;
      idx_between_4_min_depth_4_plus_4_reg.in = idx_between_4_min_depth_4_plus_4_comb.out;
      idx_between_4_min_depth_4_plus_4_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_4_min_depth_4_plus_4 {
      idx_between_4_min_depth_4_plus_4_reg.in = 1'd0;
      idx_between_4_min_depth_4_plus_4_reg.write_en = 1'd1;
    }
    static<1> group idx_between_depth_plus_9_None_group {
      index_ge_depth_plus_9.left = idx_add.out;
      index_ge_depth_plus_9.right = depth_plus_9.out;
    }
    static<1> group idx_between_5_depth_plus_5_group {
      index_ge_5.left = idx_add.out;
      index_ge_5.right = 32'd5;
      index_lt_depth_plus_5.left = idx_add.out;
      index_lt_depth_plus_5.right = depth_plus_5.out;
      idx_between_5_depth_plus_5_comb.left = index_ge_5.out;
      idx_between_5_depth_plus_5_comb.right = index_lt_depth_plus_5.out;
      idx_between_5_depth_plus_5_reg.in = idx_between_5_depth_plus_5_comb.out;
      idx_between_5_depth_plus_5_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_5_depth_plus_5 {
      idx_between_5_depth_plus_5_reg.in = 1'd0;
      idx_between_5_depth_plus_5_reg.write_en = 1'd1;
    }
    static<1> group idx_between_14_depth_plus_14_group {
      index_ge_14.left = idx_add.out;
      index_ge_14.right = 32'd14;
      index_lt_depth_plus_14.left = idx_add.out;
      index_lt_depth_plus_14.right = depth_plus_14.out;
      idx_between_14_depth_plus_14_comb.left = index_ge_14.out;
      idx_between_14_depth_plus_14_comb.right = index_lt_depth_plus_14.out;
      idx_between_14_depth_plus_14_reg.in = idx_between_14_depth_plus_14_comb.out;
      idx_between_14_depth_plus_14_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_14_depth_plus_14 {
      idx_between_14_depth_plus_14_reg.in = 1'd0;
      idx_between_14_depth_plus_14_reg.write_en = 1'd1;
    }
    static<1> group idx_between_5_min_depth_4_plus_5_group {
      index_ge_5.left = idx_add.out;
      index_ge_5.right = 32'd5;
      index_lt_min_depth_4_plus_5.left = idx_add.out;
      index_lt_min_depth_4_plus_5.right = min_depth_4_plus_5.out;
      idx_between_5_min_depth_4_plus_5_comb.left = index_ge_5.out;
      idx_between_5_min_depth_4_plus_5_comb.right = index_lt_min_depth_4_plus_5.out;
      idx_between_5_min_depth_4_plus_5_reg.in = idx_between_5_min_depth_4_plus_5_comb.out;
      idx_between_5_min_depth_4_plus_5_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_5_min_depth_4_plus_5 {
      idx_between_5_min_depth_4_plus_5_reg.in = 1'd0;
      idx_between_5_min_depth_4_plus_5_reg.write_en = 1'd1;
    }
    static<1> group idx_between_14_min_depth_4_plus_14_group {
      index_ge_14.left = idx_add.out;
      index_ge_14.right = 32'd14;
      index_lt_min_depth_4_plus_14.left = idx_add.out;
      index_lt_min_depth_4_plus_14.right = min_depth_4_plus_14.out;
      idx_between_14_min_depth_4_plus_14_comb.left = index_ge_14.out;
      idx_between_14_min_depth_4_plus_14_comb.right = index_lt_min_depth_4_plus_14.out;
      idx_between_14_min_depth_4_plus_14_reg.in = idx_between_14_min_depth_4_plus_14_comb.out;
      idx_between_14_min_depth_4_plus_14_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_14_min_depth_4_plus_14 {
      idx_between_14_min_depth_4_plus_14_reg.in = 1'd0;
      idx_between_14_min_depth_4_plus_14_reg.write_en = 1'd1;
    }
    static<1> group idx_between_0_depth_plus_0_group {
      index_lt_depth_plus_0.left = idx_add.out;
      index_lt_depth_plus_0.right = depth_plus_0.out;
      idx_between_0_depth_plus_0_reg.in = index_lt_depth_plus_0.out;
      idx_between_0_depth_plus_0_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_0_depth_plus_0 {
      idx_between_0_depth_plus_0_reg.in = 1'd1;
      idx_between_0_depth_plus_0_reg.write_en = 1'd1;
    }
    static<1> group idx_between_9_depth_plus_9_group {
      index_ge_9.left = idx_add.out;
      index_ge_9.right = 32'd9;
      index_lt_depth_plus_9.left = idx_add.out;
      index_lt_depth_plus_9.right = depth_plus_9.out;
      idx_between_9_depth_plus_9_comb.left = index_ge_9.out;
      idx_between_9_depth_plus_9_comb.right = index_lt_depth_plus_9.out;
      idx_between_9_depth_plus_9_reg.in = idx_between_9_depth_plus_9_comb.out;
      idx_between_9_depth_plus_9_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_9_depth_plus_9 {
      idx_between_9_depth_plus_9_reg.in = 1'd0;
      idx_between_9_depth_plus_9_reg.write_en = 1'd1;
    }
    static<1> group idx_between_9_min_depth_4_plus_9_group {
      index_ge_9.left = idx_add.out;
      index_ge_9.right = 32'd9;
      index_lt_min_depth_4_plus_9.left = idx_add.out;
      index_lt_min_depth_4_plus_9.right = min_depth_4_plus_9.out;
      idx_between_9_min_depth_4_plus_9_comb.left = index_ge_9.out;
      idx_between_9_min_depth_4_plus_9_comb.right = index_lt_min_depth_4_plus_9.out;
      idx_between_9_min_depth_4_plus_9_reg.in = idx_between_9_min_depth_4_plus_9_comb.out;
      idx_between_9_min_depth_4_plus_9_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_9_min_depth_4_plus_9 {
      idx_between_9_min_depth_4_plus_9_reg.in = 1'd0;
      idx_between_9_min_depth_4_plus_9_reg.write_en = 1'd1;
    }
    static<1> group idx_between_1_depth_plus_1_group {
      index_ge_1.left = idx_add.out;
      index_ge_1.right = 32'd1;
      index_lt_depth_plus_1.left = idx_add.out;
      index_lt_depth_plus_1.right = depth_plus_1.out;
      idx_between_1_depth_plus_1_comb.left = index_ge_1.out;
      idx_between_1_depth_plus_1_comb.right = index_lt_depth_plus_1.out;
      idx_between_1_depth_plus_1_reg.in = idx_between_1_depth_plus_1_comb.out;
      idx_between_1_depth_plus_1_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_1_depth_plus_1 {
      idx_between_1_depth_plus_1_reg.in = 1'd0;
      idx_between_1_depth_plus_1_reg.write_en = 1'd1;
    }
    static<1> group idx_between_1_min_depth_4_plus_1_group {
      index_ge_1.left = idx_add.out;
      index_ge_1.right = 32'd1;
      index_lt_min_depth_4_plus_1.left = idx_add.out;
      index_lt_min_depth_4_plus_1.right = min_depth_4_plus_1.out;
      idx_between_1_min_depth_4_plus_1_comb.left = index_ge_1.out;
      idx_between_1_min_depth_4_plus_1_comb.right = index_lt_min_depth_4_plus_1.out;
      idx_between_1_min_depth_4_plus_1_reg.in = idx_between_1_min_depth_4_plus_1_comb.out;
      idx_between_1_min_depth_4_plus_1_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_1_min_depth_4_plus_1 {
      idx_between_1_min_depth_4_plus_1_reg.in = 1'd0;
      idx_between_1_min_depth_4_plus_1_reg.write_en = 1'd1;
    }
    static<1> group idx_between_depth_plus_11_None_group {
      index_ge_depth_plus_11.left = idx_add.out;
      index_ge_depth_plus_11.right = depth_plus_11.out;
    }
    static<1> group idx_between_10_depth_plus_10_group {
      index_ge_10.left = idx_add.out;
      index_ge_10.right = 32'd10;
      index_lt_depth_plus_10.left = idx_add.out;
      index_lt_depth_plus_10.right = depth_plus_10.out;
      idx_between_10_depth_plus_10_comb.left = index_ge_10.out;
      idx_between_10_depth_plus_10_comb.right = index_lt_depth_plus_10.out;
      idx_between_10_depth_plus_10_reg.in = idx_between_10_depth_plus_10_comb.out;
      idx_between_10_depth_plus_10_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_10_depth_plus_10 {
      idx_between_10_depth_plus_10_reg.in = 1'd0;
      idx_between_10_depth_plus_10_reg.write_en = 1'd1;
    }
    static<1> group idx_between_10_min_depth_4_plus_10_group {
      index_ge_10.left = idx_add.out;
      index_ge_10.right = 32'd10;
      index_lt_min_depth_4_plus_10.left = idx_add.out;
      index_lt_min_depth_4_plus_10.right = min_depth_4_plus_10.out;
      idx_between_10_min_depth_4_plus_10_comb.left = index_ge_10.out;
      idx_between_10_min_depth_4_plus_10_comb.right = index_lt_min_depth_4_plus_10.out;
      idx_between_10_min_depth_4_plus_10_reg.in = idx_between_10_min_depth_4_plus_10_comb.out;
      idx_between_10_min_depth_4_plus_10_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_10_min_depth_4_plus_10 {
      idx_between_10_min_depth_4_plus_10_reg.in = 1'd0;
      idx_between_10_min_depth_4_plus_10_reg.write_en = 1'd1;
    }
    static<1> group idx_between_19_depth_plus_19_group {
      index_ge_19.left = idx_add.out;
      index_ge_19.right = 32'd19;
      index_lt_depth_plus_19.left = idx_add.out;
      index_lt_depth_plus_19.right = depth_plus_19.out;
      idx_between_19_depth_plus_19_comb.left = index_ge_19.out;
      idx_between_19_depth_plus_19_comb.right = index_lt_depth_plus_19.out;
      idx_between_19_depth_plus_19_reg.in = idx_between_19_depth_plus_19_comb.out;
      idx_between_19_depth_plus_19_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_19_depth_plus_19 {
      idx_between_19_depth_plus_19_reg.in = 1'd0;
      idx_between_19_depth_plus_19_reg.write_en = 1'd1;
    }
    static<1> group idx_between_depth_plus_6_None_group {
      index_ge_depth_plus_6.left = idx_add.out;
      index_ge_depth_plus_6.right = depth_plus_6.out;
    }
    static<1> group idx_between_6_depth_plus_6_group {
      index_ge_6.left = idx_add.out;
      index_ge_6.right = 32'd6;
      index_lt_depth_plus_6.left = idx_add.out;
      index_lt_depth_plus_6.right = depth_plus_6.out;
      idx_between_6_depth_plus_6_comb.left = index_ge_6.out;
      idx_between_6_depth_plus_6_comb.right = index_lt_depth_plus_6.out;
      idx_between_6_depth_plus_6_reg.in = idx_between_6_depth_plus_6_comb.out;
      idx_between_6_depth_plus_6_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_6_depth_plus_6 {
      idx_between_6_depth_plus_6_reg.in = 1'd0;
      idx_between_6_depth_plus_6_reg.write_en = 1'd1;
    }
    static<1> group idx_between_15_min_depth_4_plus_15_group {
      index_ge_15.left = idx_add.out;
      index_ge_15.right = 32'd15;
      index_lt_min_depth_4_plus_15.left = idx_add.out;
      index_lt_min_depth_4_plus_15.right = min_depth_4_plus_15.out;
      idx_between_15_min_depth_4_plus_15_comb.left = index_ge_15.out;
      idx_between_15_min_depth_4_plus_15_comb.right = index_lt_min_depth_4_plus_15.out;
      idx_between_15_min_depth_4_plus_15_reg.in = idx_between_15_min_depth_4_plus_15_comb.out;
      idx_between_15_min_depth_4_plus_15_reg.write_en = 1'd1;
    }
    static<1> group init_idx_between_15_min_depth_4_plus_15 {
      idx_between_15_min_depth_4_plus_15_reg.in = 1'd0;
      idx_between_15_min_depth_4_plus_15_reg.write_en = 1'd1;
    }
    static<1> group relu_r0_helper {
      relu_r0_cur_val.in = relu_r0_cur_idx.out == 32'd0 ? pe_0_0.out;
      relu_r0_cur_val.in = relu_r0_cur_idx.out == 32'd1 ? pe_0_1.out;
      relu_r0_cur_val.in = relu_r0_cur_idx.out == 32'd2 ? pe_0_2.out;
      relu_r0_cur_val.in = relu_r0_cur_idx.out == 32'd3 ? pe_0_3.out;
      relu_r0_cur_val.in = relu_r0_cur_idx.out == 32'd4 ? pe_0_4.out;
      relu_r0_cur_val.in = relu_r0_cur_idx.out == 32'd5 ? pe_0_5.out;
      relu_r0_cur_val.in = relu_r0_cur_idx.out == 32'd6 ? pe_0_6.out;
      relu_r0_cur_val.in = relu_r0_cur_idx.out == 32'd7 ? pe_0_7.out;
    }
    static<1> group execute_relu_r0 {
      relu_r0_val_gt.left = relu_r0_cur_val.out;
      relu_r0_val_gt.right = 32'd0;
      relu_r0_incr.left = relu_r0_cur_idx.out;
      relu_r0_incr.right = 32'd1;
      relu_r0_go_next.in = relu_r0_val_mult.done | relu_r0_val_gt.out ? 32'd1;
      relu_r0_cur_idx.in = relu_r0_go_next.out ? relu_r0_incr.out;
      relu_r0_cur_idx.write_en = relu_r0_go_next.out ? 1'd1;
      relu_r0_val_mult.left = 32'd655;
      relu_r0_val_mult.right = relu_r0_cur_val.out;
      relu_r0_val_mult.go = !relu_r0_go_next.out ? 1'd1;
      out_mem_0_write_en = relu_r0_go_next.out ? 1'd1;
      out_mem_0_addr0 = relu_r0_cur_idx.out;
      out_mem_0_write_data = relu_r0_val_gt.out ? relu_r0_cur_val.out;
      out_mem_0_write_data = !relu_r0_val_gt.out ? relu_r0_val_mult.out;
      relu_finished_wire_r0.in = relu_r0_go_next.out & relu_r0_cur_idx.out == 32'd7 ? 1'd1;
      relu_finished_reg_r0.in = relu_finished_wire_r0.out ? 1'd1;
      relu_finished_reg_r0.write_en = relu_finished_wire_r0.out ? 1'd1;
    }
    static<1> group check_relu_cond_r0 {
      relu_cond_wire_r0.in = index_ge_depth_plus_5.out & !relu_finished_wire_r0.out ? 1'd1;
      relu_cond_reg_r0.in = relu_cond_wire_r0.out ? 1'd1;
      relu_cond_reg_r0.in = !relu_cond_wire_r0.out ? 1'd0;
      relu_cond_reg_r0.write_en = !relu_finished_reg_r0.out ? 1'd1;
    }
    static<1> group relu_r1_helper {
      relu_r1_cur_val.in = relu_r1_cur_idx.out == 32'd0 ? pe_1_0.out;
      relu_r1_cur_val.in = relu_r1_cur_idx.out == 32'd1 ? pe_1_1.out;
      relu_r1_cur_val.in = relu_r1_cur_idx.out == 32'd2 ? pe_1_2.out;
      relu_r1_cur_val.in = relu_r1_cur_idx.out == 32'd3 ? pe_1_3.out;
      relu_r1_cur_val.in = relu_r1_cur_idx.out == 32'd4 ? pe_1_4.out;
      relu_r1_cur_val.in = relu_r1_cur_idx.out == 32'd5 ? pe_1_5.out;
      relu_r1_cur_val.in = relu_r1_cur_idx.out == 32'd6 ? pe_1_6.out;
      relu_r1_cur_val.in = relu_r1_cur_idx.out == 32'd7 ? pe_1_7.out;
    }
    static<1> group execute_relu_r1 {
      relu_r1_val_gt.left = relu_r1_cur_val.out;
      relu_r1_val_gt.right = 32'd0;
      relu_r1_incr.left = relu_r1_cur_idx.out;
      relu_r1_incr.right = 32'd1;
      relu_r1_go_next.in = relu_r1_val_mult.done | relu_r1_val_gt.out ? 32'd1;
      relu_r1_cur_idx.in = relu_r1_go_next.out ? relu_r1_incr.out;
      relu_r1_cur_idx.write_en = relu_r1_go_next.out ? 1'd1;
      relu_r1_val_mult.left = 32'd655;
      relu_r1_val_mult.right = relu_r1_cur_val.out;
      relu_r1_val_mult.go = !relu_r1_go_next.out ? 1'd1;
      out_mem_1_write_en = relu_r1_go_next.out ? 1'd1;
      out_mem_1_addr0 = relu_r1_cur_idx.out;
      out_mem_1_write_data = relu_r1_val_gt.out ? relu_r1_cur_val.out;
      out_mem_1_write_data = !relu_r1_val_gt.out ? relu_r1_val_mult.out;
      relu_finished_wire_r1.in = relu_r1_go_next.out & relu_r1_cur_idx.out == 32'd7 ? 1'd1;
      relu_finished_reg_r1.in = relu_finished_wire_r1.out ? 1'd1;
      relu_finished_reg_r1.write_en = relu_finished_wire_r1.out ? 1'd1;
    }
    static<1> group check_relu_cond_r1 {
      relu_cond_wire_r1.in = index_ge_depth_plus_6.out & !relu_finished_wire_r1.out ? 1'd1;
      relu_cond_reg_r1.in = relu_cond_wire_r1.out ? 1'd1;
      relu_cond_reg_r1.in = !relu_cond_wire_r1.out ? 1'd0;
      relu_cond_reg_r1.write_en = !relu_finished_reg_r1.out ? 1'd1;
    }
    static<1> group relu_r2_helper {
      relu_r2_cur_val.in = relu_r2_cur_idx.out == 32'd0 ? pe_2_0.out;
      relu_r2_cur_val.in = relu_r2_cur_idx.out == 32'd1 ? pe_2_1.out;
      relu_r2_cur_val.in = relu_r2_cur_idx.out == 32'd2 ? pe_2_2.out;
      relu_r2_cur_val.in = relu_r2_cur_idx.out == 32'd3 ? pe_2_3.out;
      relu_r2_cur_val.in = relu_r2_cur_idx.out == 32'd4 ? pe_2_4.out;
      relu_r2_cur_val.in = relu_r2_cur_idx.out == 32'd5 ? pe_2_5.out;
      relu_r2_cur_val.in = relu_r2_cur_idx.out == 32'd6 ? pe_2_6.out;
      relu_r2_cur_val.in = relu_r2_cur_idx.out == 32'd7 ? pe_2_7.out;
    }
    static<1> group execute_relu_r2 {
      relu_r2_val_gt.left = relu_r2_cur_val.out;
      relu_r2_val_gt.right = 32'd0;
      relu_r2_incr.left = relu_r2_cur_idx.out;
      relu_r2_incr.right = 32'd1;
      relu_r2_go_next.in = relu_r2_val_mult.done | relu_r2_val_gt.out ? 32'd1;
      relu_r2_cur_idx.in = relu_r2_go_next.out ? relu_r2_incr.out;
      relu_r2_cur_idx.write_en = relu_r2_go_next.out ? 1'd1;
      relu_r2_val_mult.left = 32'd655;
      relu_r2_val_mult.right = relu_r2_cur_val.out;
      relu_r2_val_mult.go = !relu_r2_go_next.out ? 1'd1;
      out_mem_2_write_en = relu_r2_go_next.out ? 1'd1;
      out_mem_2_addr0 = relu_r2_cur_idx.out;
      out_mem_2_write_data = relu_r2_val_gt.out ? relu_r2_cur_val.out;
      out_mem_2_write_data = !relu_r2_val_gt.out ? relu_r2_val_mult.out;
      relu_finished_wire_r2.in = relu_r2_go_next.out & relu_r2_cur_idx.out == 32'd7 ? 1'd1;
      relu_finished_reg_r2.in = relu_finished_wire_r2.out ? 1'd1;
      relu_finished_reg_r2.write_en = relu_finished_wire_r2.out ? 1'd1;
    }
    static<1> group check_relu_cond_r2 {
      relu_cond_wire_r2.in = index_ge_depth_plus_7.out & !relu_finished_wire_r2.out ? 1'd1;
      relu_cond_reg_r2.in = relu_cond_wire_r2.out ? 1'd1;
      relu_cond_reg_r2.in = !relu_cond_wire_r2.out ? 1'd0;
      relu_cond_reg_r2.write_en = !relu_finished_reg_r2.out ? 1'd1;
    }
    static<1> group relu_r3_helper {
      relu_r3_cur_val.in = relu_r3_cur_idx.out == 32'd0 ? pe_3_0.out;
      relu_r3_cur_val.in = relu_r3_cur_idx.out == 32'd1 ? pe_3_1.out;
      relu_r3_cur_val.in = relu_r3_cur_idx.out == 32'd2 ? pe_3_2.out;
      relu_r3_cur_val.in = relu_r3_cur_idx.out == 32'd3 ? pe_3_3.out;
      relu_r3_cur_val.in = relu_r3_cur_idx.out == 32'd4 ? pe_3_4.out;
      relu_r3_cur_val.in = relu_r3_cur_idx.out == 32'd5 ? pe_3_5.out;
      relu_r3_cur_val.in = relu_r3_cur_idx.out == 32'd6 ? pe_3_6.out;
      relu_r3_cur_val.in = relu_r3_cur_idx.out == 32'd7 ? pe_3_7.out;
    }
    static<1> group execute_relu_r3 {
      relu_r3_val_gt.left = relu_r3_cur_val.out;
      relu_r3_val_gt.right = 32'd0;
      relu_r3_incr.left = relu_r3_cur_idx.out;
      relu_r3_incr.right = 32'd1;
      relu_r3_go_next.in = relu_r3_val_mult.done | relu_r3_val_gt.out ? 32'd1;
      relu_r3_cur_idx.in = relu_r3_go_next.out ? relu_r3_incr.out;
      relu_r3_cur_idx.write_en = relu_r3_go_next.out ? 1'd1;
      relu_r3_val_mult.left = 32'd655;
      relu_r3_val_mult.right = relu_r3_cur_val.out;
      relu_r3_val_mult.go = !relu_r3_go_next.out ? 1'd1;
      out_mem_3_write_en = relu_r3_go_next.out ? 1'd1;
      out_mem_3_addr0 = relu_r3_cur_idx.out;
      out_mem_3_write_data = relu_r3_val_gt.out ? relu_r3_cur_val.out;
      out_mem_3_write_data = !relu_r3_val_gt.out ? relu_r3_val_mult.out;
      relu_finished_wire_r3.in = relu_r3_go_next.out & relu_r3_cur_idx.out == 32'd7 ? 1'd1;
      relu_finished_reg_r3.in = relu_finished_wire_r3.out ? 1'd1;
      relu_finished_reg_r3.write_en = relu_finished_wire_r3.out ? 1'd1;
    }
    static<1> group check_relu_cond_r3 {
      relu_cond_wire_r3.in = index_ge_depth_plus_8.out & !relu_finished_wire_r3.out ? 1'd1;
      relu_cond_reg_r3.in = relu_cond_wire_r3.out ? 1'd1;
      relu_cond_reg_r3.in = !relu_cond_wire_r3.out ? 1'd0;
      relu_cond_reg_r3.write_en = !relu_finished_reg_r3.out ? 1'd1;
    }
    static<1> group relu_r4_helper {
      relu_r4_cur_val.in = relu_r4_cur_idx.out == 32'd0 ? pe_4_0.out;
      relu_r4_cur_val.in = relu_r4_cur_idx.out == 32'd1 ? pe_4_1.out;
      relu_r4_cur_val.in = relu_r4_cur_idx.out == 32'd2 ? pe_4_2.out;
      relu_r4_cur_val.in = relu_r4_cur_idx.out == 32'd3 ? pe_4_3.out;
      relu_r4_cur_val.in = relu_r4_cur_idx.out == 32'd4 ? pe_4_4.out;
      relu_r4_cur_val.in = relu_r4_cur_idx.out == 32'd5 ? pe_4_5.out;
      relu_r4_cur_val.in = relu_r4_cur_idx.out == 32'd6 ? pe_4_6.out;
      relu_r4_cur_val.in = relu_r4_cur_idx.out == 32'd7 ? pe_4_7.out;
    }
    static<1> group execute_relu_r4 {
      relu_r4_val_gt.left = relu_r4_cur_val.out;
      relu_r4_val_gt.right = 32'd0;
      relu_r4_incr.left = relu_r4_cur_idx.out;
      relu_r4_incr.right = 32'd1;
      relu_r4_go_next.in = relu_r4_val_mult.done | relu_r4_val_gt.out ? 32'd1;
      relu_r4_cur_idx.in = relu_r4_go_next.out ? relu_r4_incr.out;
      relu_r4_cur_idx.write_en = relu_r4_go_next.out ? 1'd1;
      relu_r4_val_mult.left = 32'd655;
      relu_r4_val_mult.right = relu_r4_cur_val.out;
      relu_r4_val_mult.go = !relu_r4_go_next.out ? 1'd1;
      out_mem_4_write_en = relu_r4_go_next.out ? 1'd1;
      out_mem_4_addr0 = relu_r4_cur_idx.out;
      out_mem_4_write_data = relu_r4_val_gt.out ? relu_r4_cur_val.out;
      out_mem_4_write_data = !relu_r4_val_gt.out ? relu_r4_val_mult.out;
      relu_finished_wire_r4.in = relu_r4_go_next.out & relu_r4_cur_idx.out == 32'd7 ? 1'd1;
      relu_finished_reg_r4.in = relu_finished_wire_r4.out ? 1'd1;
      relu_finished_reg_r4.write_en = relu_finished_wire_r4.out ? 1'd1;
    }
    static<1> group check_relu_cond_r4 {
      relu_cond_wire_r4.in = index_ge_depth_plus_9.out & !relu_finished_wire_r4.out ? 1'd1;
      relu_cond_reg_r4.in = relu_cond_wire_r4.out ? 1'd1;
      relu_cond_reg_r4.in = !relu_cond_wire_r4.out ? 1'd0;
      relu_cond_reg_r4.write_en = !relu_finished_reg_r4.out ? 1'd1;
    }
    static<1> group relu_r5_helper {
      relu_r5_cur_val.in = relu_r5_cur_idx.out == 32'd0 ? pe_5_0.out;
      relu_r5_cur_val.in = relu_r5_cur_idx.out == 32'd1 ? pe_5_1.out;
      relu_r5_cur_val.in = relu_r5_cur_idx.out == 32'd2 ? pe_5_2.out;
      relu_r5_cur_val.in = relu_r5_cur_idx.out == 32'd3 ? pe_5_3.out;
      relu_r5_cur_val.in = relu_r5_cur_idx.out == 32'd4 ? pe_5_4.out;
      relu_r5_cur_val.in = relu_r5_cur_idx.out == 32'd5 ? pe_5_5.out;
      relu_r5_cur_val.in = relu_r5_cur_idx.out == 32'd6 ? pe_5_6.out;
      relu_r5_cur_val.in = relu_r5_cur_idx.out == 32'd7 ? pe_5_7.out;
    }
    static<1> group execute_relu_r5 {
      relu_r5_val_gt.left = relu_r5_cur_val.out;
      relu_r5_val_gt.right = 32'd0;
      relu_r5_incr.left = relu_r5_cur_idx.out;
      relu_r5_incr.right = 32'd1;
      relu_r5_go_next.in = relu_r5_val_mult.done | relu_r5_val_gt.out ? 32'd1;
      relu_r5_cur_idx.in = relu_r5_go_next.out ? relu_r5_incr.out;
      relu_r5_cur_idx.write_en = relu_r5_go_next.out ? 1'd1;
      relu_r5_val_mult.left = 32'd655;
      relu_r5_val_mult.right = relu_r5_cur_val.out;
      relu_r5_val_mult.go = !relu_r5_go_next.out ? 1'd1;
      out_mem_5_write_en = relu_r5_go_next.out ? 1'd1;
      out_mem_5_addr0 = relu_r5_cur_idx.out;
      out_mem_5_write_data = relu_r5_val_gt.out ? relu_r5_cur_val.out;
      out_mem_5_write_data = !relu_r5_val_gt.out ? relu_r5_val_mult.out;
      relu_finished_wire_r5.in = relu_r5_go_next.out & relu_r5_cur_idx.out == 32'd7 ? 1'd1;
      relu_finished_reg_r5.in = relu_finished_wire_r5.out ? 1'd1;
      relu_finished_reg_r5.write_en = relu_finished_wire_r5.out ? 1'd1;
    }
    static<1> group check_relu_cond_r5 {
      relu_cond_wire_r5.in = index_ge_depth_plus_10.out & !relu_finished_wire_r5.out ? 1'd1;
      relu_cond_reg_r5.in = relu_cond_wire_r5.out ? 1'd1;
      relu_cond_reg_r5.in = !relu_cond_wire_r5.out ? 1'd0;
      relu_cond_reg_r5.write_en = !relu_finished_reg_r5.out ? 1'd1;
    }
    static<1> group relu_r6_helper {
      relu_r6_cur_val.in = relu_r6_cur_idx.out == 32'd0 ? pe_6_0.out;
      relu_r6_cur_val.in = relu_r6_cur_idx.out == 32'd1 ? pe_6_1.out;
      relu_r6_cur_val.in = relu_r6_cur_idx.out == 32'd2 ? pe_6_2.out;
      relu_r6_cur_val.in = relu_r6_cur_idx.out == 32'd3 ? pe_6_3.out;
      relu_r6_cur_val.in = relu_r6_cur_idx.out == 32'd4 ? pe_6_4.out;
      relu_r6_cur_val.in = relu_r6_cur_idx.out == 32'd5 ? pe_6_5.out;
      relu_r6_cur_val.in = relu_r6_cur_idx.out == 32'd6 ? pe_6_6.out;
      relu_r6_cur_val.in = relu_r6_cur_idx.out == 32'd7 ? pe_6_7.out;
    }
    static<1> group execute_relu_r6 {
      relu_r6_val_gt.left = relu_r6_cur_val.out;
      relu_r6_val_gt.right = 32'd0;
      relu_r6_incr.left = relu_r6_cur_idx.out;
      relu_r6_incr.right = 32'd1;
      relu_r6_go_next.in = relu_r6_val_mult.done | relu_r6_val_gt.out ? 32'd1;
      relu_r6_cur_idx.in = relu_r6_go_next.out ? relu_r6_incr.out;
      relu_r6_cur_idx.write_en = relu_r6_go_next.out ? 1'd1;
      relu_r6_val_mult.left = 32'd655;
      relu_r6_val_mult.right = relu_r6_cur_val.out;
      relu_r6_val_mult.go = !relu_r6_go_next.out ? 1'd1;
      out_mem_6_write_en = relu_r6_go_next.out ? 1'd1;
      out_mem_6_addr0 = relu_r6_cur_idx.out;
      out_mem_6_write_data = relu_r6_val_gt.out ? relu_r6_cur_val.out;
      out_mem_6_write_data = !relu_r6_val_gt.out ? relu_r6_val_mult.out;
      relu_finished_wire_r6.in = relu_r6_go_next.out & relu_r6_cur_idx.out == 32'd7 ? 1'd1;
      relu_finished_reg_r6.in = relu_finished_wire_r6.out ? 1'd1;
      relu_finished_reg_r6.write_en = relu_finished_wire_r6.out ? 1'd1;
    }
    static<1> group check_relu_cond_r6 {
      relu_cond_wire_r6.in = index_ge_depth_plus_11.out & !relu_finished_wire_r6.out ? 1'd1;
      relu_cond_reg_r6.in = relu_cond_wire_r6.out ? 1'd1;
      relu_cond_reg_r6.in = !relu_cond_wire_r6.out ? 1'd0;
      relu_cond_reg_r6.write_en = !relu_finished_reg_r6.out ? 1'd1;
    }
    static<1> group relu_r7_helper {
      relu_r7_cur_val.in = relu_r7_cur_idx.out == 32'd0 ? pe_7_0.out;
      relu_r7_cur_val.in = relu_r7_cur_idx.out == 32'd1 ? pe_7_1.out;
      relu_r7_cur_val.in = relu_r7_cur_idx.out == 32'd2 ? pe_7_2.out;
      relu_r7_cur_val.in = relu_r7_cur_idx.out == 32'd3 ? pe_7_3.out;
      relu_r7_cur_val.in = relu_r7_cur_idx.out == 32'd4 ? pe_7_4.out;
      relu_r7_cur_val.in = relu_r7_cur_idx.out == 32'd5 ? pe_7_5.out;
      relu_r7_cur_val.in = relu_r7_cur_idx.out == 32'd6 ? pe_7_6.out;
      relu_r7_cur_val.in = relu_r7_cur_idx.out == 32'd7 ? pe_7_7.out;
    }
    static<1> group execute_relu_r7 {
      relu_r7_val_gt.left = relu_r7_cur_val.out;
      relu_r7_val_gt.right = 32'd0;
      relu_r7_incr.left = relu_r7_cur_idx.out;
      relu_r7_incr.right = 32'd1;
      relu_r7_go_next.in = relu_r7_val_mult.done | relu_r7_val_gt.out ? 32'd1;
      relu_r7_cur_idx.in = relu_r7_go_next.out ? relu_r7_incr.out;
      relu_r7_cur_idx.write_en = relu_r7_go_next.out ? 1'd1;
      relu_r7_val_mult.left = 32'd655;
      relu_r7_val_mult.right = relu_r7_cur_val.out;
      relu_r7_val_mult.go = !relu_r7_go_next.out ? 1'd1;
      out_mem_7_write_en = relu_r7_go_next.out ? 1'd1;
      out_mem_7_addr0 = relu_r7_cur_idx.out;
      out_mem_7_write_data = relu_r7_val_gt.out ? relu_r7_cur_val.out;
      out_mem_7_write_data = !relu_r7_val_gt.out ? relu_r7_val_mult.out;
      relu_finished_wire_r7.in = relu_r7_go_next.out & relu_r7_cur_idx.out == 32'd7 ? 1'd1;
      relu_finished_reg_r7.in = relu_finished_wire_r7.out ? 1'd1;
      relu_finished_reg_r7.write_en = relu_finished_wire_r7.out ? 1'd1;
    }
    static<1> group check_relu_cond_r7 {
      relu_cond_wire_r7.in = index_ge_depth_plus_12.out & !relu_finished_wire_r7.out ? 1'd1;
      relu_cond_reg_r7.in = relu_cond_wire_r7.out ? 1'd1;
      relu_cond_reg_r7.in = !relu_cond_wire_r7.out ? 1'd0;
      relu_cond_reg_r7.write_en = !relu_finished_reg_r7.out ? 1'd1;
    }
    static<1> group write_cond_reg {
      cond_wire.in = relu_finished_reg_r0.out & relu_finished_reg_r1.out & relu_finished_reg_r2.out & relu_finished_reg_r3.out & relu_finished_reg_r4.out & relu_finished_reg_r5.out & relu_finished_reg_r6.out & relu_finished_reg_r7.out ? 1'd1;
      cond_reg.in = !cond_wire.out ? 1'd1;
      cond_reg.in = cond_wire.out ? 1'd0;
      cond_reg.write_en = 1'd1;
    }
  }
  control {
    seq {
      static par {
        t0_idx_init;
        t1_idx_init;
        t2_idx_init;
        t3_idx_init;
        t4_idx_init;
        t5_idx_init;
        t6_idx_init;
        t7_idx_init;
        l0_idx_init;
        l1_idx_init;
        l2_idx_init;
        l3_idx_init;
        l4_idx_init;
        l5_idx_init;
        l6_idx_init;
        l7_idx_init;
        init_idx;
        init_min_depth;
        init_cond_reg;
        init_idx_between_2_min_depth_4_plus_2;
        init_idx_between_2_depth_plus_2;
        init_idx_between_11_depth_plus_11;
        init_idx_between_11_min_depth_4_plus_11;
        init_idx_between_7_depth_plus_7;
        init_idx_between_7_min_depth_4_plus_7;
        init_idx_between_16_depth_plus_16;
        init_idx_between_3_depth_plus_3;
        init_idx_between_12_depth_plus_12;
        init_idx_between_3_min_depth_4_plus_3;
        init_idx_between_12_min_depth_4_plus_12;
        init_idx_between_8_depth_plus_8;
        init_idx_between_8_min_depth_4_plus_8;
        init_idx_between_17_depth_plus_17;
        init_idx_between_6_min_depth_4_plus_6;
        init_idx_between_13_depth_plus_13;
        init_idx_between_13_min_depth_4_plus_13;
        init_idx_between_18_depth_plus_18;
        init_idx_between_15_depth_plus_15;
        init_idx_between_4_depth_plus_4;
        init_idx_between_4_min_depth_4_plus_4;
        init_idx_between_5_depth_plus_5;
        init_idx_between_14_depth_plus_14;
        init_idx_between_5_min_depth_4_plus_5;
        init_idx_between_14_min_depth_4_plus_14;
        init_idx_between_0_depth_plus_0;
        init_idx_between_9_depth_plus_9;
        init_idx_between_9_min_depth_4_plus_9;
        init_idx_between_1_depth_plus_1;
        init_idx_between_1_min_depth_4_plus_1;
        init_idx_between_10_depth_plus_10;
        init_idx_between_10_min_depth_4_plus_10;
        init_idx_between_19_depth_plus_19;
        init_idx_between_6_depth_plus_6;
        init_idx_between_15_min_depth_4_plus_15;
      }
      while cond_reg.out {
        static par {
          static par {
            static par {
              static if idx_between_0_depth_plus_0_reg.out {
                static par {
                  l0_move;
                  l0_idx_update;
                  t0_move;
                  t0_idx_update;
                }
              }
              static if idx_between_1_min_depth_4_plus_1_reg.out {
                static par {
                  static invoke pe_0_0(top=top_0_0.out, left=left_0_0.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_1_depth_plus_1_reg.out {
                static par {
                  pe_0_0_down_move;
                  pe_0_0_right_move;
                }
              }
              static if idx_between_5_depth_plus_5_reg.out {
                static par {
                  static invoke pe_0_0(top=top_0_0.out, left=left_0_0.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_1_depth_plus_1_reg.out {
                static par {
                  t1_move;
                  t1_idx_update;
                }
              }
              static if idx_between_2_min_depth_4_plus_2_reg.out {
                static par {
                  static invoke pe_0_1(top=top_0_1.out, left=left_0_1.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_2_depth_plus_2_reg.out {
                static par {
                  pe_0_1_down_move;
                  pe_0_1_right_move;
                }
              }
              static if idx_between_6_depth_plus_6_reg.out {
                static par {
                  static invoke pe_0_1(top=top_0_1.out, left=left_0_1.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_2_depth_plus_2_reg.out {
                static par {
                  t2_move;
                  t2_idx_update;
                }
              }
              static if idx_between_3_min_depth_4_plus_3_reg.out {
                static par {
                  static invoke pe_0_2(top=top_0_2.out, left=left_0_2.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_3_depth_plus_3_reg.out {
                static par {
                  pe_0_2_down_move;
                  pe_0_2_right_move;
                }
              }
              static if idx_between_7_depth_plus_7_reg.out {
                static par {
                  static invoke pe_0_2(top=top_0_2.out, left=left_0_2.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_3_depth_plus_3_reg.out {
                static par {
                  t3_move;
                  t3_idx_update;
                }
              }
              static if idx_between_4_min_depth_4_plus_4_reg.out {
                static par {
                  static invoke pe_0_3(top=top_0_3.out, left=left_0_3.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_4_depth_plus_4_reg.out {
                static par {
                  pe_0_3_down_move;
                  pe_0_3_right_move;
                }
              }
              static if idx_between_8_depth_plus_8_reg.out {
                static par {
                  static invoke pe_0_3(top=top_0_3.out, left=left_0_3.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_4_depth_plus_4_reg.out {
                static par {
                  t4_move;
                  t4_idx_update;
                }
              }
              static if idx_between_5_min_depth_4_plus_5_reg.out {
                static par {
                  static invoke pe_0_4(top=top_0_4.out, left=left_0_4.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_5_depth_plus_5_reg.out {
                static par {
                  pe_0_4_down_move;
                  pe_0_4_right_move;
                }
              }
              static if idx_between_9_depth_plus_9_reg.out {
                static par {
                  static invoke pe_0_4(top=top_0_4.out, left=left_0_4.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_5_depth_plus_5_reg.out {
                static par {
                  t5_move;
                  t5_idx_update;
                }
              }
              static if idx_between_6_min_depth_4_plus_6_reg.out {
                static par {
                  static invoke pe_0_5(top=top_0_5.out, left=left_0_5.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_6_depth_plus_6_reg.out {
                static par {
                  pe_0_5_down_move;
                  pe_0_5_right_move;
                }
              }
              static if idx_between_10_depth_plus_10_reg.out {
                static par {
                  static invoke pe_0_5(top=top_0_5.out, left=left_0_5.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_6_depth_plus_6_reg.out {
                static par {
                  t6_move;
                  t6_idx_update;
                }
              }
              static if idx_between_7_min_depth_4_plus_7_reg.out {
                static par {
                  static invoke pe_0_6(top=top_0_6.out, left=left_0_6.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_7_depth_plus_7_reg.out {
                static par {
                  pe_0_6_down_move;
                  pe_0_6_right_move;
                }
              }
              static if idx_between_11_depth_plus_11_reg.out {
                static par {
                  static invoke pe_0_6(top=top_0_6.out, left=left_0_6.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_7_depth_plus_7_reg.out {
                static par {
                  t7_move;
                  t7_idx_update;
                }
              }
              static if idx_between_8_min_depth_4_plus_8_reg.out {
                static par {
                  static invoke pe_0_7(top=top_0_7.out, left=left_0_7.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_8_depth_plus_8_reg.out {
                static par {
                  pe_0_7_down_move;
                }
              }
              static if idx_between_12_depth_plus_12_reg.out {
                static par {
                  static invoke pe_0_7(top=top_0_7.out, left=left_0_7.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_1_depth_plus_1_reg.out {
                static par {
                  l1_move;
                  l1_idx_update;
                }
              }
              static if idx_between_2_min_depth_4_plus_2_reg.out {
                static par {
                  static invoke pe_1_0(top=top_1_0.out, left=left_1_0.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_2_depth_plus_2_reg.out {
                static par {
                  pe_1_0_down_move;
                  pe_1_0_right_move;
                }
              }
              static if idx_between_6_depth_plus_6_reg.out {
                static par {
                  static invoke pe_1_0(top=top_1_0.out, left=left_1_0.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_3_min_depth_4_plus_3_reg.out {
                static par {
                  static invoke pe_1_1(top=top_1_1.out, left=left_1_1.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_3_depth_plus_3_reg.out {
                static par {
                  pe_1_1_down_move;
                  pe_1_1_right_move;
                }
              }
              static if idx_between_7_depth_plus_7_reg.out {
                static par {
                  static invoke pe_1_1(top=top_1_1.out, left=left_1_1.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_4_min_depth_4_plus_4_reg.out {
                static par {
                  static invoke pe_1_2(top=top_1_2.out, left=left_1_2.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_4_depth_plus_4_reg.out {
                static par {
                  pe_1_2_down_move;
                  pe_1_2_right_move;
                }
              }
              static if idx_between_8_depth_plus_8_reg.out {
                static par {
                  static invoke pe_1_2(top=top_1_2.out, left=left_1_2.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_5_min_depth_4_plus_5_reg.out {
                static par {
                  static invoke pe_1_3(top=top_1_3.out, left=left_1_3.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_5_depth_plus_5_reg.out {
                static par {
                  pe_1_3_down_move;
                  pe_1_3_right_move;
                }
              }
              static if idx_between_9_depth_plus_9_reg.out {
                static par {
                  static invoke pe_1_3(top=top_1_3.out, left=left_1_3.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_6_min_depth_4_plus_6_reg.out {
                static par {
                  static invoke pe_1_4(top=top_1_4.out, left=left_1_4.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_6_depth_plus_6_reg.out {
                static par {
                  pe_1_4_down_move;
                  pe_1_4_right_move;
                }
              }
              static if idx_between_10_depth_plus_10_reg.out {
                static par {
                  static invoke pe_1_4(top=top_1_4.out, left=left_1_4.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_7_min_depth_4_plus_7_reg.out {
                static par {
                  static invoke pe_1_5(top=top_1_5.out, left=left_1_5.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_7_depth_plus_7_reg.out {
                static par {
                  pe_1_5_down_move;
                  pe_1_5_right_move;
                }
              }
              static if idx_between_11_depth_plus_11_reg.out {
                static par {
                  static invoke pe_1_5(top=top_1_5.out, left=left_1_5.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_8_min_depth_4_plus_8_reg.out {
                static par {
                  static invoke pe_1_6(top=top_1_6.out, left=left_1_6.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_8_depth_plus_8_reg.out {
                static par {
                  pe_1_6_down_move;
                  pe_1_6_right_move;
                }
              }
              static if idx_between_12_depth_plus_12_reg.out {
                static par {
                  static invoke pe_1_6(top=top_1_6.out, left=left_1_6.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_9_min_depth_4_plus_9_reg.out {
                static par {
                  static invoke pe_1_7(top=top_1_7.out, left=left_1_7.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_9_depth_plus_9_reg.out {
                static par {
                  pe_1_7_down_move;
                }
              }
              static if idx_between_13_depth_plus_13_reg.out {
                static par {
                  static invoke pe_1_7(top=top_1_7.out, left=left_1_7.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_2_depth_plus_2_reg.out {
                static par {
                  l2_move;
                  l2_idx_update;
                }
              }
              static if idx_between_3_min_depth_4_plus_3_reg.out {
                static par {
                  static invoke pe_2_0(top=top_2_0.out, left=left_2_0.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_3_depth_plus_3_reg.out {
                static par {
                  pe_2_0_down_move;
                  pe_2_0_right_move;
                }
              }
              static if idx_between_7_depth_plus_7_reg.out {
                static par {
                  static invoke pe_2_0(top=top_2_0.out, left=left_2_0.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_4_min_depth_4_plus_4_reg.out {
                static par {
                  static invoke pe_2_1(top=top_2_1.out, left=left_2_1.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_4_depth_plus_4_reg.out {
                static par {
                  pe_2_1_down_move;
                  pe_2_1_right_move;
                }
              }
              static if idx_between_8_depth_plus_8_reg.out {
                static par {
                  static invoke pe_2_1(top=top_2_1.out, left=left_2_1.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_5_min_depth_4_plus_5_reg.out {
                static par {
                  static invoke pe_2_2(top=top_2_2.out, left=left_2_2.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_5_depth_plus_5_reg.out {
                static par {
                  pe_2_2_down_move;
                  pe_2_2_right_move;
                }
              }
              static if idx_between_9_depth_plus_9_reg.out {
                static par {
                  static invoke pe_2_2(top=top_2_2.out, left=left_2_2.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_6_min_depth_4_plus_6_reg.out {
                static par {
                  static invoke pe_2_3(top=top_2_3.out, left=left_2_3.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_6_depth_plus_6_reg.out {
                static par {
                  pe_2_3_down_move;
                  pe_2_3_right_move;
                }
              }
              static if idx_between_10_depth_plus_10_reg.out {
                static par {
                  static invoke pe_2_3(top=top_2_3.out, left=left_2_3.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_7_min_depth_4_plus_7_reg.out {
                static par {
                  static invoke pe_2_4(top=top_2_4.out, left=left_2_4.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_7_depth_plus_7_reg.out {
                static par {
                  pe_2_4_down_move;
                  pe_2_4_right_move;
                }
              }
              static if idx_between_11_depth_plus_11_reg.out {
                static par {
                  static invoke pe_2_4(top=top_2_4.out, left=left_2_4.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_8_min_depth_4_plus_8_reg.out {
                static par {
                  static invoke pe_2_5(top=top_2_5.out, left=left_2_5.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_8_depth_plus_8_reg.out {
                static par {
                  pe_2_5_down_move;
                  pe_2_5_right_move;
                }
              }
              static if idx_between_12_depth_plus_12_reg.out {
                static par {
                  static invoke pe_2_5(top=top_2_5.out, left=left_2_5.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_9_min_depth_4_plus_9_reg.out {
                static par {
                  static invoke pe_2_6(top=top_2_6.out, left=left_2_6.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_9_depth_plus_9_reg.out {
                static par {
                  pe_2_6_down_move;
                  pe_2_6_right_move;
                }
              }
              static if idx_between_13_depth_plus_13_reg.out {
                static par {
                  static invoke pe_2_6(top=top_2_6.out, left=left_2_6.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_10_min_depth_4_plus_10_reg.out {
                static par {
                  static invoke pe_2_7(top=top_2_7.out, left=left_2_7.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_10_depth_plus_10_reg.out {
                static par {
                  pe_2_7_down_move;
                }
              }
              static if idx_between_14_depth_plus_14_reg.out {
                static par {
                  static invoke pe_2_7(top=top_2_7.out, left=left_2_7.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_3_depth_plus_3_reg.out {
                static par {
                  l3_move;
                  l3_idx_update;
                }
              }
              static if idx_between_4_min_depth_4_plus_4_reg.out {
                static par {
                  static invoke pe_3_0(top=top_3_0.out, left=left_3_0.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_4_depth_plus_4_reg.out {
                static par {
                  pe_3_0_down_move;
                  pe_3_0_right_move;
                }
              }
              static if idx_between_8_depth_plus_8_reg.out {
                static par {
                  static invoke pe_3_0(top=top_3_0.out, left=left_3_0.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_5_min_depth_4_plus_5_reg.out {
                static par {
                  static invoke pe_3_1(top=top_3_1.out, left=left_3_1.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_5_depth_plus_5_reg.out {
                static par {
                  pe_3_1_down_move;
                  pe_3_1_right_move;
                }
              }
              static if idx_between_9_depth_plus_9_reg.out {
                static par {
                  static invoke pe_3_1(top=top_3_1.out, left=left_3_1.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_6_min_depth_4_plus_6_reg.out {
                static par {
                  static invoke pe_3_2(top=top_3_2.out, left=left_3_2.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_6_depth_plus_6_reg.out {
                static par {
                  pe_3_2_down_move;
                  pe_3_2_right_move;
                }
              }
              static if idx_between_10_depth_plus_10_reg.out {
                static par {
                  static invoke pe_3_2(top=top_3_2.out, left=left_3_2.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_7_min_depth_4_plus_7_reg.out {
                static par {
                  static invoke pe_3_3(top=top_3_3.out, left=left_3_3.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_7_depth_plus_7_reg.out {
                static par {
                  pe_3_3_down_move;
                  pe_3_3_right_move;
                }
              }
              static if idx_between_11_depth_plus_11_reg.out {
                static par {
                  static invoke pe_3_3(top=top_3_3.out, left=left_3_3.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_8_min_depth_4_plus_8_reg.out {
                static par {
                  static invoke pe_3_4(top=top_3_4.out, left=left_3_4.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_8_depth_plus_8_reg.out {
                static par {
                  pe_3_4_down_move;
                  pe_3_4_right_move;
                }
              }
              static if idx_between_12_depth_plus_12_reg.out {
                static par {
                  static invoke pe_3_4(top=top_3_4.out, left=left_3_4.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_9_min_depth_4_plus_9_reg.out {
                static par {
                  static invoke pe_3_5(top=top_3_5.out, left=left_3_5.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_9_depth_plus_9_reg.out {
                static par {
                  pe_3_5_down_move;
                  pe_3_5_right_move;
                }
              }
              static if idx_between_13_depth_plus_13_reg.out {
                static par {
                  static invoke pe_3_5(top=top_3_5.out, left=left_3_5.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_10_min_depth_4_plus_10_reg.out {
                static par {
                  static invoke pe_3_6(top=top_3_6.out, left=left_3_6.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_10_depth_plus_10_reg.out {
                static par {
                  pe_3_6_down_move;
                  pe_3_6_right_move;
                }
              }
              static if idx_between_14_depth_plus_14_reg.out {
                static par {
                  static invoke pe_3_6(top=top_3_6.out, left=left_3_6.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_11_min_depth_4_plus_11_reg.out {
                static par {
                  static invoke pe_3_7(top=top_3_7.out, left=left_3_7.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_11_depth_plus_11_reg.out {
                static par {
                  pe_3_7_down_move;
                }
              }
              static if idx_between_15_depth_plus_15_reg.out {
                static par {
                  static invoke pe_3_7(top=top_3_7.out, left=left_3_7.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_4_depth_plus_4_reg.out {
                static par {
                  l4_move;
                  l4_idx_update;
                }
              }
              static if idx_between_5_min_depth_4_plus_5_reg.out {
                static par {
                  static invoke pe_4_0(top=top_4_0.out, left=left_4_0.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_5_depth_plus_5_reg.out {
                static par {
                  pe_4_0_down_move;
                  pe_4_0_right_move;
                }
              }
              static if idx_between_9_depth_plus_9_reg.out {
                static par {
                  static invoke pe_4_0(top=top_4_0.out, left=left_4_0.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_6_min_depth_4_plus_6_reg.out {
                static par {
                  static invoke pe_4_1(top=top_4_1.out, left=left_4_1.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_6_depth_plus_6_reg.out {
                static par {
                  pe_4_1_down_move;
                  pe_4_1_right_move;
                }
              }
              static if idx_between_10_depth_plus_10_reg.out {
                static par {
                  static invoke pe_4_1(top=top_4_1.out, left=left_4_1.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_7_min_depth_4_plus_7_reg.out {
                static par {
                  static invoke pe_4_2(top=top_4_2.out, left=left_4_2.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_7_depth_plus_7_reg.out {
                static par {
                  pe_4_2_down_move;
                  pe_4_2_right_move;
                }
              }
              static if idx_between_11_depth_plus_11_reg.out {
                static par {
                  static invoke pe_4_2(top=top_4_2.out, left=left_4_2.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_8_min_depth_4_plus_8_reg.out {
                static par {
                  static invoke pe_4_3(top=top_4_3.out, left=left_4_3.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_8_depth_plus_8_reg.out {
                static par {
                  pe_4_3_down_move;
                  pe_4_3_right_move;
                }
              }
              static if idx_between_12_depth_plus_12_reg.out {
                static par {
                  static invoke pe_4_3(top=top_4_3.out, left=left_4_3.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_9_min_depth_4_plus_9_reg.out {
                static par {
                  static invoke pe_4_4(top=top_4_4.out, left=left_4_4.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_9_depth_plus_9_reg.out {
                static par {
                  pe_4_4_down_move;
                  pe_4_4_right_move;
                }
              }
              static if idx_between_13_depth_plus_13_reg.out {
                static par {
                  static invoke pe_4_4(top=top_4_4.out, left=left_4_4.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_10_min_depth_4_plus_10_reg.out {
                static par {
                  static invoke pe_4_5(top=top_4_5.out, left=left_4_5.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_10_depth_plus_10_reg.out {
                static par {
                  pe_4_5_down_move;
                  pe_4_5_right_move;
                }
              }
              static if idx_between_14_depth_plus_14_reg.out {
                static par {
                  static invoke pe_4_5(top=top_4_5.out, left=left_4_5.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_11_min_depth_4_plus_11_reg.out {
                static par {
                  static invoke pe_4_6(top=top_4_6.out, left=left_4_6.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_11_depth_plus_11_reg.out {
                static par {
                  pe_4_6_down_move;
                  pe_4_6_right_move;
                }
              }
              static if idx_between_15_depth_plus_15_reg.out {
                static par {
                  static invoke pe_4_6(top=top_4_6.out, left=left_4_6.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_12_min_depth_4_plus_12_reg.out {
                static par {
                  static invoke pe_4_7(top=top_4_7.out, left=left_4_7.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_12_depth_plus_12_reg.out {
                static par {
                  pe_4_7_down_move;
                }
              }
              static if idx_between_16_depth_plus_16_reg.out {
                static par {
                  static invoke pe_4_7(top=top_4_7.out, left=left_4_7.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_5_depth_plus_5_reg.out {
                static par {
                  l5_move;
                  l5_idx_update;
                }
              }
              static if idx_between_6_min_depth_4_plus_6_reg.out {
                static par {
                  static invoke pe_5_0(top=top_5_0.out, left=left_5_0.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_6_depth_plus_6_reg.out {
                static par {
                  pe_5_0_down_move;
                  pe_5_0_right_move;
                }
              }
              static if idx_between_10_depth_plus_10_reg.out {
                static par {
                  static invoke pe_5_0(top=top_5_0.out, left=left_5_0.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_7_min_depth_4_plus_7_reg.out {
                static par {
                  static invoke pe_5_1(top=top_5_1.out, left=left_5_1.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_7_depth_plus_7_reg.out {
                static par {
                  pe_5_1_down_move;
                  pe_5_1_right_move;
                }
              }
              static if idx_between_11_depth_plus_11_reg.out {
                static par {
                  static invoke pe_5_1(top=top_5_1.out, left=left_5_1.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_8_min_depth_4_plus_8_reg.out {
                static par {
                  static invoke pe_5_2(top=top_5_2.out, left=left_5_2.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_8_depth_plus_8_reg.out {
                static par {
                  pe_5_2_down_move;
                  pe_5_2_right_move;
                }
              }
              static if idx_between_12_depth_plus_12_reg.out {
                static par {
                  static invoke pe_5_2(top=top_5_2.out, left=left_5_2.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_9_min_depth_4_plus_9_reg.out {
                static par {
                  static invoke pe_5_3(top=top_5_3.out, left=left_5_3.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_9_depth_plus_9_reg.out {
                static par {
                  pe_5_3_down_move;
                  pe_5_3_right_move;
                }
              }
              static if idx_between_13_depth_plus_13_reg.out {
                static par {
                  static invoke pe_5_3(top=top_5_3.out, left=left_5_3.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_10_min_depth_4_plus_10_reg.out {
                static par {
                  static invoke pe_5_4(top=top_5_4.out, left=left_5_4.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_10_depth_plus_10_reg.out {
                static par {
                  pe_5_4_down_move;
                  pe_5_4_right_move;
                }
              }
              static if idx_between_14_depth_plus_14_reg.out {
                static par {
                  static invoke pe_5_4(top=top_5_4.out, left=left_5_4.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_11_min_depth_4_plus_11_reg.out {
                static par {
                  static invoke pe_5_5(top=top_5_5.out, left=left_5_5.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_11_depth_plus_11_reg.out {
                static par {
                  pe_5_5_down_move;
                  pe_5_5_right_move;
                }
              }
              static if idx_between_15_depth_plus_15_reg.out {
                static par {
                  static invoke pe_5_5(top=top_5_5.out, left=left_5_5.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_12_min_depth_4_plus_12_reg.out {
                static par {
                  static invoke pe_5_6(top=top_5_6.out, left=left_5_6.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_12_depth_plus_12_reg.out {
                static par {
                  pe_5_6_down_move;
                  pe_5_6_right_move;
                }
              }
              static if idx_between_16_depth_plus_16_reg.out {
                static par {
                  static invoke pe_5_6(top=top_5_6.out, left=left_5_6.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_13_min_depth_4_plus_13_reg.out {
                static par {
                  static invoke pe_5_7(top=top_5_7.out, left=left_5_7.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_13_depth_plus_13_reg.out {
                static par {
                  pe_5_7_down_move;
                }
              }
              static if idx_between_17_depth_plus_17_reg.out {
                static par {
                  static invoke pe_5_7(top=top_5_7.out, left=left_5_7.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_6_depth_plus_6_reg.out {
                static par {
                  l6_move;
                  l6_idx_update;
                }
              }
              static if idx_between_7_min_depth_4_plus_7_reg.out {
                static par {
                  static invoke pe_6_0(top=top_6_0.out, left=left_6_0.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_7_depth_plus_7_reg.out {
                static par {
                  pe_6_0_down_move;
                  pe_6_0_right_move;
                }
              }
              static if idx_between_11_depth_plus_11_reg.out {
                static par {
                  static invoke pe_6_0(top=top_6_0.out, left=left_6_0.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_8_min_depth_4_plus_8_reg.out {
                static par {
                  static invoke pe_6_1(top=top_6_1.out, left=left_6_1.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_8_depth_plus_8_reg.out {
                static par {
                  pe_6_1_down_move;
                  pe_6_1_right_move;
                }
              }
              static if idx_between_12_depth_plus_12_reg.out {
                static par {
                  static invoke pe_6_1(top=top_6_1.out, left=left_6_1.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_9_min_depth_4_plus_9_reg.out {
                static par {
                  static invoke pe_6_2(top=top_6_2.out, left=left_6_2.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_9_depth_plus_9_reg.out {
                static par {
                  pe_6_2_down_move;
                  pe_6_2_right_move;
                }
              }
              static if idx_between_13_depth_plus_13_reg.out {
                static par {
                  static invoke pe_6_2(top=top_6_2.out, left=left_6_2.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_10_min_depth_4_plus_10_reg.out {
                static par {
                  static invoke pe_6_3(top=top_6_3.out, left=left_6_3.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_10_depth_plus_10_reg.out {
                static par {
                  pe_6_3_down_move;
                  pe_6_3_right_move;
                }
              }
              static if idx_between_14_depth_plus_14_reg.out {
                static par {
                  static invoke pe_6_3(top=top_6_3.out, left=left_6_3.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_11_min_depth_4_plus_11_reg.out {
                static par {
                  static invoke pe_6_4(top=top_6_4.out, left=left_6_4.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_11_depth_plus_11_reg.out {
                static par {
                  pe_6_4_down_move;
                  pe_6_4_right_move;
                }
              }
              static if idx_between_15_depth_plus_15_reg.out {
                static par {
                  static invoke pe_6_4(top=top_6_4.out, left=left_6_4.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_12_min_depth_4_plus_12_reg.out {
                static par {
                  static invoke pe_6_5(top=top_6_5.out, left=left_6_5.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_12_depth_plus_12_reg.out {
                static par {
                  pe_6_5_down_move;
                  pe_6_5_right_move;
                }
              }
              static if idx_between_16_depth_plus_16_reg.out {
                static par {
                  static invoke pe_6_5(top=top_6_5.out, left=left_6_5.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_13_min_depth_4_plus_13_reg.out {
                static par {
                  static invoke pe_6_6(top=top_6_6.out, left=left_6_6.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_13_depth_plus_13_reg.out {
                static par {
                  pe_6_6_down_move;
                  pe_6_6_right_move;
                }
              }
              static if idx_between_17_depth_plus_17_reg.out {
                static par {
                  static invoke pe_6_6(top=top_6_6.out, left=left_6_6.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_14_min_depth_4_plus_14_reg.out {
                static par {
                  static invoke pe_6_7(top=top_6_7.out, left=left_6_7.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_14_depth_plus_14_reg.out {
                static par {
                  pe_6_7_down_move;
                }
              }
              static if idx_between_18_depth_plus_18_reg.out {
                static par {
                  static invoke pe_6_7(top=top_6_7.out, left=left_6_7.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_7_depth_plus_7_reg.out {
                static par {
                  l7_move;
                  l7_idx_update;
                }
              }
              static if idx_between_8_min_depth_4_plus_8_reg.out {
                static par {
                  static invoke pe_7_0(top=top_7_0.out, left=left_7_0.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_8_depth_plus_8_reg.out {
                static par {
                  pe_7_0_right_move;
                }
              }
              static if idx_between_12_depth_plus_12_reg.out {
                static par {
                  static invoke pe_7_0(top=top_7_0.out, left=left_7_0.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_9_min_depth_4_plus_9_reg.out {
                static par {
                  static invoke pe_7_1(top=top_7_1.out, left=left_7_1.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_9_depth_plus_9_reg.out {
                static par {
                  pe_7_1_right_move;
                }
              }
              static if idx_between_13_depth_plus_13_reg.out {
                static par {
                  static invoke pe_7_1(top=top_7_1.out, left=left_7_1.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_10_min_depth_4_plus_10_reg.out {
                static par {
                  static invoke pe_7_2(top=top_7_2.out, left=left_7_2.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_10_depth_plus_10_reg.out {
                static par {
                  pe_7_2_right_move;
                }
              }
              static if idx_between_14_depth_plus_14_reg.out {
                static par {
                  static invoke pe_7_2(top=top_7_2.out, left=left_7_2.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_11_min_depth_4_plus_11_reg.out {
                static par {
                  static invoke pe_7_3(top=top_7_3.out, left=left_7_3.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_11_depth_plus_11_reg.out {
                static par {
                  pe_7_3_right_move;
                }
              }
              static if idx_between_15_depth_plus_15_reg.out {
                static par {
                  static invoke pe_7_3(top=top_7_3.out, left=left_7_3.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_12_min_depth_4_plus_12_reg.out {
                static par {
                  static invoke pe_7_4(top=top_7_4.out, left=left_7_4.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_12_depth_plus_12_reg.out {
                static par {
                  pe_7_4_right_move;
                }
              }
              static if idx_between_16_depth_plus_16_reg.out {
                static par {
                  static invoke pe_7_4(top=top_7_4.out, left=left_7_4.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_13_min_depth_4_plus_13_reg.out {
                static par {
                  static invoke pe_7_5(top=top_7_5.out, left=left_7_5.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_13_depth_plus_13_reg.out {
                static par {
                  pe_7_5_right_move;
                }
              }
              static if idx_between_17_depth_plus_17_reg.out {
                static par {
                  static invoke pe_7_5(top=top_7_5.out, left=left_7_5.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_14_min_depth_4_plus_14_reg.out {
                static par {
                  static invoke pe_7_6(top=top_7_6.out, left=left_7_6.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_14_depth_plus_14_reg.out {
                static par {
                  pe_7_6_right_move;
                }
              }
              static if idx_between_18_depth_plus_18_reg.out {
                static par {
                  static invoke pe_7_6(top=top_7_6.out, left=left_7_6.out, mul_ready=1'd1)();
                }
              }
            }
            static par {
              static if idx_between_15_min_depth_4_plus_15_reg.out {
                static par {
                  static invoke pe_7_7(top=top_7_7.out, left=left_7_7.out, mul_ready=1'd0)();
                }
              }
              static if idx_between_19_depth_plus_19_reg.out {
                static par {
                  static invoke pe_7_7(top=top_7_7.out, left=left_7_7.out, mul_ready=1'd1)();
                }
              }
            }
          }
          static par {
            incr_idx;
            idx_between_depth_plus_8_None_group;
            idx_between_depth_plus_10_None_group;
            idx_between_2_min_depth_4_plus_2_group;
            idx_between_2_depth_plus_2_group;
            idx_between_11_depth_plus_11_group;
            idx_between_11_min_depth_4_plus_11_group;
            idx_between_7_depth_plus_7_group;
            idx_between_7_min_depth_4_plus_7_group;
            idx_between_16_depth_plus_16_group;
            idx_between_depth_plus_12_None_group;
            idx_between_3_depth_plus_3_group;
            idx_between_12_depth_plus_12_group;
            idx_between_3_min_depth_4_plus_3_group;
            idx_between_12_min_depth_4_plus_12_group;
            idx_between_depth_plus_5_None_group;
            idx_between_8_depth_plus_8_group;
            idx_between_8_min_depth_4_plus_8_group;
            idx_between_17_depth_plus_17_group;
            idx_between_depth_plus_7_None_group;
            idx_between_6_min_depth_4_plus_6_group;
            idx_between_13_depth_plus_13_group;
            idx_between_13_min_depth_4_plus_13_group;
            idx_between_18_depth_plus_18_group;
            idx_between_15_depth_plus_15_group;
            idx_between_4_depth_plus_4_group;
            idx_between_4_min_depth_4_plus_4_group;
            idx_between_depth_plus_9_None_group;
            idx_between_5_depth_plus_5_group;
            idx_between_14_depth_plus_14_group;
            idx_between_5_min_depth_4_plus_5_group;
            idx_between_14_min_depth_4_plus_14_group;
            idx_between_0_depth_plus_0_group;
            idx_between_9_depth_plus_9_group;
            idx_between_9_min_depth_4_plus_9_group;
            idx_between_1_depth_plus_1_group;
            idx_between_1_min_depth_4_plus_1_group;
            idx_between_depth_plus_11_None_group;
            idx_between_10_depth_plus_10_group;
            idx_between_10_min_depth_4_plus_10_group;
            idx_between_19_depth_plus_19_group;
            idx_between_depth_plus_6_None_group;
            idx_between_6_depth_plus_6_group;
            idx_between_15_min_depth_4_plus_15_group;
            depth_plus_8_group;
            depth_plus_10_group;
            min_depth_4_plus_2_group;
            depth_plus_2_group;
            depth_plus_11_group;
            min_depth_4_plus_11_group;
            depth_plus_7_group;
            min_depth_4_plus_7_group;
            depth_plus_16_group;
            depth_plus_12_group;
            depth_plus_3_group;
            min_depth_4_plus_3_group;
            min_depth_4_plus_12_group;
            depth_plus_5_group;
            min_depth_4_plus_8_group;
            depth_plus_17_group;
            min_depth_4_plus_6_group;
            depth_plus_13_group;
            min_depth_4_plus_13_group;
            depth_plus_18_group;
            depth_plus_15_group;
            depth_plus_4_group;
            min_depth_4_plus_4_group;
            depth_plus_9_group;
            depth_plus_14_group;
            min_depth_4_plus_5_group;
            min_depth_4_plus_14_group;
            depth_plus_0_group;
            min_depth_4_plus_9_group;
            depth_plus_1_group;
            min_depth_4_plus_1_group;
            min_depth_4_plus_10_group;
            depth_plus_19_group;
            depth_plus_6_group;
            min_depth_4_plus_15_group;
          }
          static par {
            write_cond_reg;
            static if relu_cond_reg_r0.out {
              static par {
                execute_relu_r0;
                relu_r0_helper;
              }
            }
            check_relu_cond_r0;
            static if relu_cond_reg_r1.out {
              static par {
                execute_relu_r1;
                relu_r1_helper;
              }
            }
            check_relu_cond_r1;
            static if relu_cond_reg_r2.out {
              static par {
                execute_relu_r2;
                relu_r2_helper;
              }
            }
            check_relu_cond_r2;
            static if relu_cond_reg_r3.out {
              static par {
                execute_relu_r3;
                relu_r3_helper;
              }
            }
            check_relu_cond_r3;
            static if relu_cond_reg_r4.out {
              static par {
                execute_relu_r4;
                relu_r4_helper;
              }
            }
            check_relu_cond_r4;
            static if relu_cond_reg_r5.out {
              static par {
                execute_relu_r5;
                relu_r5_helper;
              }
            }
            check_relu_cond_r5;
            static if relu_cond_reg_r6.out {
              static par {
                execute_relu_r6;
                relu_r6_helper;
              }
            }
            check_relu_cond_r6;
            static if relu_cond_reg_r7.out {
              static par {
                execute_relu_r7;
                relu_r7_helper;
              }
            }
            check_relu_cond_r7;
          }
        }
      }
    }
  }
}
component main() -> () {
  cells {
    systolic_array = systolic_array_comp();
    @external t0 = std_mem_d1(32, 8, 4);
    @external t1 = std_mem_d1(32, 8, 4);
    @external t2 = std_mem_d1(32, 8, 4);
    @external t3 = std_mem_d1(32, 8, 4);
    @external t4 = std_mem_d1(32, 8, 4);
    @external t5 = std_mem_d1(32, 8, 4);
    @external t6 = std_mem_d1(32, 8, 4);
    @external t7 = std_mem_d1(32, 8, 4);
    @external l0 = std_mem_d1(32, 8, 4);
    @external l1 = std_mem_d1(32, 8, 4);
    @external l2 = std_mem_d1(32, 8, 4);
    @external l3 = std_mem_d1(32, 8, 4);
    @external l4 = std_mem_d1(32, 8, 4);
    @external l5 = std_mem_d1(32, 8, 4);
    @external l6 = std_mem_d1(32, 8, 4);
    @external l7 = std_mem_d1(32, 8, 4);
    @external out_mem_0 = std_mem_d1(32, 8, 32);
    @external out_mem_1 = std_mem_d1(32, 8, 32);
    @external out_mem_2 = std_mem_d1(32, 8, 32);
    @external out_mem_3 = std_mem_d1(32, 8, 32);
    @external out_mem_4 = std_mem_d1(32, 8, 32);
    @external out_mem_5 = std_mem_d1(32, 8, 32);
    @external out_mem_6 = std_mem_d1(32, 8, 32);
    @external out_mem_7 = std_mem_d1(32, 8, 32);
  }
  wires {

  }
  control {
    invoke systolic_array(depth=32'd8, t0_read_data=t0.read_data, t1_read_data=t1.read_data, t2_read_data=t2.read_data, t3_read_data=t3.read_data, t4_read_data=t4.read_data, t5_read_data=t5.read_data, t6_read_data=t6.read_data, t7_read_data=t7.read_data, l0_read_data=l0.read_data, l1_read_data=l1.read_data, l2_read_data=l2.read_data, l3_read_data=l3.read_data, l4_read_data=l4.read_data, l5_read_data=l5.read_data, l6_read_data=l6.read_data, l7_read_data=l7.read_data)(t0_addr0=t0.addr0, t1_addr0=t1.addr0, t2_addr0=t2.addr0, t3_addr0=t3.addr0, t4_addr0=t4.addr0, t5_addr0=t5.addr0, t6_addr0=t6.addr0, t7_addr0=t7.addr0, l0_addr0=l0.addr0, l1_addr0=l1.addr0, l2_addr0=l2.addr0, l3_addr0=l3.addr0, l4_addr0=l4.addr0, l5_addr0=l5.addr0, l6_addr0=l6.addr0, l7_addr0=l7.addr0, out_mem_0_addr0=out_mem_0.addr0, out_mem_0_write_data=out_mem_0.write_data, out_mem_0_write_en=out_mem_0.write_en, out_mem_1_addr0=out_mem_1.addr0, out_mem_1_write_data=out_mem_1.write_data, out_mem_1_write_en=out_mem_1.write_en, out_mem_2_addr0=out_mem_2.addr0, out_mem_2_write_data=out_mem_2.write_data, out_mem_2_write_en=out_mem_2.write_en, out_mem_3_addr0=out_mem_3.addr0, out_mem_3_write_data=out_mem_3.write_data, out_mem_3_write_en=out_mem_3.write_en, out_mem_4_addr0=out_mem_4.addr0, out_mem_4_write_data=out_mem_4.write_data, out_mem_4_write_en=out_mem_4.write_en, out_mem_5_addr0=out_mem_5.addr0, out_mem_5_write_data=out_mem_5.write_data, out_mem_5_write_en=out_mem_5.write_en, out_mem_6_addr0=out_mem_6.addr0, out_mem_6_write_data=out_mem_6.write_data, out_mem_6_write_en=out_mem_6.write_en, out_mem_7_addr0=out_mem_7.addr0, out_mem_7_write_data=out_mem_7.write_data, out_mem_7_write_en=out_mem_7.write_en);
  }
}
metadata #{
0: pe_0_0 filling: [1,min_depth_4_plus_1) accumulating: [5 depth_plus_5)
1: pe_0_1 filling: [2,min_depth_4_plus_2) accumulating: [6 depth_plus_6)
2: pe_0_2 filling: [3,min_depth_4_plus_3) accumulating: [7 depth_plus_7)
3: pe_0_3 filling: [4,min_depth_4_plus_4) accumulating: [8 depth_plus_8)
4: pe_0_4 filling: [5,min_depth_4_plus_5) accumulating: [9 depth_plus_9)
5: pe_0_5 filling: [6,min_depth_4_plus_6) accumulating: [10 depth_plus_10)
6: pe_0_6 filling: [7,min_depth_4_plus_7) accumulating: [11 depth_plus_11)
7: pe_0_7 filling: [8,min_depth_4_plus_8) accumulating: [12 depth_plus_12)
8: pe_1_0 filling: [2,min_depth_4_plus_2) accumulating: [6 depth_plus_6)
9: pe_1_1 filling: [3,min_depth_4_plus_3) accumulating: [7 depth_plus_7)
10: pe_1_2 filling: [4,min_depth_4_plus_4) accumulating: [8 depth_plus_8)
11: pe_1_3 filling: [5,min_depth_4_plus_5) accumulating: [9 depth_plus_9)
12: pe_1_4 filling: [6,min_depth_4_plus_6) accumulating: [10 depth_plus_10)
13: pe_1_5 filling: [7,min_depth_4_plus_7) accumulating: [11 depth_plus_11)
14: pe_1_6 filling: [8,min_depth_4_plus_8) accumulating: [12 depth_plus_12)
15: pe_1_7 filling: [9,min_depth_4_plus_9) accumulating: [13 depth_plus_13)
16: pe_2_0 filling: [3,min_depth_4_plus_3) accumulating: [7 depth_plus_7)
17: pe_2_1 filling: [4,min_depth_4_plus_4) accumulating: [8 depth_plus_8)
18: pe_2_2 filling: [5,min_depth_4_plus_5) accumulating: [9 depth_plus_9)
19: pe_2_3 filling: [6,min_depth_4_plus_6) accumulating: [10 depth_plus_10)
20: pe_2_4 filling: [7,min_depth_4_plus_7) accumulating: [11 depth_plus_11)
21: pe_2_5 filling: [8,min_depth_4_plus_8) accumulating: [12 depth_plus_12)
22: pe_2_6 filling: [9,min_depth_4_plus_9) accumulating: [13 depth_plus_13)
23: pe_2_7 filling: [10,min_depth_4_plus_10) accumulating: [14 depth_plus_14)
24: pe_3_0 filling: [4,min_depth_4_plus_4) accumulating: [8 depth_plus_8)
25: pe_3_1 filling: [5,min_depth_4_plus_5) accumulating: [9 depth_plus_9)
26: pe_3_2 filling: [6,min_depth_4_plus_6) accumulating: [10 depth_plus_10)
27: pe_3_3 filling: [7,min_depth_4_plus_7) accumulating: [11 depth_plus_11)
28: pe_3_4 filling: [8,min_depth_4_plus_8) accumulating: [12 depth_plus_12)
29: pe_3_5 filling: [9,min_depth_4_plus_9) accumulating: [13 depth_plus_13)
30: pe_3_6 filling: [10,min_depth_4_plus_10) accumulating: [14 depth_plus_14)
31: pe_3_7 filling: [11,min_depth_4_plus_11) accumulating: [15 depth_plus_15)
32: pe_4_0 filling: [5,min_depth_4_plus_5) accumulating: [9 depth_plus_9)
33: pe_4_1 filling: [6,min_depth_4_plus_6) accumulating: [10 depth_plus_10)
34: pe_4_2 filling: [7,min_depth_4_plus_7) accumulating: [11 depth_plus_11)
35: pe_4_3 filling: [8,min_depth_4_plus_8) accumulating: [12 depth_plus_12)
36: pe_4_4 filling: [9,min_depth_4_plus_9) accumulating: [13 depth_plus_13)
37: pe_4_5 filling: [10,min_depth_4_plus_10) accumulating: [14 depth_plus_14)
38: pe_4_6 filling: [11,min_depth_4_plus_11) accumulating: [15 depth_plus_15)
39: pe_4_7 filling: [12,min_depth_4_plus_12) accumulating: [16 depth_plus_16)
40: pe_5_0 filling: [6,min_depth_4_plus_6) accumulating: [10 depth_plus_10)
41: pe_5_1 filling: [7,min_depth_4_plus_7) accumulating: [11 depth_plus_11)
42: pe_5_2 filling: [8,min_depth_4_plus_8) accumulating: [12 depth_plus_12)
43: pe_5_3 filling: [9,min_depth_4_plus_9) accumulating: [13 depth_plus_13)
44: pe_5_4 filling: [10,min_depth_4_plus_10) accumulating: [14 depth_plus_14)
45: pe_5_5 filling: [11,min_depth_4_plus_11) accumulating: [15 depth_plus_15)
46: pe_5_6 filling: [12,min_depth_4_plus_12) accumulating: [16 depth_plus_16)
47: pe_5_7 filling: [13,min_depth_4_plus_13) accumulating: [17 depth_plus_17)
48: pe_6_0 filling: [7,min_depth_4_plus_7) accumulating: [11 depth_plus_11)
49: pe_6_1 filling: [8,min_depth_4_plus_8) accumulating: [12 depth_plus_12)
50: pe_6_2 filling: [9,min_depth_4_plus_9) accumulating: [13 depth_plus_13)
51: pe_6_3 filling: [10,min_depth_4_plus_10) accumulating: [14 depth_plus_14)
52: pe_6_4 filling: [11,min_depth_4_plus_11) accumulating: [15 depth_plus_15)
53: pe_6_5 filling: [12,min_depth_4_plus_12) accumulating: [16 depth_plus_16)
54: pe_6_6 filling: [13,min_depth_4_plus_13) accumulating: [17 depth_plus_17)
55: pe_6_7 filling: [14,min_depth_4_plus_14) accumulating: [18 depth_plus_18)
56: pe_7_0 filling: [8,min_depth_4_plus_8) accumulating: [12 depth_plus_12)
57: pe_7_1 filling: [9,min_depth_4_plus_9) accumulating: [13 depth_plus_13)
58: pe_7_2 filling: [10,min_depth_4_plus_10) accumulating: [14 depth_plus_14)
59: pe_7_3 filling: [11,min_depth_4_plus_11) accumulating: [15 depth_plus_15)
60: pe_7_4 filling: [12,min_depth_4_plus_12) accumulating: [16 depth_plus_16)
61: pe_7_5 filling: [13,min_depth_4_plus_13) accumulating: [17 depth_plus_17)
62: pe_7_6 filling: [14,min_depth_4_plus_14) accumulating: [18 depth_plus_18)
63: pe_7_7 filling: [15,min_depth_4_plus_15) accumulating: [19 depth_plus_19)
}#
