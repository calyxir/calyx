// ###
// This file contains the components needed to perform write transacitons via AXI.
// Current goal is to create a cocotb testbench that tests correctness of this.
// See https://github.com/cucapra/calyx/issues/1733 for more information.
//
// This wrapper assumes it is part of a dot product computation with vectors of
// length 16
// It assumes a bus data width of 32
// This is largely a work in progress and as of Nov 20 2023 is not intended to
// actually be used for anything
// ###

import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/compile.futil";
import "primitives/math.futil";
import "primitives/memories/seq.futil";


//this goes m->s
component m_awwrite_channel(
  ARESET: 1,
  AWREADY: 1
) -> (
  AWVALID: 1,
  // This needs to be 64, see link below `m_axi` section.
  AWADDR: 64,
  // 2^AWSIZE is bytes used in transfer. For memory-mapped AXI (which is what we
  // are doing I believe), should match width of data bus (to shell?, so 32 wide? This
  // is 3'b010)
  // see https://docs.xilinx.com/r/en-US/ug1393-vitis-application-acceleration/Kernel-Interface-Requirements
  // for restrictions
  AWSIZE: 3,
  // in AXI4 this is 8 bits, 1-256 transfers in requested transaction.
  AWLEN : 8,
  // 00 for fixed, 01 for incrementing, 2 for wrap,
  // needs to be incr for RTL kernels (can't use wrapped or fixed)
  AWBURST : 2,
  // required according to spec. We hardcode this
  AWPROT : 3) {
  cells{
      is_awvalid = std_reg(1);

      // gets set high with AWVALID and remains high
      awvalid_was_high = std_reg(1);
      // TODO(nathanielnrn): should arguably eventually live in `s_axi_control`
      // but for now will live here.
      ref base_addr = std_reg(64);

      //we write to this here and read from it in m_write_channel
      ref max_trnsfrs = std_reg(8);

      // number of trasfers in a transaction. This is sent to subordinate
      txn_len = std_reg(8);

      // number of txns we want to occur before entire m_awwrite_channel is done
      // this is internal to the channel (unlike txn_len)
      txn_n = std_const(32,1);
      txn_count = std_reg(32);
      perform_write_txns = std_neq(32);
      txn_adder = std_add(32);

      //"block_transfer" register. need to put into a reg to avoid combinational loops
      bt_reg = std_reg(1);


  }

  wires{

      AWVALID = is_awvalid.out;

      group deassert_val {
          is_awvalid.in = 1'b0;
          is_awvalid.write_en = 1'b1;
          deassert_val[done] = is_awvalid.done;
      }

      group reset_bt {
          bt_reg.in = 1'b0;
          bt_reg.write_en = 1'b1;
          reset_bt[done] = bt_reg.done;
      }

      // this asserts valid and defines all inputs correctly
      // because valid should not be deasserted until handshake occurs
      // this all needs to be one group
      // this contains blocking logic previously in its own group
      group do_aw_transfer {
          //assert AWVALID
          is_awvalid.in = !(is_awvalid.out & AWREADY) & !awvalid_was_high.out ? 1'b1;

          // TODO(nathanielnrn): in theory should be able to get rid of awvalid_was_high
          // but for now we will be explicit and reduce this in generation maybe. Not sure
          // it even matters.
          // This makes AWVALID go low after a single cycle. Without it it stays high for 2.
          is_awvalid.in = is_awvalid.out & AWREADY & awvalid_was_high.out ? 1'b0;
          is_awvalid.write_en = 1'b1;

          awvalid_was_high.in = !(is_awvalid.out & AWREADY) & !awvalid_was_high.out ? 1'b1;
          awvalid_was_high.write_en = !(is_awvalid.out & AWREADY) & !awvalid_was_high.out ? 1'b1;


        // drive output signals for transfer
          AWADDR = base_addr.out;
          // see link above, needs to match data width to host.
          // In this case 2^2 = 4 bytes = 32 bits = width of our data_bus.
          AWSIZE = 3'b010;
          // For now this can be taken from .yxi, as size of mem, because we are assuming
          // data_bus width that matches size of memory cells
          // If we want to use bigger mems need to be able to update base addr
          AWLEN = txn_len.out;
          AWBURST = 2'b01; //incr
          // 3'b110 is [privileged access] [Non-secure access] [Data access]]
          AWPROT = 3'b110;


          // TODO(nathanielnrn): This is used to tell write_channel how many transfers to do
          // we eventually want this to correspond to AWLEN
          // (need a case statement or mux or something)
          // for now hardcoding to 15 for 16 transfers
          max_trnsfrs.in = 8'd15;
          max_trnsfrs.write_en = 1'b1;

          //done when one cycle after handshake (handshake happens for a single cycle)
          bt_reg.in = AWREADY & is_awvalid.out ? 1'b1;
          bt_reg.in = !(AWREADY & is_awvalid.out) ? 1'b0;
          bt_reg.write_en = 1'b1;
          do_aw_transfer[done] = bt_reg.out;
      }


      //txn bookkeeping.
      //We are done performing reads when txn_count == txn_n
      group txn_count_init {
          txn_count.in = 32'b0;
          txn_count.write_en = 1'b1;
          txn_count_init[done] = txn_count.done;

      }

      group txn_len_init {
          //TODO(nathanielnrn): 15 is good for word wide data bus. We'd
          //expect 16 transfers. Number of transfers that occur is AWLEN + 1
          txn_len.in = 8'd15;
          txn_len.write_en = 1'b1;
          txn_len_init[done] = txn_len.done;
      }

      group txn_incr {
          txn_adder.left = txn_count.out;
          txn_adder.right = 32'b1;
          txn_count.in = txn_adder.out;
          txn_count.write_en = 1'b1;
          txn_incr[done] = txn_count.done;

      }

      comb group check_writes_done {
          perform_write_txns.left = txn_count.out;
          perform_write_txns.right = txn_n.out;
      }
  }

  control{
      //XXX(nathanielnrn): What is best way to offer more flexiblity beyond just a counter?
      seq{
          txn_count_init;
          txn_len_init;
          while perform_write_txns.out with check_writes_done{
              seq{
                  reset_bt;
                  do_aw_transfer;
                  deassert_val;
                  txn_incr;
              }
          }
      }
  }
}




component m_write_channel(
  ARESET : 1,
  WREADY : 1,
) -> (
  WVALID : 1,
  WLAST  : 1,
  WDATA  : 32,
) {
  cells {
      // 16 is due to dot-product vector length assumption
      // For this manual implementation we are just writing into this data based
      // on the data we read from cocotb
      ref internal_mem = seq_mem_d1(32, 16, 64);
      wvalid = std_reg(1);
      wvalid_was_high = std_reg(1);
      // used internally to access our seq_mem_d1
      ref curr_addr = std_reg(64);

      //this increments
      curr_trnsfr_count = std_reg(8); //between 0 and 255, add +1 for transfer count
      //this is number of transfer we want to do
      ref max_trnsfrs = std_reg(8);

      // registered because wlast is high with last transfer, not after
      // before this was registered we were terminating immediately with
      // last transfer and not servicing it. This is for while loop in control group
      n_finished_last_trnsfr = std_reg(1);

      // TODO: get this width from yxi
      //read_data_reg = std_reg(32);

      //used for address of seq_d1_mem we are reading from
      curr_addr_adder = std_add(64);
      curr_trnsfr_count_adder = std_add(8);


      // block_transfer reg to avoid combinational loops
      bt_reg = std_reg(1);



     //write init stuff TODO: delete this
     n_init_done = std_reg(1);
     curr_addr_slice = std_slice(64,32);

  }
  wires{

      WVALID = wvalid.out;
      //internal_mem.write_en = 1'b0;



      //stuff for initialization
      group reset_curr_addr{
          curr_addr.in = 64'b0;
          curr_addr.write_en = 1'b1;
          reset_curr_addr[done] = curr_addr.done;
      }

      group write_to_internal{
          internal_mem.read_en = 1'b0;
          internal_mem.write_en = 1'b1;
          internal_mem.addr0 = curr_addr.out;

          curr_addr_slice.in = curr_addr.out;
          internal_mem.write_data = curr_addr_slice.out;
          write_to_internal[done] = internal_mem.write_done;
      }

      group check_if_writes_done{
          n_init_done.in = curr_addr.out == 64'd16 ? 1'b0;
          n_init_done.in = !(curr_addr.out == 64'd16) ? 1'b1;
          n_init_done.write_en = 1'b1;
          check_if_writes_done[done] = n_init_done.done;
      }

      group init_done{
          n_init_done.in = 1'b1;
          n_init_done.write_en = 1'b1;
          init_done[done] = n_init_done.done;
      }
      //end stuff for initialization


      group init_n_finished_last_trnsfr {
          n_finished_last_trnsfr.in = 1'b1;
          n_finished_last_trnsfr.write_en = 1'b1;
          init_n_finished_last_trnsfr[done] = n_finished_last_trnsfr.done;
      }

      //Used to block any servicing until handshake occurs.
      group reset_bt {
          bt_reg.in = 1'b0;
          bt_reg.write_en = 1'b1;
          reset_bt[done] = bt_reg.done;
      }

      //NOTE: xVALID signals must be high until xREADY is high as well, so this works
      //because if xREADY is high (is_rdy.out) then RVALID being high makes 1 flip
      //and group will be done by bt_reg.out
      group do_write_transfer {
        //set RREADY high
        //TODO (nathanielnrn): technically we can make RREADY depend on on RVALID (but not vice versa).
        //Could we simplify this we just making things ready when we are in
        //block_transfer && RVALID?

        //NOTE: is_rdy.in = 1'b1; does not work, it leaves RREADY high for 2 cycles
        // this both asserts and deasserts one cycle later
        wvalid.in = !(wvalid.out & WREADY & wvalid_was_high.out) ? 1'b1;
        // TODO(nathanielnrn): Can prob get rid of wvalid_was_high
        wvalid.in = wvalid.out & WREADY & wvalid_was_high.out ? 1'b0;
        wvalid.write_en = 1'b1;

        //set to 1 after valid has been high even once
        wvalid_was_high.in = 1'b1;
        wvalid_was_high.write_en = !(wvalid.out & WREADY) & !wvalid_was_high.out ? 1'b1;


        // set data output based on curr_addr register
        internal_mem.addr0 = curr_addr.out;
        internal_mem.read_en = 1'b1;
        WDATA = internal_mem.read_data;

        //set wlast
        WLAST = max_trnsfrs.out == curr_trnsfr_count.out ? 1'b1;
        WLAST = max_trnsfrs.out == curr_trnsfr_count.out ? 1'b1;

        //set high only when WLAST is high and a handshake occurs.
        n_finished_last_trnsfr.in = (max_trnsfrs.out == curr_trnsfr_count.out) & wvalid.out & WREADY ? 1'b0;
        n_finished_last_trnsfr.write_en = (max_trnsfrs.out == curr_trnsfr_count.out) & wvalid.out & WREADY ? 1'b1;



        // we are done after handshake
        bt_reg.in = wvalid.out & WREADY ? 1'b1;
        bt_reg.in = !(wvalid.out & WREADY) ? 1'b0;
        bt_reg.write_en = 1'b1;
        do_write_transfer[done] = bt_reg.out;
      }

      group incr_curr_addr{
          curr_addr_adder.left = 64'd1 ;
          curr_addr_adder.right = curr_addr.out;
          curr_addr.in = curr_addr_adder.out;
          curr_addr.write_en = 1'b1;
          incr_curr_addr[done] = curr_addr.done;
      }

      group incr_curr_trnsfr_count {
          curr_trnsfr_count_adder.left = 8'd1;
          curr_trnsfr_count_adder.right = curr_trnsfr_count.out;
          curr_trnsfr_count.in = curr_trnsfr_count_adder.out;
          curr_trnsfr_count.write_en = 1'b1;
          incr_curr_trnsfr_count[done] = curr_trnsfr_count.done;
      }

  }
  control{
      seq{

        //done for writing to internal mem
        init_done;
        reset_curr_addr;
        while n_init_done.out {
            seq{
              write_to_internal;
              incr_curr_addr;
              check_if_writes_done;
            }
        }
        //end writing to internal mem
        reset_curr_addr;
        init_n_finished_last_trnsfr;
        while n_finished_last_trnsfr.out{
          seq{
              reset_bt;
              do_write_transfer;
              par{
                incr_curr_addr;
                incr_curr_trnsfr_count;
              }
          }
      }
    }
  }
}


//We assume that all responses are OKAY because we dont have any error handling.
//So basically this just sets BREADY high then lowers it
component m_bresp_channel(
  ARESET : 1,
  BVALID : 1,
  // We assume all writes are valid.
  //BRESP : 2,
) -> (
  // NOTE: In general, according to ZipCPU we want xREADY signals to be registered
  // because (IIRC) it helps avoid combinational loops between READY and VALID.
  BREADY : 1,
) {
  cells{
      bready = std_reg(1);
      bt_reg = std_reg(1);

  }
  wires{
      BREADY = bready.out;
      group reset_bt_reg{
          bt_reg.in = 1'b0;
          bt_reg.write_en = 1'b1;
          reset_bt_reg[done] = bt_reg.done;
      }

      // TODO(nathanielnrn): This is probably very unoptimal and takes multiple
      // cycles to simply do a handshake. Can probably be much better
      group block_transfer{
          bready.in = !(BVALID & bready.out) ? 1'b1;
          bready.in = BVALID & bready.out ? 1'b0;
          bready.write_en = 1'b1;

          bt_reg.in = bready.out & BVALID ? 1'b1;
          bt_reg.in = !(bready.out & BVALID) ? 1'b0;
          bt_reg.write_en = 1'b1;
          block_transfer[done] = bt_reg.out;
      }

  }
  control{
      seq{
          reset_bt_reg;
          block_transfer;
      }
  }
}



//TODO(nathanielnrn): this is axi_wrapper, prefer to use @toplevel attribute but its not working
// See individual channel components for explanations of signals
component main(
    m_ARESET : 1,
    m_AWREADY : 1,

    m_WRESP : 2,
    m_WREADY : 1,

    m_BVALID : 1,
    // Used only for waveform tracing. Not sent anywhere
    // Note this AXI4 has this at 2 bits, while latest has it at 3.
    m_BRESP : 2,
) -> (

    m_AWVALID : 1,
    m_AWADDR: 64,
    m_AWSIZE: 3,
    m_AWLEN : 8,
    m_AWBURST : 2,
    m_AWPROT : 3,

    m_WVALID : 1,
    m_WLAST : 1,
    m_WDATA : 32,

    m_BREADY : 1,
    //NOTE: Only used for cocotb compatability, doesn't do anything within the wrapper itself currently.
    m_AWID : 1,
    m_WID : 1,
    m_BID : 1,
) {
    cells{
        vec1_data = seq_mem_d1(32,16,64);
        output_data = seq_mem_d1(32,1,0);

        curr_addr = std_reg(64);
        base_addr = std_reg(64);

        max_trnsfrs = std_reg(8);

        awwrite_channel = m_awwrite_channel();
        write_channel = m_write_channel();
        bresp_channel = m_bresp_channel();

    }

    wires{

        m_AWID = 1'b0;
        m_WID = 1'b0;
        m_BID = 1'b0;

        group set_curr_to_base_addr{
            curr_addr.in = base_addr.out;
            curr_addr.write_en = 1'b1;
            set_curr_to_base_addr[done] = curr_addr.done;
        }
    }
    control{
        seq{
            invoke awwrite_channel[base_addr = base_addr, max_trnsfrs = max_trnsfrs]
            (
            ARESET = m_ARESET,
            AWREADY = m_AWREADY
            )
            (
            AWVALID = m_AWVALID,
            AWADDR = m_AWADDR,
            AWSIZE = m_AWSIZE,
            AWLEN = m_AWLEN,
            AWBURST = m_AWBURST,
            AWPROT = m_AWPROT
            );

            set_curr_to_base_addr;

            invoke write_channel[internal_mem = vec1_data, curr_addr = curr_addr, max_trnsfrs = max_trnsfrs]
            (
            ARESET = m_ARESET,
            WREADY = m_WREADY
            )
            (
            WVALID = m_WVALID,
            WLAST = m_WLAST,
            WDATA = m_WDATA
            );

            invoke bresp_channel
            (
            BVALID = m_BVALID
            )
            (
            BREADY = m_BREADY
            );
        }
    }


}
