import "primitives/core.futil";
import "primitives/binary_operators.futil";
import "primitives/memories/dyn.futil";
component m_ar_channel_A0(ARESETn: 1, ARREADY: 1, axi_address: 64) -> (ARVALID: 1, ARADDR: 64, ARSIZE: 3, ARLEN: 8, ARBURST: 2, ARPROT: 3) {
  cells {
    arvalid = std_reg(1);
    ar_handshake_occurred = std_reg(1);
    bt_reg = std_reg(1);
  }
  wires {
    ARVALID = arvalid.out;
    group do_ar_transfer {
      arvalid.in = (!(arvalid.out & ARREADY) & !ar_handshake_occurred.out) ? 1'd1;
      arvalid.in = ((arvalid.out & ARREADY) | ar_handshake_occurred.out) ? 1'd0;
      arvalid.write_en = 1'd1;
      ar_handshake_occurred.in = (arvalid.out & ARREADY) ? 1'd1;
      ar_handshake_occurred.write_en = !ar_handshake_occurred.out ? 1'd1;
      ARADDR = axi_address;
      ARSIZE = 3'd2;
      ARLEN = 8'd0;
      ARBURST = 2'd1;
      ARPROT = 3'd6;
      bt_reg.in = (ARREADY & arvalid.out) ? 1'd1;
      bt_reg.in = !(ARREADY & arvalid.out) ? 1'd0;
      bt_reg.write_en = 1'd1;
      do_ar_transfer[done] = bt_reg.out;
    }
  }
  control {
    seq {
      par {
        invoke bt_reg(in=1'd0)();
        invoke ar_handshake_occurred(in=1'd0)();
      }
      do_ar_transfer;
      invoke arvalid(in=1'd0)();
    }
  }
}
component m_aw_channel_A0(ARESETn: 1, AWREADY: 1, axi_address: 64) -> (AWVALID: 1, AWADDR: 64, AWSIZE: 3, AWLEN: 8, AWBURST: 2, AWPROT: 3) {
  cells {
    awvalid = std_reg(1);
    aw_handshake_occurred = std_reg(1);
    bt_reg = std_reg(1);
  }
  wires {
    AWVALID = awvalid.out;
    group do_aw_transfer {
      awvalid.in = (!(awvalid.out & AWREADY) & !aw_handshake_occurred.out) ? 1'd1;
      awvalid.in = ((awvalid.out & AWREADY) | aw_handshake_occurred.out) ? 1'd0;
      awvalid.write_en = 1'd1;
      aw_handshake_occurred.in = (awvalid.out & AWREADY) ? 1'd1;
      aw_handshake_occurred.write_en = !aw_handshake_occurred.out ? 1'd1;
      AWADDR = axi_address;
      AWSIZE = 3'd2;
      AWLEN = 8'd0;
      AWBURST = 2'd1;
      AWPROT = 3'd6;
      bt_reg.in = (AWREADY & awvalid.out) ? 1'd1;
      bt_reg.in = !(AWREADY & awvalid.out) ? 1'd0;
      bt_reg.write_en = 1'd1;
      do_aw_transfer[done] = bt_reg.out;
    }
  }
  control {
    seq {
      par {
        invoke bt_reg(in=1'd0)();
        invoke aw_handshake_occurred(in=1'd0)();
      }
      do_aw_transfer;
      invoke awvalid(in=1'd0)();
    }
  }
}
component m_read_channel_A0(ARESETn: 1, RVALID: 1, RLAST: 1, RDATA: 32, RRESP: 2) -> (RREADY: 1, read_data: 32) {
  cells {
    read_reg = std_reg(32);
    rready = std_reg(1);
    n_RLAST = std_reg(1);
  }
  wires {
    RREADY = rready.out;
    read_data = read_reg.out;
    group block_transfer {
      rready.in = !(rready.out & RVALID) ? 1'd1;
      rready.in = (rready.out & RVALID) ? 1'd0;
      rready.write_en = 1'd1;
      read_reg.in = RDATA;
      read_reg.write_en = (rready.out & RVALID) ? 1'd1;
      read_reg.write_en = !(rready.out & RVALID) ? 1'd0;
      n_RLAST.in = RLAST ? 1'd0;
      n_RLAST.in = !RLAST ? 1'd1;
      n_RLAST.write_en = 1'd1;
      block_transfer[done] = read_reg.done;
    }
  }
  control {
    seq {
      invoke n_RLAST(in=1'd1)();
      while n_RLAST.out {
        seq {
          block_transfer;
        }
      }
    }
  }
}
component m_write_channel_A0(ARESETn: 1, WREADY: 1, write_data: 32) -> (WVALID: 1, WLAST: 1, WDATA: 32) {
  cells {
    wvalid = std_reg(1);
    w_handshake_occurred = std_reg(1);
    bt_reg = std_reg(1);
  }
  wires {
    WVALID = wvalid.out;
    group service_write_transfer {
      wvalid.in = (!(wvalid.out & WREADY) & !w_handshake_occurred.out) ? 1'd1;
      wvalid.in = ((wvalid.out & WREADY) | w_handshake_occurred.out) ? 1'd0;
      wvalid.write_en = 1'd1;
      w_handshake_occurred.in = (wvalid.out & WREADY) ? 1'd1;
      w_handshake_occurred.in = !(wvalid.out & WREADY) ? 1'd0;
      w_handshake_occurred.write_en = !w_handshake_occurred.out ? 1'd1;
      WDATA = write_data;
      WLAST = 1'd1;
      bt_reg.in = (wvalid.out & WREADY) ? 1'd1;
      bt_reg.in = !(wvalid.out & WREADY) ? 1'd0;
      bt_reg.write_en = 1'd1;
      service_write_transfer[done] = bt_reg.out;
    }
  }
  control {
    seq {
      invoke bt_reg(in=1'd0)();
      invoke w_handshake_occurred(in=1'd0)();
      service_write_transfer;
    }
  }
}
component m_bresp_channel_A0(ARESETn: 1, BVALID: 1) -> (BREADY: 1) {
  cells {
    bready = std_reg(1);
    bt_reg = std_reg(1);
  }
  wires {
    BREADY = bready.out;
    group block_transfer {
      bready.in = !(bready.out & BVALID) ? 1'd1;
      bready.in = (bready.out & BVALID) ? 1'd0;
      bready.write_en = 1'd1;
      bt_reg.in = (bready.out & BVALID) ? 1'd1;
      bt_reg.in = !(bready.out & BVALID) ? 1'd0;
      bt_reg.write_en = 1'd1;
      block_transfer[done] = bt_reg.out;
    }
  }
  control {
    seq {
      invoke bt_reg(in=1'd0)();
      block_transfer;
    }
  }
}
comb component address_translator_A0(calyx_mem_addr: 3) -> (axi_address: 64) {
  cells {
    mul_A0 = std_const_mult(64, 4);
    pad_input_addr = std_pad(3, 64);
  }
  wires {
    pad_input_addr.in = calyx_mem_addr;
    mul_A0.in = pad_input_addr.out;
    axi_address = mul_A0.out;
  }
}
component read_controller_A0(axi_address: 64, ARESETn: 1, ARREADY: 1, RVALID: 1, RLAST: 1, RDATA: 32, RRESP: 2) -> (ARVALID: 1, ARADDR: 64, ARSIZE: 3, ARLEN: 8, ARBURST: 2, ARPROT: 3, RREADY: 1, read_data: 32) {
  cells {
    ar_channel_A0 = m_ar_channel_A0();
    read_channel_A0 = m_read_channel_A0();
  }
  wires {
    read_data = read_channel_A0.read_data;
  }
  control {
    seq {
      invoke ar_channel_A0(axi_address=axi_address, ARESETn=ARESETn, ARREADY=ARREADY)(ARVALID=ARVALID, ARADDR=ARADDR, ARSIZE=ARSIZE, ARLEN=ARLEN, ARBURST=ARBURST, ARPROT=ARPROT);
      invoke read_channel_A0(ARESETn=ARESETn, RVALID=RVALID, RLAST=RLAST, RDATA=RDATA, RRESP=RRESP)(RREADY=RREADY);
    }
  }
}
component write_controller_A0(axi_address: 64, write_data: 32, ARESETn: 1, AWREADY: 1, WREADY: 1, BVALID: 1) -> (AWVALID: 1, AWADDR: 64, AWSIZE: 3, AWLEN: 8, AWBURST: 2, AWPROT: 3, WVALID: 1, WLAST: 1, WDATA: 32, BREADY: 1) {
  cells {
    aw_channel_A0 = m_aw_channel_A0();
    write_channel_A0 = m_write_channel_A0();
    bresp_channel_A0 = m_bresp_channel_A0();
  }
  wires {

  }
  control {
    seq {
      invoke aw_channel_A0(axi_address=axi_address, ARESETn=ARESETn, AWREADY=AWREADY)(AWVALID=AWVALID, AWADDR=AWADDR, AWSIZE=AWSIZE, AWLEN=AWLEN, AWBURST=AWBURST, AWPROT=AWPROT);
      invoke write_channel_A0(write_data=write_data, ARESETn=ARESETn, WREADY=WREADY)(WVALID=WVALID, WLAST=WLAST, WDATA=WDATA);
      invoke bresp_channel_A0(BVALID=BVALID)(BREADY=BREADY);
    }
  }
}
component axi_dyn_mem_A0(@write_together(1) @data addr0: 3, @write_together(1) @go(1) content_en: 1, @write_together(2) write_en: 1, @write_together(2) @data write_data: 32, ARESETn: 1, ARREADY: 1, RVALID: 1, RLAST: 1, RDATA: 32, RRESP: 2, AWREADY: 1, WREADY: 1, BVALID: 1, BRESP: 2) -> (@stable read_data: 32, ARVALID: 1, ARADDR: 64, ARSIZE: 3, ARLEN: 8, ARBURST: 2, ARPROT: 3, RREADY: 1, AWVALID: 1, AWADDR: 64, AWSIZE: 3, AWLEN: 8, AWBURST: 2, AWPROT: 3, WVALID: 1, WLAST: 1, WDATA: 32, BREADY: 1) {
  cells {
    address_translator_A0 = address_translator_A0();
    read_controller_A0 = read_controller_A0();
    write_controller_A0 = write_controller_A0();
  }
  wires {
    address_translator_A0.calyx_mem_addr = addr0;
    read_data = read_controller_A0.read_data;
  }
  control {
    seq {
      if write_en {
        invoke write_controller_A0(axi_address=address_translator_A0.axi_address, write_data=write_data, ARESETn=ARESETn, AWREADY=AWREADY, WREADY=WREADY, BVALID=BVALID)(AWVALID=AWVALID, AWADDR=AWADDR, AWSIZE=AWSIZE, AWLEN=AWLEN, AWBURST=AWBURST, AWPROT=AWPROT, WVALID=WVALID, WLAST=WLAST, WDATA=WDATA, BREADY=BREADY);
      } else {
        invoke read_controller_A0(axi_address=address_translator_A0.axi_address, ARESETn=ARESETn, ARREADY=ARREADY, RVALID=RVALID, RLAST=RLAST, RDATA=RDATA, RRESP=RRESP)(ARVALID=ARVALID, ARADDR=ARADDR, ARSIZE=ARSIZE, ARLEN=ARLEN, ARBURST=ARBURST, ARPROT=ARPROT, RREADY=RREADY, read_data=read_data);
      }
    }
  }
}
component m_ar_channel_B0(ARESETn: 1, ARREADY: 1, axi_address: 64) -> (ARVALID: 1, ARADDR: 64, ARSIZE: 3, ARLEN: 8, ARBURST: 2, ARPROT: 3) {
  cells {
    arvalid = std_reg(1);
    ar_handshake_occurred = std_reg(1);
    bt_reg = std_reg(1);
  }
  wires {
    ARVALID = arvalid.out;
    group do_ar_transfer {
      arvalid.in = (!(arvalid.out & ARREADY) & !ar_handshake_occurred.out) ? 1'd1;
      arvalid.in = ((arvalid.out & ARREADY) | ar_handshake_occurred.out) ? 1'd0;
      arvalid.write_en = 1'd1;
      ar_handshake_occurred.in = (arvalid.out & ARREADY) ? 1'd1;
      ar_handshake_occurred.write_en = !ar_handshake_occurred.out ? 1'd1;
      ARADDR = axi_address;
      ARSIZE = 3'd2;
      ARLEN = 8'd0;
      ARBURST = 2'd1;
      ARPROT = 3'd6;
      bt_reg.in = (ARREADY & arvalid.out) ? 1'd1;
      bt_reg.in = !(ARREADY & arvalid.out) ? 1'd0;
      bt_reg.write_en = 1'd1;
      do_ar_transfer[done] = bt_reg.out;
    }
  }
  control {
    seq {
      par {
        invoke bt_reg(in=1'd0)();
        invoke ar_handshake_occurred(in=1'd0)();
      }
      do_ar_transfer;
      invoke arvalid(in=1'd0)();
    }
  }
}
component m_aw_channel_B0(ARESETn: 1, AWREADY: 1, axi_address: 64) -> (AWVALID: 1, AWADDR: 64, AWSIZE: 3, AWLEN: 8, AWBURST: 2, AWPROT: 3) {
  cells {
    awvalid = std_reg(1);
    aw_handshake_occurred = std_reg(1);
    bt_reg = std_reg(1);
  }
  wires {
    AWVALID = awvalid.out;
    group do_aw_transfer {
      awvalid.in = (!(awvalid.out & AWREADY) & !aw_handshake_occurred.out) ? 1'd1;
      awvalid.in = ((awvalid.out & AWREADY) | aw_handshake_occurred.out) ? 1'd0;
      awvalid.write_en = 1'd1;
      aw_handshake_occurred.in = (awvalid.out & AWREADY) ? 1'd1;
      aw_handshake_occurred.write_en = !aw_handshake_occurred.out ? 1'd1;
      AWADDR = axi_address;
      AWSIZE = 3'd2;
      AWLEN = 8'd0;
      AWBURST = 2'd1;
      AWPROT = 3'd6;
      bt_reg.in = (AWREADY & awvalid.out) ? 1'd1;
      bt_reg.in = !(AWREADY & awvalid.out) ? 1'd0;
      bt_reg.write_en = 1'd1;
      do_aw_transfer[done] = bt_reg.out;
    }
  }
  control {
    seq {
      par {
        invoke bt_reg(in=1'd0)();
        invoke aw_handshake_occurred(in=1'd0)();
      }
      do_aw_transfer;
      invoke awvalid(in=1'd0)();
    }
  }
}
component m_read_channel_B0(ARESETn: 1, RVALID: 1, RLAST: 1, RDATA: 32, RRESP: 2) -> (RREADY: 1, read_data: 32) {
  cells {
    read_reg = std_reg(32);
    rready = std_reg(1);
    n_RLAST = std_reg(1);
  }
  wires {
    RREADY = rready.out;
    read_data = read_reg.out;
    group block_transfer {
      rready.in = !(rready.out & RVALID) ? 1'd1;
      rready.in = (rready.out & RVALID) ? 1'd0;
      rready.write_en = 1'd1;
      read_reg.in = RDATA;
      read_reg.write_en = (rready.out & RVALID) ? 1'd1;
      read_reg.write_en = !(rready.out & RVALID) ? 1'd0;
      n_RLAST.in = RLAST ? 1'd0;
      n_RLAST.in = !RLAST ? 1'd1;
      n_RLAST.write_en = 1'd1;
      block_transfer[done] = read_reg.done;
    }
  }
  control {
    seq {
      invoke n_RLAST(in=1'd1)();
      while n_RLAST.out {
        seq {
          block_transfer;
        }
      }
    }
  }
}
component m_write_channel_B0(ARESETn: 1, WREADY: 1, write_data: 32) -> (WVALID: 1, WLAST: 1, WDATA: 32) {
  cells {
    wvalid = std_reg(1);
    w_handshake_occurred = std_reg(1);
    bt_reg = std_reg(1);
  }
  wires {
    WVALID = wvalid.out;
    group service_write_transfer {
      wvalid.in = (!(wvalid.out & WREADY) & !w_handshake_occurred.out) ? 1'd1;
      wvalid.in = ((wvalid.out & WREADY) | w_handshake_occurred.out) ? 1'd0;
      wvalid.write_en = 1'd1;
      w_handshake_occurred.in = (wvalid.out & WREADY) ? 1'd1;
      w_handshake_occurred.in = !(wvalid.out & WREADY) ? 1'd0;
      w_handshake_occurred.write_en = !w_handshake_occurred.out ? 1'd1;
      WDATA = write_data;
      WLAST = 1'd1;
      bt_reg.in = (wvalid.out & WREADY) ? 1'd1;
      bt_reg.in = !(wvalid.out & WREADY) ? 1'd0;
      bt_reg.write_en = 1'd1;
      service_write_transfer[done] = bt_reg.out;
    }
  }
  control {
    seq {
      invoke bt_reg(in=1'd0)();
      invoke w_handshake_occurred(in=1'd0)();
      service_write_transfer;
    }
  }
}
component m_bresp_channel_B0(ARESETn: 1, BVALID: 1) -> (BREADY: 1) {
  cells {
    bready = std_reg(1);
    bt_reg = std_reg(1);
  }
  wires {
    BREADY = bready.out;
    group block_transfer {
      bready.in = !(bready.out & BVALID) ? 1'd1;
      bready.in = (bready.out & BVALID) ? 1'd0;
      bready.write_en = 1'd1;
      bt_reg.in = (bready.out & BVALID) ? 1'd1;
      bt_reg.in = !(bready.out & BVALID) ? 1'd0;
      bt_reg.write_en = 1'd1;
      block_transfer[done] = bt_reg.out;
    }
  }
  control {
    seq {
      invoke bt_reg(in=1'd0)();
      block_transfer;
    }
  }
}
comb component address_translator_B0(calyx_mem_addr: 3) -> (axi_address: 64) {
  cells {
    mul_B0 = std_const_mult(64, 4);
    pad_input_addr = std_pad(3, 64);
  }
  wires {
    pad_input_addr.in = calyx_mem_addr;
    mul_B0.in = pad_input_addr.out;
    axi_address = mul_B0.out;
  }
}
component read_controller_B0(axi_address: 64, ARESETn: 1, ARREADY: 1, RVALID: 1, RLAST: 1, RDATA: 32, RRESP: 2) -> (ARVALID: 1, ARADDR: 64, ARSIZE: 3, ARLEN: 8, ARBURST: 2, ARPROT: 3, RREADY: 1, read_data: 32) {
  cells {
    ar_channel_B0 = m_ar_channel_B0();
    read_channel_B0 = m_read_channel_B0();
  }
  wires {
    read_data = read_channel_B0.read_data;
  }
  control {
    seq {
      invoke ar_channel_B0(axi_address=axi_address, ARESETn=ARESETn, ARREADY=ARREADY)(ARVALID=ARVALID, ARADDR=ARADDR, ARSIZE=ARSIZE, ARLEN=ARLEN, ARBURST=ARBURST, ARPROT=ARPROT);
      invoke read_channel_B0(ARESETn=ARESETn, RVALID=RVALID, RLAST=RLAST, RDATA=RDATA, RRESP=RRESP)(RREADY=RREADY);
    }
  }
}
component write_controller_B0(axi_address: 64, write_data: 32, ARESETn: 1, AWREADY: 1, WREADY: 1, BVALID: 1) -> (AWVALID: 1, AWADDR: 64, AWSIZE: 3, AWLEN: 8, AWBURST: 2, AWPROT: 3, WVALID: 1, WLAST: 1, WDATA: 32, BREADY: 1) {
  cells {
    aw_channel_B0 = m_aw_channel_B0();
    write_channel_B0 = m_write_channel_B0();
    bresp_channel_B0 = m_bresp_channel_B0();
  }
  wires {

  }
  control {
    seq {
      invoke aw_channel_B0(axi_address=axi_address, ARESETn=ARESETn, AWREADY=AWREADY)(AWVALID=AWVALID, AWADDR=AWADDR, AWSIZE=AWSIZE, AWLEN=AWLEN, AWBURST=AWBURST, AWPROT=AWPROT);
      invoke write_channel_B0(write_data=write_data, ARESETn=ARESETn, WREADY=WREADY)(WVALID=WVALID, WLAST=WLAST, WDATA=WDATA);
      invoke bresp_channel_B0(BVALID=BVALID)(BREADY=BREADY);
    }
  }
}
component axi_dyn_mem_B0(@write_together(1) @data addr0: 3, @write_together(1) @go(1) content_en: 1, @write_together(2) write_en: 1, @write_together(2) @data write_data: 32, ARESETn: 1, ARREADY: 1, RVALID: 1, RLAST: 1, RDATA: 32, RRESP: 2, AWREADY: 1, WREADY: 1, BVALID: 1, BRESP: 2) -> (@stable read_data: 32, ARVALID: 1, ARADDR: 64, ARSIZE: 3, ARLEN: 8, ARBURST: 2, ARPROT: 3, RREADY: 1, AWVALID: 1, AWADDR: 64, AWSIZE: 3, AWLEN: 8, AWBURST: 2, AWPROT: 3, WVALID: 1, WLAST: 1, WDATA: 32, BREADY: 1) {
  cells {
    address_translator_B0 = address_translator_B0();
    read_controller_B0 = read_controller_B0();
    write_controller_B0 = write_controller_B0();
  }
  wires {
    address_translator_B0.calyx_mem_addr = addr0;
    read_data = read_controller_B0.read_data;
  }
  control {
    seq {
      if write_en {
        invoke write_controller_B0(axi_address=address_translator_B0.axi_address, write_data=write_data, ARESETn=ARESETn, AWREADY=AWREADY, WREADY=WREADY, BVALID=BVALID)(AWVALID=AWVALID, AWADDR=AWADDR, AWSIZE=AWSIZE, AWLEN=AWLEN, AWBURST=AWBURST, AWPROT=AWPROT, WVALID=WVALID, WLAST=WLAST, WDATA=WDATA, BREADY=BREADY);
      } else {
        invoke read_controller_B0(axi_address=address_translator_B0.axi_address, ARESETn=ARESETn, ARREADY=ARREADY, RVALID=RVALID, RLAST=RLAST, RDATA=RDATA, RRESP=RRESP)(ARVALID=ARVALID, ARADDR=ARADDR, ARSIZE=ARSIZE, ARLEN=ARLEN, ARBURST=ARBURST, ARPROT=ARPROT, RREADY=RREADY, read_data=read_data);
      }
    }
  }
}
component m_ar_channel_Sum0(ARESETn: 1, ARREADY: 1, axi_address: 64) -> (ARVALID: 1, ARADDR: 64, ARSIZE: 3, ARLEN: 8, ARBURST: 2, ARPROT: 3) {
  cells {
    arvalid = std_reg(1);
    ar_handshake_occurred = std_reg(1);
    bt_reg = std_reg(1);
  }
  wires {
    ARVALID = arvalid.out;
    group do_ar_transfer {
      arvalid.in = (!(arvalid.out & ARREADY) & !ar_handshake_occurred.out) ? 1'd1;
      arvalid.in = ((arvalid.out & ARREADY) | ar_handshake_occurred.out) ? 1'd0;
      arvalid.write_en = 1'd1;
      ar_handshake_occurred.in = (arvalid.out & ARREADY) ? 1'd1;
      ar_handshake_occurred.write_en = !ar_handshake_occurred.out ? 1'd1;
      ARADDR = axi_address;
      ARSIZE = 3'd2;
      ARLEN = 8'd0;
      ARBURST = 2'd1;
      ARPROT = 3'd6;
      bt_reg.in = (ARREADY & arvalid.out) ? 1'd1;
      bt_reg.in = !(ARREADY & arvalid.out) ? 1'd0;
      bt_reg.write_en = 1'd1;
      do_ar_transfer[done] = bt_reg.out;
    }
  }
  control {
    seq {
      par {
        invoke bt_reg(in=1'd0)();
        invoke ar_handshake_occurred(in=1'd0)();
      }
      do_ar_transfer;
      invoke arvalid(in=1'd0)();
    }
  }
}
component m_aw_channel_Sum0(ARESETn: 1, AWREADY: 1, axi_address: 64) -> (AWVALID: 1, AWADDR: 64, AWSIZE: 3, AWLEN: 8, AWBURST: 2, AWPROT: 3) {
  cells {
    awvalid = std_reg(1);
    aw_handshake_occurred = std_reg(1);
    bt_reg = std_reg(1);
  }
  wires {
    AWVALID = awvalid.out;
    group do_aw_transfer {
      awvalid.in = (!(awvalid.out & AWREADY) & !aw_handshake_occurred.out) ? 1'd1;
      awvalid.in = ((awvalid.out & AWREADY) | aw_handshake_occurred.out) ? 1'd0;
      awvalid.write_en = 1'd1;
      aw_handshake_occurred.in = (awvalid.out & AWREADY) ? 1'd1;
      aw_handshake_occurred.write_en = !aw_handshake_occurred.out ? 1'd1;
      AWADDR = axi_address;
      AWSIZE = 3'd2;
      AWLEN = 8'd0;
      AWBURST = 2'd1;
      AWPROT = 3'd6;
      bt_reg.in = (AWREADY & awvalid.out) ? 1'd1;
      bt_reg.in = !(AWREADY & awvalid.out) ? 1'd0;
      bt_reg.write_en = 1'd1;
      do_aw_transfer[done] = bt_reg.out;
    }
  }
  control {
    seq {
      par {
        invoke bt_reg(in=1'd0)();
        invoke aw_handshake_occurred(in=1'd0)();
      }
      do_aw_transfer;
      invoke awvalid(in=1'd0)();
    }
  }
}
component m_read_channel_Sum0(ARESETn: 1, RVALID: 1, RLAST: 1, RDATA: 32, RRESP: 2) -> (RREADY: 1, read_data: 32) {
  cells {
    read_reg = std_reg(32);
    rready = std_reg(1);
    n_RLAST = std_reg(1);
  }
  wires {
    RREADY = rready.out;
    read_data = read_reg.out;
    group block_transfer {
      rready.in = !(rready.out & RVALID) ? 1'd1;
      rready.in = (rready.out & RVALID) ? 1'd0;
      rready.write_en = 1'd1;
      read_reg.in = RDATA;
      read_reg.write_en = (rready.out & RVALID) ? 1'd1;
      read_reg.write_en = !(rready.out & RVALID) ? 1'd0;
      n_RLAST.in = RLAST ? 1'd0;
      n_RLAST.in = !RLAST ? 1'd1;
      n_RLAST.write_en = 1'd1;
      block_transfer[done] = read_reg.done;
    }
  }
  control {
    seq {
      invoke n_RLAST(in=1'd1)();
      while n_RLAST.out {
        seq {
          block_transfer;
        }
      }
    }
  }
}
component m_write_channel_Sum0(ARESETn: 1, WREADY: 1, write_data: 32) -> (WVALID: 1, WLAST: 1, WDATA: 32) {
  cells {
    wvalid = std_reg(1);
    w_handshake_occurred = std_reg(1);
    bt_reg = std_reg(1);
  }
  wires {
    WVALID = wvalid.out;
    group service_write_transfer {
      wvalid.in = (!(wvalid.out & WREADY) & !w_handshake_occurred.out) ? 1'd1;
      wvalid.in = ((wvalid.out & WREADY) | w_handshake_occurred.out) ? 1'd0;
      wvalid.write_en = 1'd1;
      w_handshake_occurred.in = (wvalid.out & WREADY) ? 1'd1;
      w_handshake_occurred.in = !(wvalid.out & WREADY) ? 1'd0;
      w_handshake_occurred.write_en = !w_handshake_occurred.out ? 1'd1;
      WDATA = write_data;
      WLAST = 1'd1;
      bt_reg.in = (wvalid.out & WREADY) ? 1'd1;
      bt_reg.in = !(wvalid.out & WREADY) ? 1'd0;
      bt_reg.write_en = 1'd1;
      service_write_transfer[done] = bt_reg.out;
    }
  }
  control {
    seq {
      invoke bt_reg(in=1'd0)();
      invoke w_handshake_occurred(in=1'd0)();
      service_write_transfer;
    }
  }
}
component m_bresp_channel_Sum0(ARESETn: 1, BVALID: 1) -> (BREADY: 1) {
  cells {
    bready = std_reg(1);
    bt_reg = std_reg(1);
  }
  wires {
    BREADY = bready.out;
    group block_transfer {
      bready.in = !(bready.out & BVALID) ? 1'd1;
      bready.in = (bready.out & BVALID) ? 1'd0;
      bready.write_en = 1'd1;
      bt_reg.in = (bready.out & BVALID) ? 1'd1;
      bt_reg.in = !(bready.out & BVALID) ? 1'd0;
      bt_reg.write_en = 1'd1;
      block_transfer[done] = bt_reg.out;
    }
  }
  control {
    seq {
      invoke bt_reg(in=1'd0)();
      block_transfer;
    }
  }
}
comb component address_translator_Sum0(calyx_mem_addr: 3) -> (axi_address: 64) {
  cells {
    mul_Sum0 = std_const_mult(64, 4);
    pad_input_addr = std_pad(3, 64);
  }
  wires {
    pad_input_addr.in = calyx_mem_addr;
    mul_Sum0.in = pad_input_addr.out;
    axi_address = mul_Sum0.out;
  }
}
component read_controller_Sum0(axi_address: 64, ARESETn: 1, ARREADY: 1, RVALID: 1, RLAST: 1, RDATA: 32, RRESP: 2) -> (ARVALID: 1, ARADDR: 64, ARSIZE: 3, ARLEN: 8, ARBURST: 2, ARPROT: 3, RREADY: 1, read_data: 32) {
  cells {
    ar_channel_Sum0 = m_ar_channel_Sum0();
    read_channel_Sum0 = m_read_channel_Sum0();
  }
  wires {
    read_data = read_channel_Sum0.read_data;
  }
  control {
    seq {
      invoke ar_channel_Sum0(axi_address=axi_address, ARESETn=ARESETn, ARREADY=ARREADY)(ARVALID=ARVALID, ARADDR=ARADDR, ARSIZE=ARSIZE, ARLEN=ARLEN, ARBURST=ARBURST, ARPROT=ARPROT);
      invoke read_channel_Sum0(ARESETn=ARESETn, RVALID=RVALID, RLAST=RLAST, RDATA=RDATA, RRESP=RRESP)(RREADY=RREADY);
    }
  }
}
component write_controller_Sum0(axi_address: 64, write_data: 32, ARESETn: 1, AWREADY: 1, WREADY: 1, BVALID: 1) -> (AWVALID: 1, AWADDR: 64, AWSIZE: 3, AWLEN: 8, AWBURST: 2, AWPROT: 3, WVALID: 1, WLAST: 1, WDATA: 32, BREADY: 1) {
  cells {
    aw_channel_Sum0 = m_aw_channel_Sum0();
    write_channel_Sum0 = m_write_channel_Sum0();
    bresp_channel_Sum0 = m_bresp_channel_Sum0();
  }
  wires {

  }
  control {
    seq {
      invoke aw_channel_Sum0(axi_address=axi_address, ARESETn=ARESETn, AWREADY=AWREADY)(AWVALID=AWVALID, AWADDR=AWADDR, AWSIZE=AWSIZE, AWLEN=AWLEN, AWBURST=AWBURST, AWPROT=AWPROT);
      invoke write_channel_Sum0(write_data=write_data, ARESETn=ARESETn, WREADY=WREADY)(WVALID=WVALID, WLAST=WLAST, WDATA=WDATA);
      invoke bresp_channel_Sum0(BVALID=BVALID)(BREADY=BREADY);
    }
  }
}
component axi_dyn_mem_Sum0(@write_together(1) @data addr0: 3, @write_together(1) @go(1) content_en: 1, @write_together(2) write_en: 1, @write_together(2) @data write_data: 32, ARESETn: 1, ARREADY: 1, RVALID: 1, RLAST: 1, RDATA: 32, RRESP: 2, AWREADY: 1, WREADY: 1, BVALID: 1, BRESP: 2) -> (@stable read_data: 32, ARVALID: 1, ARADDR: 64, ARSIZE: 3, ARLEN: 8, ARBURST: 2, ARPROT: 3, RREADY: 1, AWVALID: 1, AWADDR: 64, AWSIZE: 3, AWLEN: 8, AWBURST: 2, AWPROT: 3, WVALID: 1, WLAST: 1, WDATA: 32, BREADY: 1) {
  cells {
    address_translator_Sum0 = address_translator_Sum0();
    read_controller_Sum0 = read_controller_Sum0();
    write_controller_Sum0 = write_controller_Sum0();
  }
  wires {
    address_translator_Sum0.calyx_mem_addr = addr0;
    read_data = read_controller_Sum0.read_data;
  }
  control {
    seq {
      if write_en {
        invoke write_controller_Sum0(axi_address=address_translator_Sum0.axi_address, write_data=write_data, ARESETn=ARESETn, AWREADY=AWREADY, WREADY=WREADY, BVALID=BVALID)(AWVALID=AWVALID, AWADDR=AWADDR, AWSIZE=AWSIZE, AWLEN=AWLEN, AWBURST=AWBURST, AWPROT=AWPROT, WVALID=WVALID, WLAST=WLAST, WDATA=WDATA, BREADY=BREADY);
      } else {
        invoke read_controller_Sum0(axi_address=address_translator_Sum0.axi_address, ARESETn=ARESETn, ARREADY=ARREADY, RVALID=RVALID, RLAST=RLAST, RDATA=RDATA, RRESP=RRESP)(ARVALID=ARVALID, ARADDR=ARADDR, ARSIZE=ARSIZE, ARLEN=ARLEN, ARBURST=ARBURST, ARPROT=ARPROT, RREADY=RREADY, read_data=read_data);
      }
    }
  }
}
component wrapper<"toplevel"=1>(A0_ARESETn: 1, A0_ARREADY: 1, A0_RVALID: 1, A0_RLAST: 1, A0_RDATA: 32, A0_RRESP: 2, A0_AWREADY: 1, A0_WREADY: 1, A0_BVALID: 1, A0_BRESP: 2, A0_RID: 1, B0_ARESETn: 1, B0_ARREADY: 1, B0_RVALID: 1, B0_RLAST: 1, B0_RDATA: 32, B0_RRESP: 2, B0_AWREADY: 1, B0_WREADY: 1, B0_BVALID: 1, B0_BRESP: 2, B0_RID: 1, Sum0_ARESETn: 1, Sum0_ARREADY: 1, Sum0_RVALID: 1, Sum0_RLAST: 1, Sum0_RDATA: 32, Sum0_RRESP: 2, Sum0_AWREADY: 1, Sum0_WREADY: 1, Sum0_BVALID: 1, Sum0_BRESP: 2, Sum0_RID: 1) -> (A0_ARVALID: 1, A0_ARADDR: 64, A0_ARSIZE: 3, A0_ARLEN: 8, A0_ARBURST: 2, A0_RREADY: 1, A0_AWVALID: 1, A0_AWADDR: 64, A0_AWSIZE: 3, A0_AWLEN: 8, A0_AWBURST: 2, A0_AWPROT: 3, A0_WVALID: 1, A0_WLAST: 1, A0_WDATA: 32, A0_BREADY: 1, A0_ARID: 1, A0_AWID: 1, A0_WID: 1, A0_BID: 1, B0_ARVALID: 1, B0_ARADDR: 64, B0_ARSIZE: 3, B0_ARLEN: 8, B0_ARBURST: 2, B0_RREADY: 1, B0_AWVALID: 1, B0_AWADDR: 64, B0_AWSIZE: 3, B0_AWLEN: 8, B0_AWBURST: 2, B0_AWPROT: 3, B0_WVALID: 1, B0_WLAST: 1, B0_WDATA: 32, B0_BREADY: 1, B0_ARID: 1, B0_AWID: 1, B0_WID: 1, B0_BID: 1, Sum0_ARVALID: 1, Sum0_ARADDR: 64, Sum0_ARSIZE: 3, Sum0_ARLEN: 8, Sum0_ARBURST: 2, Sum0_RREADY: 1, Sum0_AWVALID: 1, Sum0_AWADDR: 64, Sum0_AWSIZE: 3, Sum0_AWLEN: 8, Sum0_AWBURST: 2, Sum0_AWPROT: 3, Sum0_WVALID: 1, Sum0_WLAST: 1, Sum0_WDATA: 32, Sum0_BREADY: 1, Sum0_ARID: 1, Sum0_AWID: 1, Sum0_WID: 1, Sum0_BID: 1) {
  cells {
    main_compute = main();
    axi_dyn_mem_A0 = axi_dyn_mem_A0();
    axi_dyn_mem_B0 = axi_dyn_mem_B0();
    axi_dyn_mem_Sum0 = axi_dyn_mem_Sum0();
  }
  wires {
    A0_ARID = 1'd0;
    A0_AWID = 1'd0;
    A0_WID = 1'd0;
    A0_BID = 1'd0;
    axi_dyn_mem_A0.ARESETn = A0_ARESETn;
    axi_dyn_mem_A0.ARREADY = A0_ARREADY;
    axi_dyn_mem_A0.RVALID = A0_RVALID;
    axi_dyn_mem_A0.RLAST = A0_RLAST;
    axi_dyn_mem_A0.RDATA = A0_RDATA;
    axi_dyn_mem_A0.RRESP = A0_RRESP;
    A0_ARVALID = axi_dyn_mem_A0.ARVALID;
    A0_ARADDR = axi_dyn_mem_A0.ARADDR;
    A0_ARSIZE = axi_dyn_mem_A0.ARSIZE;
    A0_ARLEN = axi_dyn_mem_A0.ARLEN;
    A0_ARBURST = axi_dyn_mem_A0.ARBURST;
    A0_RREADY = axi_dyn_mem_A0.RREADY;
    axi_dyn_mem_A0.AWREADY = A0_AWREADY;
    axi_dyn_mem_A0.WREADY = A0_WREADY;
    axi_dyn_mem_A0.BVALID = A0_BVALID;
    A0_AWVALID = axi_dyn_mem_A0.AWVALID;
    A0_AWADDR = axi_dyn_mem_A0.AWADDR;
    A0_AWSIZE = axi_dyn_mem_A0.AWSIZE;
    A0_AWLEN = axi_dyn_mem_A0.AWLEN;
    A0_AWBURST = axi_dyn_mem_A0.AWBURST;
    A0_AWPROT = axi_dyn_mem_A0.AWPROT;
    A0_WVALID = axi_dyn_mem_A0.WVALID;
    A0_WLAST = axi_dyn_mem_A0.WLAST;
    A0_WDATA = axi_dyn_mem_A0.WDATA;
    A0_BREADY = axi_dyn_mem_A0.BREADY;
    B0_ARID = 1'd0;
    B0_AWID = 1'd0;
    B0_WID = 1'd0;
    B0_BID = 1'd0;
    axi_dyn_mem_B0.ARESETn = B0_ARESETn;
    axi_dyn_mem_B0.ARREADY = B0_ARREADY;
    axi_dyn_mem_B0.RVALID = B0_RVALID;
    axi_dyn_mem_B0.RLAST = B0_RLAST;
    axi_dyn_mem_B0.RDATA = B0_RDATA;
    axi_dyn_mem_B0.RRESP = B0_RRESP;
    B0_ARVALID = axi_dyn_mem_B0.ARVALID;
    B0_ARADDR = axi_dyn_mem_B0.ARADDR;
    B0_ARSIZE = axi_dyn_mem_B0.ARSIZE;
    B0_ARLEN = axi_dyn_mem_B0.ARLEN;
    B0_ARBURST = axi_dyn_mem_B0.ARBURST;
    B0_RREADY = axi_dyn_mem_B0.RREADY;
    axi_dyn_mem_B0.AWREADY = B0_AWREADY;
    axi_dyn_mem_B0.WREADY = B0_WREADY;
    axi_dyn_mem_B0.BVALID = B0_BVALID;
    B0_AWVALID = axi_dyn_mem_B0.AWVALID;
    B0_AWADDR = axi_dyn_mem_B0.AWADDR;
    B0_AWSIZE = axi_dyn_mem_B0.AWSIZE;
    B0_AWLEN = axi_dyn_mem_B0.AWLEN;
    B0_AWBURST = axi_dyn_mem_B0.AWBURST;
    B0_AWPROT = axi_dyn_mem_B0.AWPROT;
    B0_WVALID = axi_dyn_mem_B0.WVALID;
    B0_WLAST = axi_dyn_mem_B0.WLAST;
    B0_WDATA = axi_dyn_mem_B0.WDATA;
    B0_BREADY = axi_dyn_mem_B0.BREADY;
    Sum0_ARID = 1'd0;
    Sum0_AWID = 1'd0;
    Sum0_WID = 1'd0;
    Sum0_BID = 1'd0;
    axi_dyn_mem_Sum0.ARESETn = Sum0_ARESETn;
    axi_dyn_mem_Sum0.ARREADY = Sum0_ARREADY;
    axi_dyn_mem_Sum0.RVALID = Sum0_RVALID;
    axi_dyn_mem_Sum0.RLAST = Sum0_RLAST;
    axi_dyn_mem_Sum0.RDATA = Sum0_RDATA;
    axi_dyn_mem_Sum0.RRESP = Sum0_RRESP;
    Sum0_ARVALID = axi_dyn_mem_Sum0.ARVALID;
    Sum0_ARADDR = axi_dyn_mem_Sum0.ARADDR;
    Sum0_ARSIZE = axi_dyn_mem_Sum0.ARSIZE;
    Sum0_ARLEN = axi_dyn_mem_Sum0.ARLEN;
    Sum0_ARBURST = axi_dyn_mem_Sum0.ARBURST;
    Sum0_RREADY = axi_dyn_mem_Sum0.RREADY;
    axi_dyn_mem_Sum0.AWREADY = Sum0_AWREADY;
    axi_dyn_mem_Sum0.WREADY = Sum0_WREADY;
    axi_dyn_mem_Sum0.BVALID = Sum0_BVALID;
    Sum0_AWVALID = axi_dyn_mem_Sum0.AWVALID;
    Sum0_AWADDR = axi_dyn_mem_Sum0.AWADDR;
    Sum0_AWSIZE = axi_dyn_mem_Sum0.AWSIZE;
    Sum0_AWLEN = axi_dyn_mem_Sum0.AWLEN;
    Sum0_AWBURST = axi_dyn_mem_Sum0.AWBURST;
    Sum0_AWPROT = axi_dyn_mem_Sum0.AWPROT;
    Sum0_WVALID = axi_dyn_mem_Sum0.WVALID;
    Sum0_WLAST = axi_dyn_mem_Sum0.WLAST;
    Sum0_WDATA = axi_dyn_mem_Sum0.WDATA;
    Sum0_BREADY = axi_dyn_mem_Sum0.BREADY;
  }
  control {
    invoke main_compute[A0=axi_dyn_mem_A0, B0=axi_dyn_mem_B0, Sum0=axi_dyn_mem_Sum0]()();
  }
}
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    ref A0 = dyn_mem_d1(32, 8, 3);
    A_read0_0 = std_reg(32);
    ref B0 = dyn_mem_d1(32, 8, 3);
    B_read0_0 = std_reg(32);
    ref Sum0 = dyn_mem_d1(32, 8, 3);
    add0 = std_add(32);
    add1 = std_add(4);
    const0 = std_const(4, 0);
    const1 = std_const(4, 7);
    const2 = std_const(4, 1);
    i0 = std_reg(4);
    le0 = std_le(4);
    bit_slice = std_bit_slice(4, 0, 2, 3);
  }
  wires {
    group let0<"static"=1> {
      i0.in = const0.out;
      i0.write_en = 1'd1;
      let0[done] = i0.done;
    }
    group upd0<"static"=2> {
      A_read0_0.write_en = A0.done;
      A0.addr0 = bit_slice.out;
      A0.content_en = 1'd1;
      A_read0_0.in = A0.read_data;
      upd0[done] = A_read0_0.done ? 1'd1;
    }
    group upd1<"static"=2> {
      B_read0_0.write_en = B0.done;
      B0.addr0 = bit_slice.out;
      B0.content_en = 1'd1;
      B_read0_0.in = B0.read_data;
      upd1[done] = B_read0_0.done ? 1'd1;
    }
    group upd2<"static"=1> {
      Sum0.addr0 = bit_slice.out;
      Sum0.content_en = 1'd1;
      Sum0.write_en = 1'd1;
      add0.left = B_read0_0.out;
      add0.right = A_read0_0.out;
      Sum0.write_data = add0.out;
      upd2[done] = Sum0.done ? 1'd1;
    }
    group upd3<"static"=1> {
      i0.write_en = 1'd1;
      add1.left = i0.out;
      add1.right = const2.out;
      i0.in = add1.out;
      upd3[done] = i0.done ? 1'd1;
    }
    comb group cond0 {
      le0.left = i0.out;
      le0.right = const1.out;
    }
    A0.write_en = 1'd0;
    B0.write_en = 1'd0;
    bit_slice.in = i0.out;
  }
  control {
    seq {
      let0;
      while le0.out with cond0 {
        seq {
          par {
            upd0;
            upd1;
          }
          upd2;
          upd3;
        }
      }
    }
  }
}
