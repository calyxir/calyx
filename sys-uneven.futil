import "primitives/core.futil";
import "primitives/binary_operators.futil";
component mac_pe(top: 32, left: 32) -> (out: 32) {
  cells {
    acc = std_reg(32);
    add = std_add(32);
    mul = std_mult_pipe(32);
  }
  wires {
    group do_add {
      add.left = acc.out;
      add.right = mul.out;
      acc.in = add.out;
      acc.write_en = 1'd1;
      do_add[done] = acc.done;
    }
    out = acc.out;
  }
  control {
    seq {
      invoke mul(left=top, right=left)();
      do_add;
    }
  }
}
component main() -> () {
  cells {
    pe_0_0 = mac_pe();
    top_0_0 = std_reg(32);
    left_0_0 = std_reg(32);
    pe_0_1 = mac_pe();
    top_0_1 = std_reg(32);
    left_0_1 = std_reg(32);
    pe_0_2 = mac_pe();
    top_0_2 = std_reg(32);
    left_0_2 = std_reg(32);
    pe_0_3 = mac_pe();
    top_0_3 = std_reg(32);
    left_0_3 = std_reg(32);
    pe_1_0 = mac_pe();
    top_1_0 = std_reg(32);
    left_1_0 = std_reg(32);
    pe_1_1 = mac_pe();
    top_1_1 = std_reg(32);
    left_1_1 = std_reg(32);
    pe_1_2 = mac_pe();
    top_1_2 = std_reg(32);
    left_1_2 = std_reg(32);
    pe_1_3 = mac_pe();
    top_1_3 = std_reg(32);
    left_1_3 = std_reg(32);
    @external t0 = std_mem_d1(32, 3, 2);
    t0_idx = std_reg(2);
    t0_add = std_add(2);
    @external t1 = std_mem_d1(32, 3, 2);
    t1_idx = std_reg(2);
    t1_add = std_add(2);
    @external t2 = std_mem_d1(32, 3, 2);
    t2_idx = std_reg(2);
    t2_add = std_add(2);
    @external t3 = std_mem_d1(32, 3, 2);
    t3_idx = std_reg(2);
    t3_add = std_add(2);
    @external l0 = std_mem_d1(32, 3, 2);
    l0_idx = std_reg(2);
    l0_add = std_add(2);
    @external l1 = std_mem_d1(32, 3, 2);
    l1_idx = std_reg(2);
    l1_add = std_add(2);
    @external out_mem = std_mem_d1(32, 8, 4);
  }
  wires {
    group t0_idx_init {
      t0_idx.in = 2'd3;
      t0_idx.write_en = 1'd1;
      t0_idx_init[done] = t0_idx.done;
    }
    group t0_idx_update {
      t0_add.left = 2'd1;
      t0_add.right = t0_idx.out;
      t0_idx.in = t0_add.out;
      t0_idx.write_en = 1'd1;
      t0_idx_update[done] = t0_idx.done;
    }
    group t0_move {
      t0.addr0 = t0_idx.out;
      top_0_0.in = t0.read_data;
      top_0_0.write_en = 1'd1;
      t0_move[done] = top_0_0.done;
    }
    group t1_idx_init {
      t1_idx.in = 2'd3;
      t1_idx.write_en = 1'd1;
      t1_idx_init[done] = t1_idx.done;
    }
    group t1_idx_update {
      t1_add.left = 2'd1;
      t1_add.right = t1_idx.out;
      t1_idx.in = t1_add.out;
      t1_idx.write_en = 1'd1;
      t1_idx_update[done] = t1_idx.done;
    }
    group t1_move {
      t1.addr0 = t1_idx.out;
      top_0_1.in = t1.read_data;
      top_0_1.write_en = 1'd1;
      t1_move[done] = top_0_1.done;
    }
    group t2_idx_init {
      t2_idx.in = 2'd3;
      t2_idx.write_en = 1'd1;
      t2_idx_init[done] = t2_idx.done;
    }
    group t2_idx_update {
      t2_add.left = 2'd1;
      t2_add.right = t2_idx.out;
      t2_idx.in = t2_add.out;
      t2_idx.write_en = 1'd1;
      t2_idx_update[done] = t2_idx.done;
    }
    group t2_move {
      t2.addr0 = t2_idx.out;
      top_0_2.in = t2.read_data;
      top_0_2.write_en = 1'd1;
      t2_move[done] = top_0_2.done;
    }
    group t3_idx_init {
      t3_idx.in = 2'd3;
      t3_idx.write_en = 1'd1;
      t3_idx_init[done] = t3_idx.done;
    }
    group t3_idx_update {
      t3_add.left = 2'd1;
      t3_add.right = t3_idx.out;
      t3_idx.in = t3_add.out;
      t3_idx.write_en = 1'd1;
      t3_idx_update[done] = t3_idx.done;
    }
    group t3_move {
      t3.addr0 = t3_idx.out;
      top_0_3.in = t3.read_data;
      top_0_3.write_en = 1'd1;
      t3_move[done] = top_0_3.done;
    }
    group l0_idx_init {
      l0_idx.in = 2'd3;
      l0_idx.write_en = 1'd1;
      l0_idx_init[done] = l0_idx.done;
    }
    group l0_idx_update {
      l0_add.left = 2'd1;
      l0_add.right = l0_idx.out;
      l0_idx.in = l0_add.out;
      l0_idx.write_en = 1'd1;
      l0_idx_update[done] = l0_idx.done;
    }
    group l0_move {
      l0.addr0 = l0_idx.out;
      left_0_0.in = l0.read_data;
      left_0_0.write_en = 1'd1;
      l0_move[done] = left_0_0.done;
    }
    group l1_idx_init {
      l1_idx.in = 2'd3;
      l1_idx.write_en = 1'd1;
      l1_idx_init[done] = l1_idx.done;
    }
    group l1_idx_update {
      l1_add.left = 2'd1;
      l1_add.right = l1_idx.out;
      l1_idx.in = l1_add.out;
      l1_idx.write_en = 1'd1;
      l1_idx_update[done] = l1_idx.done;
    }
    group l1_move {
      l1.addr0 = l1_idx.out;
      left_1_0.in = l1.read_data;
      left_1_0.write_en = 1'd1;
      l1_move[done] = left_1_0.done;
    }
    group pe_0_0_right_move {
      left_0_1.in = left_0_0.out;
      left_0_1.write_en = 1'd1;
      pe_0_0_right_move[done] = left_0_1.done;
    }
    group pe_0_0_down_move {
      top_1_0.in = top_0_0.out;
      top_1_0.write_en = 1'd1;
      pe_0_0_down_move[done] = top_1_0.done;
    }
    group pe_0_0_out_write {
      out_mem.addr0 = 4'd0;
      out_mem.write_data = pe_0_0.out;
      out_mem.write_en = 1'd1;
      pe_0_0_out_write[done] = out_mem.done;
    }
    group pe_0_1_right_move {
      left_0_2.in = left_0_1.out;
      left_0_2.write_en = 1'd1;
      pe_0_1_right_move[done] = left_0_2.done;
    }
    group pe_0_1_down_move {
      top_1_1.in = top_0_1.out;
      top_1_1.write_en = 1'd1;
      pe_0_1_down_move[done] = top_1_1.done;
    }
    group pe_0_1_out_write {
      out_mem.addr0 = 4'd1;
      out_mem.write_data = pe_0_1.out;
      out_mem.write_en = 1'd1;
      pe_0_1_out_write[done] = out_mem.done;
    }
    group pe_0_2_right_move {
      left_0_3.in = left_0_2.out;
      left_0_3.write_en = 1'd1;
      pe_0_2_right_move[done] = left_0_3.done;
    }
    group pe_0_2_down_move {
      top_1_2.in = top_0_2.out;
      top_1_2.write_en = 1'd1;
      pe_0_2_down_move[done] = top_1_2.done;
    }
    group pe_0_2_out_write {
      out_mem.addr0 = 4'd2;
      out_mem.write_data = pe_0_2.out;
      out_mem.write_en = 1'd1;
      pe_0_2_out_write[done] = out_mem.done;
    }
    group pe_0_3_down_move {
      top_1_3.in = top_0_3.out;
      top_1_3.write_en = 1'd1;
      pe_0_3_down_move[done] = top_1_3.done;
    }
    group pe_0_3_out_write {
      out_mem.addr0 = 4'd3;
      out_mem.write_data = pe_0_3.out;
      out_mem.write_en = 1'd1;
      pe_0_3_out_write[done] = out_mem.done;
    }
    group pe_1_0_right_move {
      left_1_1.in = left_1_0.out;
      left_1_1.write_en = 1'd1;
      pe_1_0_right_move[done] = left_1_1.done;
    }
    group pe_1_0_out_write {
      out_mem.addr0 = 4'd4;
      out_mem.write_data = pe_1_0.out;
      out_mem.write_en = 1'd1;
      pe_1_0_out_write[done] = out_mem.done;
    }
    group pe_1_1_right_move {
      left_1_2.in = left_1_1.out;
      left_1_2.write_en = 1'd1;
      pe_1_1_right_move[done] = left_1_2.done;
    }
    group pe_1_1_out_write {
      out_mem.addr0 = 4'd5;
      out_mem.write_data = pe_1_1.out;
      out_mem.write_en = 1'd1;
      pe_1_1_out_write[done] = out_mem.done;
    }
    group pe_1_2_right_move {
      left_1_3.in = left_1_2.out;
      left_1_3.write_en = 1'd1;
      pe_1_2_right_move[done] = left_1_3.done;
    }
    group pe_1_2_out_write {
      out_mem.addr0 = 4'd6;
      out_mem.write_data = pe_1_2.out;
      out_mem.write_en = 1'd1;
      pe_1_2_out_write[done] = out_mem.done;
    }
    group pe_1_3_out_write {
      out_mem.addr0 = 4'd7;
      out_mem.write_data = pe_1_3.out;
      out_mem.write_en = 1'd1;
      pe_1_3_out_write[done] = out_mem.done;
    }
  }
  control {
    seq {
      par {
        t0_idx_init;
        t1_idx_init;
        t2_idx_init;
        t3_idx_init;
        l0_idx_init;
        l1_idx_init;
      }
      par {
        t0_idx_update;
        l0_idx_update;
      }
      // 0 iteration 
      par {
        t0_move;
        l0_move;
      }
      par {
        t0_idx_update;
        l0_idx_update;
        t1_idx_update;
        l1_idx_update;
        @pos(0) invoke pe_0_0(top=top_0_0.out, left=left_0_0.out)();
      }
      // 1 iteration 
      par {
        t0_move;
        t1_move;
        pe_0_0_down_move;
        l0_move;
        pe_0_0_right_move;
        l1_move;
      }
      par {
        t0_idx_update;
        l0_idx_update;
        t1_idx_update;
        t2_idx_update;
        l1_idx_update;
        @pos(1) invoke pe_0_0(top=top_0_0.out, left=left_0_0.out)();
        @pos(2) invoke pe_0_1(top=top_0_1.out, left=left_0_1.out)();
        @pos(3) invoke pe_1_0(top=top_1_0.out, left=left_1_0.out)();
      }
      // 2 iteration 
      par {
        t0_move;
        t1_move;
        t2_move;
        pe_0_0_down_move;
        pe_0_1_down_move;
        l0_move;
        pe_0_0_right_move;
        pe_0_1_right_move;
        l1_move;
        pe_1_0_right_move;
      }
      par {
        t1_idx_update;
        t2_idx_update;
        t3_idx_update;
        l1_idx_update;
        @pos(4) invoke pe_0_0(top=top_0_0.out, left=left_0_0.out)();
        @pos(5) invoke pe_0_1(top=top_0_1.out, left=left_0_1.out)();
        @pos(6) invoke pe_0_2(top=top_0_2.out, left=left_0_2.out)();
        @pos(7) invoke pe_1_0(top=top_1_0.out, left=left_1_0.out)();
        @pos(8) invoke pe_1_1(top=top_1_1.out, left=left_1_1.out)();
      }
      // 3 iteration 
      par {
        t1_move;
        t2_move;
        t3_move;
        pe_0_0_down_move;
        pe_0_1_down_move;
        pe_0_2_down_move;
        pe_0_0_right_move;
        pe_0_1_right_move;
        pe_0_2_right_move;
        l1_move;
        pe_1_0_right_move;
        pe_1_1_right_move;
      }
      par {
        t2_idx_update;
        t3_idx_update;
        @pos(9) invoke pe_0_1(top=top_0_1.out, left=left_0_1.out)();
        @pos(10) invoke pe_0_2(top=top_0_2.out, left=left_0_2.out)();
        @pos(11) invoke pe_0_3(top=top_0_3.out, left=left_0_3.out)();
        @pos(12) invoke pe_1_0(top=top_1_0.out, left=left_1_0.out)();
        @pos(13) invoke pe_1_1(top=top_1_1.out, left=left_1_1.out)();
        @pos(14) invoke pe_1_2(top=top_1_2.out, left=left_1_2.out)();
      }
      // 4 iteration 
      par {
        t2_move;
        t3_move;
        pe_0_1_down_move;
        pe_0_2_down_move;
        pe_0_3_down_move;
        pe_0_1_right_move;
        pe_0_2_right_move;
        pe_1_0_right_move;
        pe_1_1_right_move;
        pe_1_2_right_move;
      }
      par {
        t3_idx_update;
        @pos(15) invoke pe_0_2(top=top_0_2.out, left=left_0_2.out)();
        @pos(16) invoke pe_0_3(top=top_0_3.out, left=left_0_3.out)();
        @pos(17) invoke pe_1_1(top=top_1_1.out, left=left_1_1.out)();
        @pos(18) invoke pe_1_2(top=top_1_2.out, left=left_1_2.out)();
        @pos(19) invoke pe_1_3(top=top_1_3.out, left=left_1_3.out)();
      }
      // 5 iteration 
      par {
        t3_move;
        pe_0_2_down_move;
        pe_0_3_down_move;
        pe_0_2_right_move;
        pe_1_1_right_move;
        pe_1_2_right_move;
      }
      par {
        @pos(20) invoke pe_0_3(top=top_0_3.out, left=left_0_3.out)();
        @pos(21) invoke pe_1_2(top=top_1_2.out, left=left_1_2.out)();
        @pos(22) invoke pe_1_3(top=top_1_3.out, left=left_1_3.out)();
      }
      // 6 iteration 
      par {
        pe_0_3_down_move;
        pe_1_2_right_move;
      }
      par {
        @pos(23) invoke pe_1_3(top=top_1_3.out, left=left_1_3.out)();
      }
      seq {
        pe_0_0_out_write;
        pe_0_1_out_write;
        pe_0_2_out_write;
        pe_0_3_out_write;
        pe_1_0_out_write;
        pe_1_1_out_write;
        pe_1_2_out_write;
        pe_1_3_out_write;
      }
    }
  }
}
metadata #{
0: pe_0_0 running. Iteration 0
1: pe_0_0 running. Iteration 1
2: pe_0_1 running. Iteration 1
3: pe_1_0 running. Iteration 1
4: pe_0_0 running. Iteration 2
5: pe_0_1 running. Iteration 2
6: pe_0_2 running. Iteration 2
7: pe_1_0 running. Iteration 2
8: pe_1_1 running. Iteration 2
9: pe_0_1 running. Iteration 3
10: pe_0_2 running. Iteration 3
11: pe_0_3 running. Iteration 3
12: pe_1_0 running. Iteration 3
13: pe_1_1 running. Iteration 3
14: pe_1_2 running. Iteration 3
15: pe_0_2 running. Iteration 4
16: pe_0_3 running. Iteration 4
17: pe_1_1 running. Iteration 4
18: pe_1_2 running. Iteration 4
19: pe_1_3 running. Iteration 4
20: pe_0_3 running. Iteration 5
21: pe_1_2 running. Iteration 5
22: pe_1_3 running. Iteration 5
23: pe_1_3 running. Iteration 6
}#
