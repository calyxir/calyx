import "primitives/core.futil";
import "primitives/binary_operators.futil";
import "primitives/memories/comb.futil";
component adder(val1: 32, val2: 32) -> (out: 32) {
  cells {
    sum = std_reg(32);
    add_1 = std_add(32);
  }
  wires {
    group compute_sum {
      add_1.left = val1;
      add_1.right = val2;
      sum.write_en = 1'd1;
      sum.in = add_1.out;
      compute_sum[done] = sum.done;
    }
    out = sum.out;
  }
  control {
    compute_sum;
  }
}
component abs_diff(val1: 32, val2: 32) -> (out: 32) {
  cells {
    diff = std_reg(32);
    ge = std_ge(32);
    ge_reg = std_reg(1);
    sub_1 = std_sub(32);
    sub_2 = std_sub(32);
    lt_3 = std_lt(32);
  }
  wires {
    group sub_1_group {
      sub_1.left = val1;
      sub_1.right = val2;
      diff.write_en = 1'd1;
      diff.in = sub_1.out;
      sub_1_group[done] = diff.done;
    }
    group sub_2_group {
      sub_2.left = val2;
      sub_2.right = val1;
      diff.write_en = 1'd1;
      diff.in = sub_2.out;
      sub_2_group[done] = diff.done;
    }
    group val1_ge_val2 {
      ge.left = val1;
      ge.right = val2;
      ge_reg.write_en = 1'd1;
      ge_reg.in = ge.out;
      val1_ge_val2[done] = ge_reg.done;
    }
    comb group lt_3_group {
      lt_3.left = val2;
      lt_3.right = val1;
    }
    out = diff.out;
  }
  control {
    par {
      seq {
        val1_ge_val2;
        if ge_reg.out {
          sub_1_group;
        } else {
          sub_2_group;
        }
      }
      if lt_3.out with lt_3_group {
        sub_2_group;
      } else {
        sub_1_group;
      }
    }
  }
}
component mux(val1: 32, val2: 32, sel: 1) -> (out: 32) {
  cells {
    mux = std_reg(32);
    eq_1 = std_eq(1);
    add_2 = std_add(32);
    abs_diff = abs_diff();
  }
  wires {
    comb group eq_1_group {
      eq_1.left = sel;
      eq_1.right = 1'd0;
    }
    group add_2_group {
      add_2.left = val1;
      add_2.right = val2;
      mux.write_en = 1'd1;
      mux.in = add_2.out;
      add_2_group[done] = mux.done;
    }
    group compute_diff {
      abs_diff.val1 = val1;
      abs_diff.val2 = val2;
      abs_diff.go = 1'd1;
      mux.write_en = abs_diff.done;
      mux.in = abs_diff.out;
      compute_diff[done] = mux.done;
    }
    out = mux.out;
  }
  control {
    if eq_1.out with eq_1_group {
      add_2_group;
    } else {
      compute_diff;
    }
  }
}
component map() -> () {
  cells {
    ref mem = comb_mem_d1(32, 10, 32);
    i = std_reg(8);
    i_incr = std_add(8);
    add_1 = std_add(32);
    lt_2 = std_lt(8);
  }
  wires {
    group i_incr_group {
      i_incr.left = i.out;
      i_incr.right = 8'd1;
      i.write_en = 1'd1;
      i.in = i_incr.out;
      i_incr_group[done] = i.done;
    }
    comb group lt_2_group {
      lt_2.left = i.out;
      lt_2.right = 8'd10;
    }
    group add_at_position_i {
      mem.addr0 = i.out;
      add_1.left = mem.read_data;
      add_1.right = 32'd42;
      mem.write_en = add_1.done ? 1'd1;
      mem.write_data = add_1.out;
      add_at_position_i[done] = mem.done;
    }
  }
  control {
    while lt_2.out with lt_2_group {
      seq {
        add_at_position_i;
        i_incr_group;
      }
    }
  }
}
component main() -> () {
  cells {
    map = map();
    @external mem = comb_mem_d1(32, 10, 32);
  }
  wires {

  }
  control {
    seq {
      invoke map[mem=mem]()();
    }
  }
}
