import "primitives/core.futil";
component wrap(i: 32, j: 32) -> (out: 32) {
  cells {
    ref mem1 = std_mem_d1(32, 4, 32);
    ref mem2 = std_mem_d1(32, 4, 32);
    eq0 = std_eq(32);
    eq1 = std_eq(32);
  }
  wires {
    comb group i_eq_0 {
      eq0.left = i;
      eq0.right = 32'd0;
    }
    comb group i_eq_1 {
      eq1.left = i;
      eq1.right = 32'd1;
    }
    group emit_from_mem1 {
      mem1.addr0 = j;
      out = mem1.read_data;
      emit_from_mem1[done] = mem1.done;
    }
    group emit_from_mem2 {
      mem2.addr0 = j;
      out = mem2.read_data;
      emit_from_mem2[done] = mem2.done;
    }
  }
  control {
    par {
      if eq0.out with i_eq_0 {
        emit_from_mem1;
      }
      if eq1.out with i_eq_1 {
        emit_from_mem2;
      }
    } 
  }
}
component main() -> () {
  cells {
    A = std_mem_d1(32, 4, 32);
    B = std_mem_d1(32, 4, 32);
    together = wrap();
    out = std_reg(32);
  }
  wires {

  }
  control {
    invoke together[mem1 = A, mem2 = B](i=32'd1, j=32'd3)();
    // out.in = together.out.out
    // or something like that
  }
}
