import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/binary_operators.futil";
component main() -> () {
  cells {
    @external mem = comb_mem_d1(32, 1, 1);
    r = std_reg(32);
    ans = std_reg(32);
    id_1 = identity();
    id_2 = identity();
    id_3 = identity();
    id_4 = identity();
    id_5 = identity();
    r_out_eq_4_1 = std_eq(32);
    r_out_eq_3_2 = std_eq(32);
    r_out_eq_2_3 = std_eq(32);
    r_out_eq_1_4 = std_eq(32);
    r_out_eq_0_5 = std_eq(32);
  }
  wires {
    group read {
      mem.addr0 = 1'd0;
      r.in = mem.read_data;
      r.write_en = 1'd1;
      read[done] = r.done;
    }
    group write {
      mem.addr0 = 1'd0;
      mem.write_en = 1'd1;
      mem.write_data = r.out;
      write[done] = mem.done;
    }
    r_out_eq_4_1.left = r.out;
    r_out_eq_4_1.right = 32'd4;
    r_out_eq_3_2.left = r.out;
    r_out_eq_3_2.right = 32'd3;
    r_out_eq_2_3.left = r.out;
    r_out_eq_2_3.right = 32'd2;
    r_out_eq_1_4.left = r.out;
    r_out_eq_1_4.right = 32'd1;
    r_out_eq_0_5.left = r.out;
    r_out_eq_0_5.right = 32'd0;
  }
  control {
    seq {
      read;
      if r_out_eq_0_5.out {
        invoke id_1(in_1=r.out)(out=ans.in);
      } else {
        if r_out_eq_1_4.out {
          invoke id_2(in_1=r.out)(out=ans.in);
        } else {
          if r_out_eq_2_3.out {
            invoke id_3(in_1=r.out)(out=ans.in);
          } else {
            if r_out_eq_3_2.out {
              invoke id_4(in_1=r.out)(out=ans.in);
            } else {
              if r_out_eq_4_1.out {
                invoke id_5(in_1=r.out)(out=ans.in);
              }
            }
          }
        }
      }
      write;
    }
  }
}
component identity(in_1: 32) -> (out: 32) {
  cells {
    r = std_reg(32);
  }
  wires {
    group save {
      r.in = in_1;
      r.write_en = 1'd1;
      save[done] = r.done;
    }
    out = r.out;
  }
  control {
    save;
  }
}
