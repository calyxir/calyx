import "primitives/core.futil";

component tree(leaf1: 32, leaf2: 32, leaf3: 32, leaf4: 32) -> (sum: 32) {
  // Creates a reduction tree with four leaves, and adds the leaves' inputs.
  //
  //            sum
  //           /   \
  //   left_node    right_node
  //   /       \   /         \
  // leaf1  leaf2  leaf3  leaf4

  cells {
    root = std_reg(32);
    left_node = std_reg(32);
    right_node = std_reg(32);

    add1 = std_add(32);
    add2 = std_add(32);
  }

  wires {
    group add_l1_l2 {
      // Adds leaf1 and leaf2, then puts the result in left_node.
      add1.left = leaf1;
      add1.right = leaf2;
      left_node.write_en = 1'b1;
      left_node.in = add1.out;
      add_l1_l2[done] = left_node.done;
    }
    group add_l3_l4 {
      // Adds leaf3 and leaf4, then puts the result in left_node.
      add2.left = leaf3;
      add2.right = leaf4;
      right_node.write_en = 1'b1;
      right_node.in = add2.out;
      add_l3_l4[done] = right_node.done;
    }
    group add_left_right_node {
      // Adds left_node and right_node, then puts the result in root.
      add1.left = left_node.out;
      add1.right = right_node.out;
      root.write_en = 1'b1;
      root.in = add1.out;
      add_left_right_node[done] = root.done;
    }
    // Continuous assignment of answer to `sum`.
    sum = root.out;
  }

  control {
    // Orchestrate the above straightforwardly.
    seq {
      par {
        add_l1_l2;
        add_l3_l4;
      }
      add_left_right_node;
    }
  }
}

component main() -> () {

  cells {
    // The four memories that will be driven by the `.data` file.
    @external A = std_mem_d1(32, 4, 32);
    @external B = std_mem_d1(32, 4, 32);
    @external C = std_mem_d1(32, 4, 32);
    @external D = std_mem_d1(32, 4, 32);

    // We will store the final answer here.
    // I'm using a memory of size 1 and not a reg because
    // IDK how to drive a register in the data file.
    @external sum = std_mem_d1(32, 1, 32);

    sum_col1 = std_reg(32);
    sum_col2 = std_reg(32);
    sum_col3 = std_reg(32);
    sum_col4 = std_reg(32);

    // Preparing to invoke the `tree` component.
    tree1 = tree();
    tree2 = tree();
    tree3 = tree();
    tree4 = tree();
  }

  wires {
  }

  control {
    par {
      // todo
    }
  }
}