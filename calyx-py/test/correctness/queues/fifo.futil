import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component fifo(cmd: 2, value: 32) -> () {
  cells {
    mem = seq_mem_d1(32, 16, 4);
    reg_1 = std_reg(4);
    reg_2 = std_reg(4);
    ref ans = std_reg(32);
    ref err = std_reg(1);
    reg_3 = std_reg(32);
    eq_4 = std_eq(32);
    reg_2_incr_1_5 = std_add(4);
    reg_3_decr_1_6 = std_sub(32);
    eq_7 = std_eq(32);
    eq_8 = std_eq(32);
    reg_1_incr_1_9 = std_add(4);
    reg_3_incr_1_10 = std_add(32);
    case_eq_0 = std_eq(2);
    case_eq_1 = std_eq(2);
    case_eq_2 = std_eq(2);
    case_eq_3 = std_eq(2);
  }
  wires {
    group raise_err {
      err.in = 1'd1;
      err.write_en = 1'd1;
      raise_err[done] = err.done;
    }
    comb group eq_4_group {
      eq_4.left = reg_3.out;
      eq_4.right = 32'd0;
    }
    group read_payload_from_mem_pop {
      mem.addr0 = reg_2.out;
      mem.content_en = 1'd1;
      ans.write_en = mem.done ? 1'd1;
      ans.in = mem.done ? mem.read_data;
      read_payload_from_mem_pop[done] = ans.done;
    }
    group reg_2_incr_1_5_group {
      reg_2_incr_1_5.left = reg_2.out;
      reg_2_incr_1_5.right = 4'd1;
      reg_2.write_en = 1'd1;
      reg_2.in = reg_2_incr_1_5.out;
      reg_2_incr_1_5_group[done] = reg_2.done;
    }
    group reg_3_decr_1_6_group {
      reg_3_decr_1_6.left = reg_3.out;
      reg_3_decr_1_6.right = 32'd1;
      reg_3.write_en = 1'd1;
      reg_3.in = reg_3_decr_1_6.out;
      reg_3_decr_1_6_group[done] = reg_3.done;
    }
    comb group eq_7_group {
      eq_7.left = reg_3.out;
      eq_7.right = 32'd0;
    }
    group read_payload_from_mem_peek {
      mem.addr0 = reg_2.out;
      mem.content_en = 1'd1;
      ans.write_en = mem.done ? 1'd1;
      ans.in = mem.done ? mem.read_data;
      read_payload_from_mem_peek[done] = ans.done;
    }
    comb group eq_8_group {
      eq_8.left = reg_3.out;
      eq_8.right = 32'd16;
    }
    group write_payload_to_mem {
      mem.addr0 = reg_1.out;
      mem.write_en = 1'd1;
      mem.write_data = value;
      write_payload_to_mem[done] = mem.done;
      mem.content_en = 1'd1;
    }
    group reg_1_incr_1_9_group {
      reg_1_incr_1_9.left = reg_1.out;
      reg_1_incr_1_9.right = 4'd1;
      reg_1.write_en = 1'd1;
      reg_1.in = reg_1_incr_1_9.out;
      reg_1_incr_1_9_group[done] = reg_1.done;
    }
    group reg_3_incr_1_10_group {
      reg_3_incr_1_10.left = reg_3.out;
      reg_3_incr_1_10.right = 32'd1;
      reg_3.write_en = 1'd1;
      reg_3.in = reg_3_incr_1_10.out;
      reg_3_incr_1_10_group[done] = reg_3.done;
    }
    case_eq_0.left = cmd;
    case_eq_0.right = 2'd0;
    case_eq_1.left = cmd;
    case_eq_1.right = 2'd1;
    case_eq_2.left = cmd;
    case_eq_2.right = 2'd2;
    case_eq_3.left = cmd;
    case_eq_3.right = 2'd3;
  }
  control {
    par {

    }
  }
}
component main() -> () {
  cells {
    dataplane = dataplane();
    reg_1 = std_reg(1);
    reg_2 = std_reg(32);
    reg_3 = std_reg(1);
    @external commands = seq_mem_d1(2, 20000, 32);
    @external values = seq_mem_d1(32, 20000, 32);
    @external ans_mem = seq_mem_d1(32, 20000, 32);
    reg_4 = std_reg(32);
    reg_5 = std_reg(32);
    and_6 = std_and(1);
    lt_7 = std_lt(32);
    not_8 = std_not(1);
    neq_9 = std_neq(32);
    reg_5_incr_1_10 = std_add(32);
    reg_4_incr_1_11 = std_add(32);
  }
  wires {
    comb group Compute_keep_looping {
      lt_7.left = reg_4.out;
      lt_7.right = 32'd20000;
      not_8.in = reg_3.out;
      and_6.left = lt_7.out;
      and_6.right = not_8.out;
    }
    group lower_has_ans {
      reg_1.in = 1'd0;
      reg_1.write_en = 1'd1;
      lower_has_ans[done] = reg_1.done;
    }
    comb group neq_9_group {
      neq_9.left = reg_2.out;
      neq_9.right = 32'd0;
    }
    group write_ans {
      ans_mem.addr0 = reg_5.out;
      ans_mem.write_en = 1'd1;
      ans_mem.write_data = reg_2.out;
      write_ans[done] = ans_mem.done;
      ans_mem.content_en = 1'd1;
    }
    group reg_5_incr_1_10_group {
      reg_5_incr_1_10.left = reg_5.out;
      reg_5_incr_1_10.right = 32'd1;
      reg_5.write_en = 1'd1;
      reg_5.in = reg_5_incr_1_10.out;
      reg_5_incr_1_10_group[done] = reg_5.done;
    }
    group reg_4_incr_1_11_group {
      reg_4_incr_1_11.left = reg_4.out;
      reg_4_incr_1_11.right = 32'd1;
      reg_4.write_en = 1'd1;
      reg_4.in = reg_4_incr_1_11.out;
      reg_4_incr_1_11_group[done] = reg_4.done;
    }
  }
  control {
    while and_6.out with Compute_keep_looping {
      seq {
        lower_has_ans;
        invoke dataplane[commands=commands, values=values, has_ans=reg_1, component_ans=reg_2, component_err=reg_3]()();
        if reg_1.out {
          if neq_9.out with neq_9_group {
            seq {
              write_ans;
              reg_5_incr_1_10_group;
            }
          }
        }

        reg_4_incr_1_11_group;
      }
    }
  }
}
component dataplane() -> () {
  cells {
    myqueue = fifo();
    ref commands = seq_mem_d1(2, 20000, 32);
    ref values = seq_mem_d1(32, 20000, 32);
    ref has_ans = std_reg(1);
    ref component_ans = std_reg(32);
    ref component_err = std_reg(1);
    reg_1 = std_reg(32);
    reg_2 = std_reg(2);
    reg_3 = std_reg(32);
    not_4 = std_not(1);
    le_5 = std_le(2);
    reg_1_incr_1_6 = std_add(32);
  }
  wires {
    group write_cmd {
      commands.addr0 = reg_1.out;
      commands.content_en = 1'd1;
      reg_2.write_en = commands.done ? 1'd1;
      reg_2.in = commands.done ? commands.read_data;
      write_cmd[done] = reg_2.done;
    }
    group write_value {
      values.addr0 = reg_1.out;
      values.content_en = 1'd1;
      reg_3.write_en = values.done ? 1'd1;
      reg_3.in = values.done ? values.read_data;
      write_value[done] = reg_3.done;
    }
    comb group not_4_group {
      not_4.in = component_err.out;
    }
    group le_5_group {
      le_5.left = reg_2.out;
      le_5.right = 2'd1;
      has_ans.write_en = 1'd1;
      has_ans.in = le_5.out;
      le_5_group[done] = has_ans.done;
    }
    group reg_1_incr_1_6_group {
      reg_1_incr_1_6.left = reg_1.out;
      reg_1_incr_1_6.right = 32'd1;
      reg_1.write_en = 1'd1;
      reg_1.in = reg_1_incr_1_6.out;
      reg_1_incr_1_6_group[done] = reg_1.done;
    }
    group lower_err {
      component_err.in = 1'd0;
      component_err.write_en = 1'd1;
      lower_err[done] = component_err.done;
    }
  }
  control {
    seq {
      write_cmd;
      write_value;
      invoke myqueue[ans=component_ans, err=component_err](cmd=reg_2.out, value=reg_3.out)();
      if not_4.out with not_4_group {
        seq {
          le_5_group;
        }
      }
      reg_1_incr_1_6_group;
      lower_err;
    }
  }
}
