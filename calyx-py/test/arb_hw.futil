import "primitives/core.futil";
component wrap(i: 32, j: 32) -> () {
  cells {
    ref mem1 = std_mem_d1(32, 4, 32);
    ref mem2 = std_mem_d1(32, 4, 32);
    ref ans = std_reg(32);
    eq0 = std_eq(32);
    eq1 = std_eq(32);
  }
  wires {
    comb group i_eq_0 {
      eq0.left = i;
      eq0.right = 32'd0;
    }
    comb group i_eq_1 {
      eq1.left = i;
      eq1.right = 32'd1;
    }
    group emit_from_mem1 {
      mem1.addr0 = j;
      ans.write_en = 1'd1;
      ans.in = mem1.read_data;
      emit_from_mem1[done] = ans.done;
    }
    group emit_from_mem2 {
      mem2.addr0 = j;
      ans.write_en = 1'd1;
      ans.in = mem2.read_data;
      emit_from_mem2[done] = ans.done;
    }
  }
  control {
    par {
      if eq0.out with i_eq_0 {
        emit_from_mem1;
      }
      if eq1.out with i_eq_1 {
        emit_from_mem2;
      }
    } 
  }
}
component main() -> () {
  cells {
    @external A = std_mem_d1(32, 4, 32);
    @external B = std_mem_d1(32, 4, 32);
    @external out = std_reg(32);
    one = std_const(32, 1);
    three = std_const(32, 3);
    together = wrap();
  }
  wires {
  }
  control {
    seq {
      invoke together[mem1=A, mem2=B, ans=out](i=one.out, j=three.out)();
    }
  }
}

