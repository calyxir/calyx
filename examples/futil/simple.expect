import "primitives/core.futil";
import "primitives/binary_operators.futil";
component main(@go @static(6) go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    const0 = std_const(32, 4);
    const1 = std_const(32, 5);
    add = std_add(32);
    mult = std_mult_pipe(32);
    reg0 = std_reg(32);
    @generated comb_reg = std_reg(32);
    @generated fsm = std_reg(3);
    @generated comb_invoke0_go = std_wire(1);
    @generated comb_invoke0_done = std_wire(1);
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
    @generated invoke1_go = std_wire(1);
    @generated invoke1_done = std_wire(1);
    @generated invoke2_go = std_wire(1);
    @generated invoke2_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    done = tdcc_done.out ? 1'd1;
    add.left = comb_invoke0_go.out ? const0.out;
    add.right = comb_invoke0_go.out ? const1.out;
    comb_invoke0_done.in = comb_reg.done ? 1'd1;
    comb_invoke0_go.in = !comb_invoke0_done.out & fsm.out == 3'd0 & tdcc_go.out ? 1'd1;
    comb_reg.clk = clk;
    comb_reg.in = comb_invoke0_go.out ? add.out;
    comb_reg.reset = reset;
    comb_reg.write_en = comb_invoke0_go.out ? 1'd1;
    fsm.clk = clk;
    fsm.in = fsm.out == 3'd4 ? 3'd0;
    fsm.in = fsm.out == 3'd0 & comb_invoke0_done.out & tdcc_go.out ? 3'd1;
    fsm.in = fsm.out == 3'd1 & invoke0_done.out & tdcc_go.out ? 3'd2;
    fsm.in = fsm.out == 3'd2 & invoke1_done.out & tdcc_go.out ? 3'd3;
    fsm.in = fsm.out == 3'd3 & invoke2_done.out & tdcc_go.out ? 3'd4;
    fsm.reset = reset;
    fsm.write_en = fsm.out == 3'd4 | fsm.out == 3'd0 & comb_invoke0_done.out & tdcc_go.out | fsm.out == 3'd1 & invoke0_done.out & tdcc_go.out | fsm.out == 3'd2 & invoke1_done.out & tdcc_go.out | fsm.out == 3'd3 & invoke2_done.out & tdcc_go.out ? 1'd1;
    invoke0_done.in = reg0.done;
    invoke0_go.in = !invoke0_done.out & fsm.out == 3'd1 & tdcc_go.out ? 1'd1;
    invoke1_done.in = mult.done;
    invoke1_go.in = !invoke1_done.out & fsm.out == 3'd2 & tdcc_go.out ? 1'd1;
    invoke2_done.in = reg0.done;
    invoke2_go.in = !invoke2_done.out & fsm.out == 3'd3 & tdcc_go.out ? 1'd1;
    mult.clk = clk;
    mult.go = invoke1_go.out ? 1'd1;
    mult.left = invoke1_go.out ? const0.out;
    mult.reset = reset;
    mult.right = invoke1_go.out ? const1.out;
    reg0.clk = clk;
    reg0.in = invoke0_go.out ? comb_reg.out;
    reg0.in = invoke2_go.out ? mult.out;
    reg0.reset = reset;
    reg0.write_en = invoke0_go.out | invoke2_go.out ? 1'd1;
    tdcc_done.in = fsm.out == 3'd4 ? 1'd1;
    tdcc_go.in = go;
  }

  control {}
}
