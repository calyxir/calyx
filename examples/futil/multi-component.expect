import "primitives/core.futil";
static<1> component identity<"state_share"=1>(in: 32, @go go: 1, @clk clk: 1, @reset reset: 1) -> (out: 32, @done done: 1) {
  cells {
    @data r = std_reg(32);
    @generated fsm = std_reg(1);
    @generated ud = undef(1);
    @generated adder = std_add(1);
    @generated signal_reg = std_reg(1);
    @generated early_reset_invoke00_go = std_wire(1);
    @generated early_reset_invoke00_done = std_wire(1);
    @generated wrapper_early_reset_invoke00_go = std_wire(1);
    @generated wrapper_early_reset_invoke00_done = std_wire(1);
  }
  wires {
    done = wrapper_early_reset_invoke00_done.out ? 1'd1;
    out = r.out;
    fsm.write_en = early_reset_invoke00_go.out ? 1'd1;
    fsm.clk = clk;
    fsm.reset = reset;
    fsm.in = fsm.out != 1'd0 & early_reset_invoke00_go.out ? adder.out;
    fsm.in = fsm.out == 1'd0 & early_reset_invoke00_go.out ? 1'd0;
    adder.left = early_reset_invoke00_go.out ? fsm.out;
    adder.right = early_reset_invoke00_go.out ? 1'd1;
    r.write_en = early_reset_invoke00_go.out ? 1'd1;
    r.clk = clk;
    r.reset = reset;
    r.in = early_reset_invoke00_go.out ? in;
    early_reset_invoke00_done.in = ud.out;
    wrapper_early_reset_invoke00_done.in = fsm.out == 1'd0 & signal_reg.out ? 1'd1;
    signal_reg.write_en = fsm.out == 1'd0 & signal_reg.out | fsm.out == 1'd0 & !signal_reg.out & wrapper_early_reset_invoke00_go.out ? 1'd1;
    signal_reg.clk = clk;
    signal_reg.reset = reset;
    signal_reg.in = fsm.out == 1'd0 & !signal_reg.out & wrapper_early_reset_invoke00_go.out ? 1'd1;
    signal_reg.in = fsm.out == 1'd0 & signal_reg.out ? 1'd0;
    early_reset_invoke00_go.in = wrapper_early_reset_invoke00_go.out ? 1'd1;
    wrapper_early_reset_invoke00_go.in = go;
  }
  control {}
}
static<2> component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    @generated fsm1 = std_reg(2);
    @generated ud1 = undef(1);
    @generated adder1 = std_add(2);
    @generated signal_reg = std_reg(1);
    @generated early_reset_static_seq_go = std_wire(1);
    @generated early_reset_static_seq_done = std_wire(1);
    @generated wrapper_early_reset_static_seq_go = std_wire(1);
    @generated wrapper_early_reset_static_seq_done = std_wire(1);
  }
  wires {
    adder1.left = early_reset_static_seq_go.out ? fsm1.out;
    adder1.right = early_reset_static_seq_go.out ? 2'd1;
    done = wrapper_early_reset_static_seq_done.out ? 1'd1;
    fsm1.write_en = early_reset_static_seq_go.out ? 1'd1;
    fsm1.clk = clk;
    fsm1.reset = reset;
    fsm1.in = fsm1.out != 2'd1 & early_reset_static_seq_go.out ? adder1.out;
    fsm1.in = fsm1.out == 2'd1 & early_reset_static_seq_go.out ? 2'd0;
    wrapper_early_reset_static_seq_done.in = fsm1.out == 2'd0 & signal_reg.out ? 1'd1;
    early_reset_static_seq_go.in = wrapper_early_reset_static_seq_go.out ? 1'd1;
    signal_reg.write_en = fsm1.out == 2'd0 & signal_reg.out | fsm1.out == 2'd0 & !signal_reg.out & wrapper_early_reset_static_seq_go.out ? 1'd1;
    signal_reg.clk = clk;
    signal_reg.reset = reset;
    signal_reg.in = fsm1.out == 2'd0 & !signal_reg.out & wrapper_early_reset_static_seq_go.out ? 1'd1;
    signal_reg.in = fsm1.out == 2'd0 & signal_reg.out ? 1'd0;
    early_reset_static_seq_done.in = ud1.out;
    wrapper_early_reset_static_seq_go.in = go;
  }
  control {}
}
