import "primitives/core.futil";
import "primitives/binary_operators.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    @external @data A0 = std_mem_d1(32, 8, 4);
    @data A_read0_0 = std_reg(32);
    @external @data B0 = std_mem_d1(32, 8, 4);
    @data B_read0_0 = std_reg(32);
    @data add0 = std_add(32);
    @data add1 = std_add(4);
    @data const0 = std_const(4, 0);
    @control const1 = std_const(4, 7);
    @control const2 = std_const(1, 0);
    @data const3 = std_const(4, 1);
    @data i0 = std_reg(4);
    @control le0 = std_le(4);
    @data mult_pipe0 = std_mult_pipe(32);
    @external @data v0 = std_mem_d1(32, 1, 1);
    @generated comb_reg = std_reg(1);
    @generated fsm = std_reg(1);
    @generated ud = undef(1);
    @generated adder = std_add(1);
    @generated fsm3 = std_reg(1);
    @generated ud3 = undef(1);
    @generated adder3 = std_add(1);
    @generated fsm8 = std_reg(4);
    @generated ud8 = undef(1);
    @generated adder8 = std_add(4);
    @generated signal_reg = std_reg(1);
    @generated signal_reg0 = std_reg(1);
    @generated fsm10 = std_reg(2);
    @generated early_reset_cond00_go = std_wire(1);
    @generated early_reset_cond00_done = std_wire(1);
    @generated early_reset_invoke00_go = std_wire(1);
    @generated early_reset_invoke00_done = std_wire(1);
    @generated early_reset_static_seq_go = std_wire(1);
    @generated early_reset_static_seq_done = std_wire(1);
    @generated wrapper_early_reset_invoke00_go = std_wire(1);
    @generated wrapper_early_reset_invoke00_done = std_wire(1);
    @generated wrapper_early_reset_cond00_go = std_wire(1);
    @generated wrapper_early_reset_cond00_done = std_wire(1);
    @generated while_wrapper_early_reset_static_seq_go = std_wire(1);
    @generated while_wrapper_early_reset_static_seq_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    i0.write_en = early_reset_invoke00_go.out | fsm8.out == 4'd7 & early_reset_static_seq_go.out ? 1'd1;
    i0.clk = clk;
    i0.reset = reset;
    i0.in = fsm8.out == 4'd7 & early_reset_static_seq_go.out ? add1.out;
    i0.in = early_reset_invoke00_go.out ? const0.out;
    early_reset_cond00_go.in = wrapper_early_reset_cond00_go.out ? 1'd1;
    add1.left = fsm8.out == 4'd7 & early_reset_static_seq_go.out ? i0.out;
    add1.right = fsm8.out == 4'd7 & early_reset_static_seq_go.out ? const3.out;
    done = tdcc_done.out ? 1'd1;
    fsm.write_en = early_reset_cond00_go.out ? 1'd1;
    fsm.clk = clk;
    fsm.reset = reset;
    fsm.in = fsm.out != 1'd0 & early_reset_cond00_go.out ? adder.out;
    fsm.in = fsm.out == 1'd0 & early_reset_cond00_go.out ? 1'd0;
    adder.left = early_reset_cond00_go.out ? fsm.out;
    adder.right = early_reset_cond00_go.out ? 1'd1;
    add0.left = fsm8.out == 4'd6 & early_reset_static_seq_go.out ? v0.read_data;
    add0.right = fsm8.out == 4'd6 & early_reset_static_seq_go.out ? B_read0_0.out;
    fsm3.write_en = early_reset_invoke00_go.out ? 1'd1;
    fsm3.clk = clk;
    fsm3.reset = reset;
    fsm3.in = fsm3.out != 1'd0 & early_reset_invoke00_go.out ? adder3.out;
    fsm3.in = fsm3.out == 1'd0 & early_reset_invoke00_go.out ? 1'd0;
    signal_reg0.write_en = fsm.out == 1'd0 & signal_reg0.out | fsm.out == 1'd0 & !signal_reg0.out & wrapper_early_reset_cond00_go.out ? 1'd1;
    signal_reg0.clk = clk;
    signal_reg0.reset = reset;
    signal_reg0.in = fsm.out == 1'd0 & !signal_reg0.out & wrapper_early_reset_cond00_go.out ? 1'd1;
    signal_reg0.in = fsm.out == 1'd0 & signal_reg0.out ? 1'd0;
    v0.write_en = fsm8.out == 4'd6 & early_reset_static_seq_go.out ? 1'd1;
    v0.clk = clk;
    v0.addr0 = fsm8.out == 4'd6 & early_reset_static_seq_go.out ? const2.out;
    v0.reset = reset;
    v0.write_data = fsm8.out == 4'd6 & early_reset_static_seq_go.out ? add0.out;
    comb_reg.write_en = early_reset_cond00_go.out | fsm8.out == 4'd8 & early_reset_static_seq_go.out ? 1'd1;
    comb_reg.clk = clk;
    comb_reg.reset = reset;
    comb_reg.in = early_reset_cond00_go.out | fsm8.out == 4'd8 & early_reset_static_seq_go.out ? le0.out;
    fsm8.write_en = early_reset_static_seq_go.out ? 1'd1;
    fsm8.clk = clk;
    fsm8.reset = reset;
    fsm8.in = fsm8.out == 4'd8 & early_reset_static_seq_go.out ? 4'd0;
    fsm8.in = fsm8.out != 4'd8 & early_reset_static_seq_go.out ? adder8.out;
    fsm10.write_en = fsm10.out == 2'd3 | fsm10.out == 2'd0 & wrapper_early_reset_invoke00_done.out & tdcc_go.out | fsm10.out == 2'd1 & wrapper_early_reset_cond00_done.out & tdcc_go.out | fsm10.out == 2'd2 & while_wrapper_early_reset_static_seq_done.out & tdcc_go.out ? 1'd1;
    fsm10.clk = clk;
    fsm10.reset = reset;
    fsm10.in = fsm10.out == 2'd0 & wrapper_early_reset_invoke00_done.out & tdcc_go.out ? 2'd1;
    fsm10.in = fsm10.out == 2'd3 ? 2'd0;
    fsm10.in = fsm10.out == 2'd2 & while_wrapper_early_reset_static_seq_done.out & tdcc_go.out ? 2'd3;
    fsm10.in = fsm10.out == 2'd1 & wrapper_early_reset_cond00_done.out & tdcc_go.out ? 2'd2;
    early_reset_cond00_done.in = ud.out;
    while_wrapper_early_reset_static_seq_go.in = !while_wrapper_early_reset_static_seq_done.out & fsm10.out == 2'd2 & tdcc_go.out ? 1'd1;
    tdcc_go.in = go;
    A0.clk = clk;
    A0.addr0 = fsm8.out == 4'd0 & early_reset_static_seq_go.out ? i0.out;
    A0.reset = reset;
    adder3.left = early_reset_invoke00_go.out ? fsm3.out;
    adder3.right = early_reset_invoke00_go.out ? 1'd1;
    mult_pipe0.clk = clk;
    mult_pipe0.left = fsm8.out >= 4'd1 & fsm8.out < 4'd4 & early_reset_static_seq_go.out ? A_read0_0.out;
    mult_pipe0.go = fsm8.out >= 4'd1 & fsm8.out < 4'd4 & early_reset_static_seq_go.out ? 1'd1;
    mult_pipe0.reset = reset;
    mult_pipe0.right = fsm8.out >= 4'd1 & fsm8.out < 4'd4 & early_reset_static_seq_go.out ? B_read0_0.out;
    early_reset_invoke00_done.in = ud3.out;
    early_reset_static_seq_go.in = while_wrapper_early_reset_static_seq_go.out ? 1'd1;
    wrapper_early_reset_invoke00_done.in = fsm3.out == 1'd0 & signal_reg.out ? 1'd1;
    le0.left = early_reset_cond00_go.out | fsm8.out == 4'd8 & early_reset_static_seq_go.out ? i0.out;
    le0.right = early_reset_cond00_go.out | fsm8.out == 4'd8 & early_reset_static_seq_go.out ? const1.out;
    adder8.left = early_reset_static_seq_go.out ? fsm8.out;
    adder8.right = early_reset_static_seq_go.out ? 4'd1;
    signal_reg.write_en = fsm3.out == 1'd0 & signal_reg.out | fsm3.out == 1'd0 & !signal_reg.out & wrapper_early_reset_invoke00_go.out ? 1'd1;
    signal_reg.clk = clk;
    signal_reg.reset = reset;
    signal_reg.in = fsm3.out == 1'd0 & !signal_reg.out & wrapper_early_reset_invoke00_go.out ? 1'd1;
    signal_reg.in = fsm3.out == 1'd0 & signal_reg.out ? 1'd0;
    B0.clk = clk;
    B0.addr0 = fsm8.out == 4'd0 & early_reset_static_seq_go.out ? i0.out;
    B0.reset = reset;
    B_read0_0.write_en = (fsm8.out == 4'd0 | fsm8.out == 4'd5) & early_reset_static_seq_go.out ? 1'd1;
    B_read0_0.clk = clk;
    B_read0_0.reset = reset;
    B_read0_0.in = fsm8.out == 4'd0 & early_reset_static_seq_go.out ? B0.read_data;
    B_read0_0.in = fsm8.out == 4'd5 & early_reset_static_seq_go.out ? A_read0_0.out;
    wrapper_early_reset_cond00_go.in = !wrapper_early_reset_cond00_done.out & fsm10.out == 2'd1 & tdcc_go.out ? 1'd1;
    wrapper_early_reset_cond00_done.in = fsm.out == 1'd0 & signal_reg0.out ? 1'd1;
    early_reset_invoke00_go.in = wrapper_early_reset_invoke00_go.out ? 1'd1;
    early_reset_static_seq_done.in = ud8.out;
    wrapper_early_reset_invoke00_go.in = !wrapper_early_reset_invoke00_done.out & fsm10.out == 2'd0 & tdcc_go.out ? 1'd1;
    tdcc_done.in = fsm10.out == 2'd3 ? 1'd1;
    while_wrapper_early_reset_static_seq_done.in = !comb_reg.out & fsm8.out == 4'd0 ? 1'd1;
    A_read0_0.write_en = (fsm8.out == 4'd0 | fsm8.out == 4'd4) & early_reset_static_seq_go.out ? 1'd1;
    A_read0_0.clk = clk;
    A_read0_0.reset = reset;
    A_read0_0.in = fsm8.out == 4'd0 & early_reset_static_seq_go.out ? A0.read_data;
    A_read0_0.in = fsm8.out == 4'd4 & early_reset_static_seq_go.out ? mult_pipe0.out;
  }
  control {}
}
