import "primitives/core.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    @external A0 = std_mem_d1(32, 8, 4);
    A_read0_0 = std_reg(32);
    @external B0 = std_mem_d1(32, 8, 4);
    B_read0_0 = std_reg(32);
    @external Sum0 = std_mem_d1(32, 8, 4);
    add0 = std_add(32);
    add1 = std_add(4);
    const0 = std_const(4, 0);
    const1 = std_const(4, 7);
    const2 = std_const(4, 1);
    i0 = std_reg(4);
    le0 = std_le(4);
    @generated comb_reg = std_reg(1);
    @generated comb_reg0 = std_reg(4);
    @generated fsm = std_reg(3);
    @generated upd2_go = std_wire(1);
    @generated upd2_done = std_wire(1);
    @generated cond00_go = std_wire(1);
    @generated cond00_done = std_wire(1);
    @generated comb_invoke0_go = std_wire(1);
    @generated comb_invoke0_done = std_wire(1);
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
    @generated invoke1_go = std_wire(1);
    @generated invoke1_done = std_wire(1);
    @generated msp_go = std_wire(1);
    @generated msp_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    A0.addr0 = msp_go.out ? i0.out;
    A0.clk = clk;
    A_read0_0.clk = clk;
    A_read0_0.in = msp_go.out ? A0.read_data;
    A_read0_0.reset = reset;
    A_read0_0.write_en = msp_go.out ? 1'd1;
    B0.addr0 = msp_go.out ? i0.out;
    B0.clk = clk;
    B_read0_0.clk = clk;
    B_read0_0.in = msp_go.out ? B0.read_data;
    B_read0_0.reset = reset;
    B_read0_0.write_en = msp_go.out ? 1'd1;
    Sum0.addr0 = upd2_go.out ? i0.out;
    Sum0.clk = clk;
    Sum0.write_data = upd2_go.out ? add0.out;
    Sum0.write_en = upd2_go.out ? 1'd1;
    done = tdcc_done.out ? 1'd1;
    add0.left = upd2_go.out ? A_read0_0.out;
    add0.right = upd2_go.out ? B_read0_0.out;
    add1.left = comb_invoke0_go.out ? i0.out;
    add1.right = comb_invoke0_go.out ? const2.out;
    comb_invoke0_done.in = comb_reg0.done ? 1'd1;
    comb_invoke0_go.in = !comb_invoke0_done.out & fsm.out == 3'd4 & tdcc_go.out ? 1'd1;
    comb_reg.clk = clk;
    comb_reg.in = cond00_go.out ? le0.out;
    comb_reg.reset = reset;
    comb_reg.write_en = cond00_go.out ? 1'd1;
    comb_reg0.clk = clk;
    comb_reg0.in = comb_invoke0_go.out ? add1.out;
    comb_reg0.reset = reset;
    comb_reg0.write_en = comb_invoke0_go.out ? 1'd1;
    cond00_done.in = comb_reg.done ? 1'd1;
    cond00_go.in = !cond00_done.out & fsm.out == 3'd1 & tdcc_go.out | !cond00_done.out & fsm.out == 3'd6 & tdcc_go.out ? 1'd1;
    fsm.clk = clk;
    fsm.in = fsm.out == 3'd7 ? 3'd0;
    fsm.in = fsm.out == 3'd0 & invoke0_done.out & tdcc_go.out ? 3'd1;
    fsm.in = fsm.out == 3'd1 & cond00_done.out & comb_reg.out & tdcc_go.out | fsm.out == 3'd6 & cond00_done.out & comb_reg.out & tdcc_go.out ? 3'd2;
    fsm.in = fsm.out == 3'd2 & msp_done.out & tdcc_go.out ? 3'd3;
    fsm.in = fsm.out == 3'd3 & upd2_done.out & tdcc_go.out ? 3'd4;
    fsm.in = fsm.out == 3'd4 & comb_invoke0_done.out & tdcc_go.out ? 3'd5;
    fsm.in = fsm.out == 3'd5 & invoke1_done.out & tdcc_go.out ? 3'd6;
    fsm.in = fsm.out == 3'd1 & cond00_done.out & !comb_reg.out & tdcc_go.out | fsm.out == 3'd6 & cond00_done.out & !comb_reg.out & tdcc_go.out ? 3'd7;
    fsm.reset = reset;
    fsm.write_en = fsm.out == 3'd7 | fsm.out == 3'd0 & invoke0_done.out & tdcc_go.out | fsm.out == 3'd1 & cond00_done.out & comb_reg.out & tdcc_go.out | fsm.out == 3'd6 & cond00_done.out & comb_reg.out & tdcc_go.out | fsm.out == 3'd2 & msp_done.out & tdcc_go.out | fsm.out == 3'd3 & upd2_done.out & tdcc_go.out | fsm.out == 3'd4 & comb_invoke0_done.out & tdcc_go.out | fsm.out == 3'd5 & invoke1_done.out & tdcc_go.out | fsm.out == 3'd1 & cond00_done.out & !comb_reg.out & tdcc_go.out | fsm.out == 3'd6 & cond00_done.out & !comb_reg.out & tdcc_go.out ? 1'd1;
    i0.clk = clk;
    i0.in = invoke1_go.out ? comb_reg0.out;
    i0.in = invoke0_go.out ? const0.out;
    i0.reset = reset;
    i0.write_en = invoke0_go.out | invoke1_go.out ? 1'd1;
    invoke0_done.in = i0.done;
    invoke0_go.in = !invoke0_done.out & fsm.out == 3'd0 & tdcc_go.out ? 1'd1;
    invoke1_done.in = i0.done;
    invoke1_go.in = !invoke1_done.out & fsm.out == 3'd5 & tdcc_go.out ? 1'd1;
    le0.left = cond00_go.out ? i0.out;
    le0.right = cond00_go.out ? const1.out;
    msp_done.in = A_read0_0.done & B_read0_0.done ? 1'd1;
    msp_go.in = !msp_done.out & fsm.out == 3'd2 & tdcc_go.out ? 1'd1;
    tdcc_done.in = fsm.out == 3'd7 ? 1'd1;
    tdcc_go.in = go;
    upd2_done.in = Sum0.done;
    upd2_go.in = !upd2_done.out & fsm.out == 3'd3 & tdcc_go.out ? 1'd1;
  }

  control {}
}
